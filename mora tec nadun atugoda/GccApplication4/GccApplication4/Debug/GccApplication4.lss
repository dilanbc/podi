
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081a  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000628  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000351  00000000  00000000  00001072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000234  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <servoangle>:
}


void servoangle(uint8_t pin){

	if (pin)
  6c:	81 11       	cpse	r24, r1
  6e:	20 c0       	rjmp	.+64     	; 0xb0 <servoangle+0x44>
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	3f c0       	rjmp	.+126    	; 0xf2 <servoangle+0x86>
	{
		for(uint8_t j=0;j<100;j++){
			PORTD|=(1<<4);
  74:	82 b3       	in	r24, 0x12	; 18
  76:	80 61       	ori	r24, 0x10	; 16
  78:	82 bb       	out	0x12, r24	; 18
			for(uint8_t i=0;i<10;i++){
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	07 c0       	rjmp	.+14     	; 0x8c <servoangle+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	e7 ec       	ldi	r30, 0xC7	; 199
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <servoangle+0x16>
  86:	00 c0       	rjmp	.+0      	; 0x88 <servoangle+0x1c>
  88:	00 00       	nop
  8a:	8f 5f       	subi	r24, 0xFF	; 255
  8c:	8a 30       	cpi	r24, 0x0A	; 10
  8e:	b8 f3       	brcs	.-18     	; 0x7e <servoangle+0x12>
				_delay_us(100);
			}
			PORTD&=~(1<<4);
  90:	82 b3       	in	r24, 0x12	; 18
  92:	8f 7e       	andi	r24, 0xEF	; 239
  94:	82 bb       	out	0x12, r24	; 18
			
		
			
			for(uint8_t i=0;i<10;i++){
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	07 c0       	rjmp	.+14     	; 0xa8 <servoangle+0x3c>
  9a:	e7 ec       	ldi	r30, 0xC7	; 199
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <servoangle+0x32>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <servoangle+0x38>
  a4:	00 00       	nop
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	8a 30       	cpi	r24, 0x0A	; 10
  aa:	b8 f3       	brcs	.-18     	; 0x9a <servoangle+0x2e>

void servoangle(uint8_t pin){

	if (pin)
	{
		for(uint8_t j=0;j<100;j++){
  ac:	9f 5f       	subi	r25, 0xFF	; 255
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <servoangle+0x46>
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	94 36       	cpi	r25, 0x64	; 100
  b4:	f8 f2       	brcs	.-66     	; 0x74 <servoangle+0x8>
  b6:	08 95       	ret
		}
	}
	else
	{for(uint8_t j=0;j<100;j++){
		
		PORTD|=(1<<4);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	82 bb       	out	0x12, r24	; 18
		for(uint8_t i=0;i<15;i++){
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <servoangle+0x64>
  c2:	e7 ec       	ldi	r30, 0xC7	; 199
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <servoangle+0x5a>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <servoangle+0x60>
  cc:	00 00       	nop
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	8f 30       	cpi	r24, 0x0F	; 15
  d2:	b8 f3       	brcs	.-18     	; 0xc2 <servoangle+0x56>
			_delay_us(100);
		}
		PORTD&=~(1<<4);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8f 7e       	andi	r24, 0xEF	; 239
  d8:	82 bb       	out	0x12, r24	; 18
		
		
		
		for(uint8_t i=0;i<15;i++){
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	07 c0       	rjmp	.+14     	; 0xec <servoangle+0x80>
  de:	e7 ec       	ldi	r30, 0xC7	; 199
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <servoangle+0x76>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <servoangle+0x7c>
  e8:	00 00       	nop
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	8f 30       	cpi	r24, 0x0F	; 15
  ee:	b8 f3       	brcs	.-18     	; 0xde <servoangle+0x72>
				_delay_us(100);
			}
		}
	}
	else
	{for(uint8_t j=0;j<100;j++){
  f0:	9f 5f       	subi	r25, 0xFF	; 255
  f2:	94 36       	cpi	r25, 0x64	; 100
  f4:	08 f3       	brcs	.-62     	; 0xb8 <servoangle+0x4c>
  f6:	08 95       	ret

000000f8 <main>:
void servoangle(uint8_t pin);

int main(void)
{
	
	DDRD|=(1<<4);
  f8:	81 b3       	in	r24, 0x11	; 17
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	81 bb       	out	0x11, r24	; 17
	DDRC|=(1<<2);
  fe:	84 b3       	in	r24, 0x14	; 20
 100:	84 60       	ori	r24, 0x04	; 4
 102:	84 bb       	out	0x14, r24	; 20
	while (1)
	{	PORTC|=(1<<2);
 104:	85 b3       	in	r24, 0x15	; 21
 106:	84 60       	ori	r24, 0x04	; 4
 108:	85 bb       	out	0x15, r24	; 21
		servoangle(0);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 36 00 	call	0x6c	; 0x6c <servoangle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	80 e7       	ldi	r24, 0x70	; 112
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x1e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x28>
 120:	00 00       	nop
		_delay_ms(100);
		PORTC&=~(1<<2);
 122:	85 b3       	in	r24, 0x15	; 21
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	85 bb       	out	0x15, r24	; 21
		servoangle(1);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 36 00 	call	0x6c	; 0x6c <servoangle>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	80 e7       	ldi	r24, 0x70	; 112
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x3c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x46>
 13e:	00 00       	nop
 140:	e1 cf       	rjmp	.-62     	; 0x104 <main+0xc>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>

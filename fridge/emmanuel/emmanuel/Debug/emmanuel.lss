
emmanuel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019c  00800100  00001370  00001404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001370  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011d  0080029c  0080029c  000015a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000248d  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000918  00000000  00000000  00003b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b46  00000000  00000000  00004479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00004fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000713  00000000  00000000  0000525c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018ee  00000000  00000000  0000596f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000725d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e7       	ldi	r30, 0x70	; 112
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 39       	cpi	r26, 0x9C	; 156
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac e9       	ldi	r26, 0x9C	; 156
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3b       	cpi	r26, 0xB9	; 185
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b6 04 	call	0x96c	; 0x96c <main>
      9e:	0c 94 b6 09 	jmp	0x136c	; 0x136c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
	
	char fString[10];
	dtostrf(number,length,deciP,fString);
	USART_TxString(fString);
	
}
      a6:	9c 01       	movw	r18, r24
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	50 e0       	ldi	r21, 0x00	; 0
      ac:	60 e2       	ldi	r22, 0x20	; 32
      ae:	71 ea       	ldi	r23, 0xA1	; 161
      b0:	87 e0       	ldi	r24, 0x07	; 7
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__divmodsi4>
      b8:	21 50       	subi	r18, 0x01	; 1
      ba:	31 09       	sbc	r19, r1
      bc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
      c0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      c4:	88 e9       	ldi	r24, 0x98	; 152
      c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
      ca:	86 e0       	ldi	r24, 0x06	; 6
      cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
      d0:	78 94       	sei
      d2:	08 95       	ret

000000d4 <_Z14USART_Transmith>:
      d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      d8:	95 ff       	sbrs	r25, 5
      da:	fc cf       	rjmp	.-8      	; 0xd4 <_Z14USART_Transmith>
      dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      e0:	08 95       	ret

000000e2 <_Z16USART_TxStringlnPc>:
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	ec 01       	movw	r28, r24
      e8:	88 81       	ld	r24, Y
      ea:	88 23       	and	r24, r24
      ec:	21 f0       	breq	.+8      	; 0xf6 <_Z16USART_TxStringlnPc+0x14>
      ee:	21 96       	adiw	r28, 0x01	; 1
      f0:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
      f4:	f9 cf       	rjmp	.-14     	; 0xe8 <_Z16USART_TxStringlnPc+0x6>
      f6:	8d e0       	ldi	r24, 0x0D	; 13
      f8:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
      fc:	8a e0       	ldi	r24, 0x0A	; 10
      fe:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <__vector_18>:


ISR(USART_RX_vect){
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	2f 93       	push	r18
     114:	3f 93       	push	r19
     116:	4f 93       	push	r20
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
     11c:	af 93       	push	r26
     11e:	bf 93       	push	r27
     120:	ef 93       	push	r30
     122:	ff 93       	push	r31
	//PORTB^=1<<0;
	char rchar=UDR0;
     124:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	uint8_t i=0;
     128:	e0 e0       	ldi	r30, 0x00	; 0
	
	while(rxvalue[i]){
     12a:	ae 2f       	mov	r26, r30
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	ab 5a       	subi	r26, 0xAB	; 171
     130:	bc 4f       	sbci	r27, 0xFC	; 252
     132:	8c 91       	ld	r24, X
     134:	88 23       	and	r24, r24
     136:	19 f0       	breq	.+6      	; 0x13e <__vector_18+0x36>
	i++;
     138:	ef 5f       	subi	r30, 0xFF	; 255
	if (i==rxshiftNum)
     13a:	e4 36       	cpi	r30, 0x64	; 100
     13c:	b1 f7       	brne	.-20     	; 0x12a <__vector_18+0x22>
	{break;
	}
	}
	if (i<rxshiftNum)
     13e:	e4 36       	cpi	r30, 0x64	; 100
     140:	28 f4       	brcc	.+10     	; 0x14c <__vector_18+0x44>
	{rxvalue[i]=rchar;
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	eb 5a       	subi	r30, 0xAB	; 171
     146:	fc 4f       	sbci	r31, 0xFC	; 252
     148:	40 83       	st	Z, r20
     14a:	11 c0       	rjmp	.+34     	; 0x16e <__vector_18+0x66>
     14c:	20 e0       	ldi	r18, 0x00	; 0
	} 
	else
	{
		for(uint8_t i=0;i<rxshiftNum-1;i++){
     14e:	23 36       	cpi	r18, 0x63	; 99
     150:	60 f4       	brcc	.+24     	; 0x16a <__vector_18+0x62>
		rxvalue[i]=rxvalue[i+1];
     152:	82 2f       	mov	r24, r18
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	fc 01       	movw	r30, r24
     158:	ea 5a       	subi	r30, 0xAA	; 170
     15a:	fc 4f       	sbci	r31, 0xFC	; 252
     15c:	30 81       	ld	r19, Z
     15e:	fc 01       	movw	r30, r24
     160:	eb 5a       	subi	r30, 0xAB	; 171
     162:	fc 4f       	sbci	r31, 0xFC	; 252
     164:	30 83       	st	Z, r19
	if (i<rxshiftNum)
	{rxvalue[i]=rchar;
	} 
	else
	{
		for(uint8_t i=0;i<rxshiftNum-1;i++){
     166:	2f 5f       	subi	r18, 0xFF	; 255
     168:	f2 cf       	rjmp	.-28     	; 0x14e <__vector_18+0x46>
		rxvalue[i]=rxvalue[i+1];
	}
	rxvalue[rxshiftNum-1]=rchar;
     16a:	40 93 b8 03 	sts	0x03B8, r20	; 0x8003b8 <rxvalue+0x63>
		
	}
	
		
}
     16e:	ff 91       	pop	r31
     170:	ef 91       	pop	r30
     172:	bf 91       	pop	r27
     174:	af 91       	pop	r26
     176:	9f 91       	pop	r25
     178:	8f 91       	pop	r24
     17a:	4f 91       	pop	r20
     17c:	3f 91       	pop	r19
     17e:	2f 91       	pop	r18
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <_Z16USART_ReciveWaitPcib>:



bool USART_ReciveWait(char*wait=0,int16_t timeout=0,bool deleteWait=0){
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	7c 01       	movw	r14, r24
     196:	cb 01       	movw	r24, r22
	bool waitbool=0;
	uint8_t temptimeOut=0;
	timeout=timeout/100;
     198:	64 e6       	ldi	r22, 0x64	; 100
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	0e 94 c4 05 	call	0xb88	; 0xb88 <__divmodhi4>
	if (wait!=0)
     1a0:	e1 14       	cp	r14, r1
     1a2:	f1 04       	cpc	r15, r1
     1a4:	89 f1       	breq	.+98     	; 0x208 <_Z16USART_ReciveWaitPcib+0x7e>
     1a6:	8b 01       	movw	r16, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a8:	2f ef       	ldi	r18, 0xFF	; 255
     1aa:	40 e7       	ldi	r20, 0x70	; 112
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	21 50       	subi	r18, 0x01	; 1
     1b0:	40 40       	sbci	r20, 0x00	; 0
     1b2:	80 40       	sbci	r24, 0x00	; 0
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <_Z16USART_ReciveWaitPcib+0x24>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <_Z16USART_ReciveWaitPcib+0x2e>
     1b8:	00 00       	nop
	{  _delay_ms(100);
		char*tempwait={0};
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0



bool USART_ReciveWait(char*wait=0,int16_t timeout=0,bool deleteWait=0){
	bool waitbool=0;
	uint8_t temptimeOut=0;
     1be:	c0 e0       	ldi	r28, 0x00	; 0
	timeout=timeout/100;
	if (wait!=0)
	{  _delay_ms(100);
		char*tempwait={0};
		while(tempwait==0){
     1c0:	23 2b       	or	r18, r19
     1c2:	21 f5       	brne	.+72     	; 0x20c <_Z16USART_ReciveWaitPcib+0x82>
			tempwait =strstr(rxvalue,wait);
     1c4:	b7 01       	movw	r22, r14
     1c6:	85 e5       	ldi	r24, 0x55	; 85
     1c8:	93 e0       	ldi	r25, 0x03	; 3
     1ca:	0e 94 aa 06 	call	0xd54	; 0xd54 <strstr>
     1ce:	9c 01       	movw	r18, r24
     1d0:	9f ef       	ldi	r25, 0xFF	; 255
     1d2:	40 e7       	ldi	r20, 0x70	; 112
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	91 50       	subi	r25, 0x01	; 1
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	80 40       	sbci	r24, 0x00	; 0
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_Z16USART_ReciveWaitPcib+0x4c>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_Z16USART_ReciveWaitPcib+0x56>
     1e0:	00 00       	nop
					
			_delay_ms(100);
			temptimeOut++;
     1e2:	cf 5f       	subi	r28, 0xFF	; 255
			if ((temptimeOut>timeout)&(timeout!=0))
     1e4:	4c 2f       	mov	r20, r28
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	04 17       	cp	r16, r20
     1ec:	15 07       	cpc	r17, r21
     1ee:	0c f0       	brlt	.+2      	; 0x1f2 <_Z16USART_ReciveWaitPcib+0x68>
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	99 23       	and	r25, r25
     1f4:	29 f3       	breq	.-54     	; 0x1c0 <_Z16USART_ReciveWaitPcib+0x36>
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	01 15       	cp	r16, r1
     1fa:	11 05       	cpc	r17, r1
     1fc:	09 f4       	brne	.+2      	; 0x200 <_Z16USART_ReciveWaitPcib+0x76>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	88 23       	and	r24, r24
     202:	f1 f2       	breq	.-68     	; 0x1c0 <_Z16USART_ReciveWaitPcib+0x36>
			{waitbool=0;
				return waitbool;
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	03 c0       	rjmp	.+6      	; 0x20e <_Z16USART_ReciveWaitPcib+0x84>
}



bool USART_ReciveWait(char*wait=0,int16_t timeout=0,bool deleteWait=0){
	bool waitbool=0;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	01 c0       	rjmp	.+2      	; 0x20e <_Z16USART_ReciveWaitPcib+0x84>
				return waitbool;
				
			}
			
		}
		waitbool=1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	return waitbool;
}
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	08 95       	ret

0000021a <_Z13USART_ClearRXv>:


void USART_ClearRX(){
	for(uint8_t i=0;i<rxshiftNum;i++){
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	84 36       	cpi	r24, 0x64	; 100
     21e:	38 f4       	brcc	.+14     	; 0x22e <_Z13USART_ClearRXv+0x14>
		rxvalue[i]=NULL;
     220:	e8 2f       	mov	r30, r24
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	eb 5a       	subi	r30, 0xAB	; 171
     226:	fc 4f       	sbci	r31, 0xFC	; 252
     228:	10 82       	st	Z, r1
	return waitbool;
}


void USART_ClearRX(){
	for(uint8_t i=0;i<rxshiftNum;i++){
     22a:	8f 5f       	subi	r24, 0xFF	; 255
     22c:	f7 cf       	rjmp	.-18     	; 0x21c <_Z13USART_ClearRXv+0x2>
     22e:	08 95       	ret

00000230 <_Z16mainFunctionInitv>:
    }
}


void mainFunctionInit(){
	USART_Init(9600);
     230:	80 e8       	ldi	r24, 0x80	; 128
     232:	95 e2       	ldi	r25, 0x25	; 37
     234:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
	USART_ClearRX();
     238:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	DDRD|=(1<<2);// rst
     23c:	8a b1       	in	r24, 0x0a	; 10
     23e:	84 60       	ori	r24, 0x04	; 4
     240:	8a b9       	out	0x0a, r24	; 10
     242:	08 95       	ret

00000244 <_Z8checkGSMv>:
	
}

bool checkGSM(){
     244:	cf 93       	push	r28
	PORTD&=~(1<<2);
     246:	8b b1       	in	r24, 0x0b	; 11
     248:	8b 7f       	andi	r24, 0xFB	; 251
     24a:	8b b9       	out	0x0b, r24	; 11
     24c:	2f ef       	ldi	r18, 0xFF	; 255
     24e:	84 e3       	ldi	r24, 0x34	; 52
     250:	9c e0       	ldi	r25, 0x0C	; 12
     252:	21 50       	subi	r18, 0x01	; 1
     254:	80 40       	sbci	r24, 0x00	; 0
     256:	90 40       	sbci	r25, 0x00	; 0
     258:	e1 f7       	brne	.-8      	; 0x252 <_Z8checkGSMv+0xe>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <_Z8checkGSMv+0x18>
     25c:	00 00       	nop
	_delay_ms(500);
	PORTD|=(1<<2);
     25e:	8b b1       	in	r24, 0x0b	; 11
     260:	84 60       	ori	r24, 0x04	; 4
     262:	8b b9       	out	0x0b, r24	; 11
     264:	2f ef       	ldi	r18, 0xFF	; 255
     266:	89 e6       	ldi	r24, 0x69	; 105
     268:	98 e1       	ldi	r25, 0x18	; 24
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	80 40       	sbci	r24, 0x00	; 0
     26e:	90 40       	sbci	r25, 0x00	; 0
     270:	e1 f7       	brne	.-8      	; 0x26a <_Z8checkGSMv+0x26>
     272:	00 c0       	rjmp	.+0      	; 0x274 <_Z8checkGSMv+0x30>
     274:	00 00       	nop
	_delay_ms(1000);
	for(uint8_t i=0;i<20;i++){
     276:	c0 e0       	ldi	r28, 0x00	; 0
     278:	c4 31       	cpi	r28, 0x14	; 20
     27a:	78 f4       	brcc	.+30     	; 0x29a <_Z8checkGSMv+0x56>
		USART_TxStringln((char*)"AT");
     27c:	80 e1       	ldi	r24, 0x10	; 16
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
		if (USART_ReciveWait((char*)"OK",1000))
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	68 ee       	ldi	r22, 0xE8	; 232
     288:	73 e0       	ldi	r23, 0x03	; 3
     28a:	83 e1       	ldi	r24, 0x13	; 19
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     292:	88 23       	and	r24, r24
     294:	21 f0       	breq	.+8      	; 0x29e <_Z8checkGSMv+0x5a>
		{USART_ClearRX();
     296:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
bool checkGSM(){
	PORTD&=~(1<<2);
	_delay_ms(500);
	PORTD|=(1<<2);
	_delay_ms(1000);
	for(uint8_t i=0;i<20;i++){
     29a:	c0 e0       	ldi	r28, 0x00	; 0
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <_Z8checkGSMv+0x62>
		USART_TxStringln((char*)"AT");
		if (USART_ReciveWait((char*)"OK",1000))
		{USART_ClearRX();
			break;
		}
		if (i==19)
     29e:	c3 31       	cpi	r28, 0x13	; 19
     2a0:	d1 f1       	breq	.+116    	; 0x316 <_Z8checkGSMv+0xd2>
bool checkGSM(){
	PORTD&=~(1<<2);
	_delay_ms(500);
	PORTD|=(1<<2);
	_delay_ms(1000);
	for(uint8_t i=0;i<20;i++){
     2a2:	cf 5f       	subi	r28, 0xFF	; 255
     2a4:	e9 cf       	rjmp	.-46     	; 0x278 <_Z8checkGSMv+0x34>
		}
	}
	
	int gsm;//gsm signal calculation
	
	for(uint8_t i=0;i<20;i++){
     2a6:	c4 31       	cpi	r28, 0x14	; 20
     2a8:	a8 f5       	brcc	.+106    	; 0x314 <_Z8checkGSMv+0xd0>
		USART_TxStringln("AT+CSQ");  //signal strength
     2aa:	86 e1       	ldi	r24, 0x16	; 22
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
     2b2:	2f ef       	ldi	r18, 0xFF	; 255
     2b4:	84 e3       	ldi	r24, 0x34	; 52
     2b6:	9c e0       	ldi	r25, 0x0C	; 12
     2b8:	21 50       	subi	r18, 0x01	; 1
     2ba:	80 40       	sbci	r24, 0x00	; 0
     2bc:	90 40       	sbci	r25, 0x00	; 0
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <_Z8checkGSMv+0x74>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z8checkGSMv+0x7e>
     2c2:	00 00       	nop
		_delay_ms(500);
		strncpy(lengthcal,strstr(rxvalue,"CSQ: ")+5,2);
     2c4:	6d e1       	ldi	r22, 0x1D	; 29
     2c6:	71 e0       	ldi	r23, 0x01	; 1
     2c8:	85 e5       	ldi	r24, 0x55	; 85
     2ca:	93 e0       	ldi	r25, 0x03	; 3
     2cc:	0e 94 aa 06 	call	0xd54	; 0xd54 <strstr>
     2d0:	bc 01       	movw	r22, r24
     2d2:	6b 5f       	subi	r22, 0xFB	; 251
     2d4:	7f 4f       	sbci	r23, 0xFF	; 255
     2d6:	42 e0       	ldi	r20, 0x02	; 2
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	86 e1       	ldi	r24, 0x16	; 22
     2dc:	93 e0       	ldi	r25, 0x03	; 3
     2de:	0e 94 9b 06 	call	0xd36	; 0xd36 <strncpy>
		gsm=atoi(lengthcal);
     2e2:	86 e1       	ldi	r24, 0x16	; 22
     2e4:	93 e0       	ldi	r25, 0x03	; 3
     2e6:	0e 94 3c 06 	call	0xc78	; 0xc78 <atoi>
		if (gsm>12)
     2ea:	0d 97       	sbiw	r24, 0x0d	; 13
     2ec:	24 f0       	brlt	.+8      	; 0x2f6 <_Z8checkGSMv+0xb2>
		{USART_ClearRX();
     2ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
			return 1;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	10 c0       	rjmp	.+32     	; 0x316 <_Z8checkGSMv+0xd2>
		}
		else{
			USART_ClearRX();
     2f6:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
     2fa:	2f ef       	ldi	r18, 0xFF	; 255
     2fc:	89 e6       	ldi	r24, 0x69	; 105
     2fe:	98 e1       	ldi	r25, 0x18	; 24
     300:	21 50       	subi	r18, 0x01	; 1
     302:	80 40       	sbci	r24, 0x00	; 0
     304:	90 40       	sbci	r25, 0x00	; 0
     306:	e1 f7       	brne	.-8      	; 0x300 <_Z8checkGSMv+0xbc>
     308:	00 c0       	rjmp	.+0      	; 0x30a <_Z8checkGSMv+0xc6>
     30a:	00 00       	nop
			_delay_ms(1000);
		}
		USART_ClearRX();
     30c:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
		}
	}
	
	int gsm;//gsm signal calculation
	
	for(uint8_t i=0;i<20;i++){
     310:	cf 5f       	subi	r28, 0xFF	; 255
     312:	c9 cf       	rjmp	.-110    	; 0x2a6 <_Z8checkGSMv+0x62>
			USART_ClearRX();
			_delay_ms(1000);
		}
		USART_ClearRX();
	}
	return 0;
     314:	80 e0       	ldi	r24, 0x00	; 0
}
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <_Z8setupGSMv>:

void setupGSM(){
	//******SMS Functions
	USART_TxStringln((char*)"AT+CMGF=1");
     31a:	83 e2       	ldi	r24, 0x23	; 35
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait((char*)"OK",1000,1);
     322:	41 e0       	ldi	r20, 0x01	; 1
     324:	68 ee       	ldi	r22, 0xE8	; 232
     326:	73 e0       	ldi	r23, 0x03	; 3
     328:	83 e1       	ldi	r24, 0x13	; 19
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     330:	2f ef       	ldi	r18, 0xFF	; 255
     332:	81 ee       	ldi	r24, 0xE1	; 225
     334:	94 e0       	ldi	r25, 0x04	; 4
     336:	21 50       	subi	r18, 0x01	; 1
     338:	80 40       	sbci	r24, 0x00	; 0
     33a:	90 40       	sbci	r25, 0x00	; 0
     33c:	e1 f7       	brne	.-8      	; 0x336 <_Z8setupGSMv+0x1c>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <_Z8setupGSMv+0x26>
     340:	00 00       	nop
	_delay_ms(200);
	USART_ClearRX();
     342:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	USART_TxStringln((char*)"AT+CNMI=1,2,0,0,0");
     346:	8d e2       	ldi	r24, 0x2D	; 45
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait((char*)"OK",1000,1);
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	68 ee       	ldi	r22, 0xE8	; 232
     352:	73 e0       	ldi	r23, 0x03	; 3
     354:	83 e1       	ldi	r24, 0x13	; 19
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	81 ee       	ldi	r24, 0xE1	; 225
     360:	94 e0       	ldi	r25, 0x04	; 4
     362:	21 50       	subi	r18, 0x01	; 1
     364:	80 40       	sbci	r24, 0x00	; 0
     366:	90 40       	sbci	r25, 0x00	; 0
     368:	e1 f7       	brne	.-8      	; 0x362 <_Z8setupGSMv+0x48>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <_Z8setupGSMv+0x52>
     36c:	00 00       	nop
	_delay_ms(200);
	
	USART_TxStringln("AT+SAPBR=3,1,Contype,GPRS");
     36e:	8f e3       	ldi	r24, 0x3F	; 63
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000,1);
     376:	41 e0       	ldi	r20, 0x01	; 1
     378:	68 ee       	ldi	r22, 0xE8	; 232
     37a:	73 e0       	ldi	r23, 0x03	; 3
     37c:	83 e1       	ldi	r24, 0x13	; 19
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     384:	2f ef       	ldi	r18, 0xFF	; 255
     386:	81 ee       	ldi	r24, 0xE1	; 225
     388:	94 e0       	ldi	r25, 0x04	; 4
     38a:	21 50       	subi	r18, 0x01	; 1
     38c:	80 40       	sbci	r24, 0x00	; 0
     38e:	90 40       	sbci	r25, 0x00	; 0
     390:	e1 f7       	brne	.-8      	; 0x38a <_Z8setupGSMv+0x70>
     392:	00 c0       	rjmp	.+0      	; 0x394 <_Z8setupGSMv+0x7a>
     394:	00 00       	nop
	_delay_ms(200);
	
	sprintf(lengthcal,"AT+SAPBR=3,1,APN,%s",apn);
     396:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <apn+0x1>
     39a:	8f 93       	push	r24
     39c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <apn>
     3a0:	8f 93       	push	r24
     3a2:	89 e5       	ldi	r24, 0x59	; 89
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	9f 93       	push	r25
     3a8:	8f 93       	push	r24
     3aa:	86 e1       	ldi	r24, 0x16	; 22
     3ac:	93 e0       	ldi	r25, 0x03	; 3
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	0e 94 cc 06 	call	0xd98	; 0xd98 <sprintf>
	USART_TxStringln(lengthcal);
     3b6:	86 e1       	ldi	r24, 0x16	; 22
     3b8:	93 e0       	ldi	r25, 0x03	; 3
     3ba:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000);
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	68 ee       	ldi	r22, 0xE8	; 232
     3c2:	73 e0       	ldi	r23, 0x03	; 3
     3c4:	83 e1       	ldi	r24, 0x13	; 19
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     3cc:	2f ef       	ldi	r18, 0xFF	; 255
     3ce:	81 ee       	ldi	r24, 0xE1	; 225
     3d0:	94 e0       	ldi	r25, 0x04	; 4
     3d2:	21 50       	subi	r18, 0x01	; 1
     3d4:	80 40       	sbci	r24, 0x00	; 0
     3d6:	90 40       	sbci	r25, 0x00	; 0
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <_Z8setupGSMv+0xb8>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <_Z8setupGSMv+0xc2>
     3dc:	00 00       	nop
	_delay_ms(200);
	USART_ClearRX();
     3de:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
}
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	08 95       	ret

000003f0 <_Z14uploaddataPOSTbbb>:

bool uploaddataPOST(bool getbottle,bool hasbottle,bool checks){
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	18 2f       	mov	r17, r24
     3fc:	06 2f       	mov	r16, r22
     3fe:	f4 2e       	mov	r15, r20
	
	bool returnValue=0;
	
	USART_TxStringln("AT+SAPBR=2,1");
     400:	8d e6       	ldi	r24, 0x6D	; 109
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",3000);
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	68 eb       	ldi	r22, 0xB8	; 184
     40c:	7b e0       	ldi	r23, 0x0B	; 11
     40e:	83 e1       	ldi	r24, 0x13	; 19
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     416:	8f e4       	ldi	r24, 0x4F	; 79
     418:	93 ec       	ldi	r25, 0xC3	; 195
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     420:	00 00       	nop
	_delay_ms(25);
	
	if (USART_ReciveWait("0.0.0.0",100))
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	64 e6       	ldi	r22, 0x64	; 100
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	8a e7       	ldi	r24, 0x7A	; 122
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     430:	88 23       	and	r24, r24
     432:	61 f0       	breq	.+24     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	{USART_TxStringln("AT+SAPBR =1,1");
     434:	82 e8       	ldi	r24, 0x82	; 130
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
     43c:	8f e4       	ldi	r24, 0x4F	; 79
     43e:	93 ec       	ldi	r25, 0xC3	; 195
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     446:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     448:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	} 
	
	
	USART_ClearRX();
     44c:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	
	
	
	USART_TxStringln("AT+SAPBR=2,1");
     450:	8d e6       	ldi	r24, 0x6D	; 109
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",3000);
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	68 eb       	ldi	r22, 0xB8	; 184
     45c:	7b e0       	ldi	r23, 0x0B	; 11
     45e:	83 e1       	ldi	r24, 0x13	; 19
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     466:	8f e4       	ldi	r24, 0x4F	; 79
     468:	93 ec       	ldi	r25, 0xC3	; 195
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     470:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     472:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	
	USART_TxStringln("AT+HTTPINIT");
     476:	80 e9       	ldi	r24, 0x90	; 144
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
     47e:	8f e4       	ldi	r24, 0x4F	; 79
     480:	93 ec       	ldi	r25, 0xC3	; 195
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     486:	00 c0       	rjmp	.+0      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     488:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     48a:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	
	USART_TxStringln("AT+HTTPPARA=CID,1");
     48e:	8c e9       	ldi	r24, 0x9C	; 156
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000);
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	68 ee       	ldi	r22, 0xE8	; 232
     49a:	73 e0       	ldi	r23, 0x03	; 3
     49c:	83 e1       	ldi	r24, 0x13	; 19
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     4a4:	8f e4       	ldi	r24, 0x4F	; 79
     4a6:	93 ec       	ldi	r25, 0xC3	; 195
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     4ae:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     4b0:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	
	sprintf(reqvest,"AT+HTTPPARA=URL,%s",postserver);
     4b4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <postserver+0x1>
     4b8:	8f 93       	push	r24
     4ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <postserver>
     4be:	8f 93       	push	r24
     4c0:	8e ea       	ldi	r24, 0xAE	; 174
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	ce e9       	ldi	r28, 0x9E	; 158
     4ca:	d2 e0       	ldi	r29, 0x02	; 2
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	0e 94 cc 06 	call	0xd98	; 0xd98 <sprintf>
	USART_TxStringln(reqvest);
     4d4:	ce 01       	movw	r24, r28
     4d6:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000);
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	68 ee       	ldi	r22, 0xE8	; 232
     4de:	73 e0       	ldi	r23, 0x03	; 3
     4e0:	83 e1       	ldi	r24, 0x13	; 19
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     4e8:	8f e4       	ldi	r24, 0x4F	; 79
     4ea:	93 ec       	ldi	r25, 0xC3	; 195
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4f2:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     4f4:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	USART_TxStringln("AT+HTTPPARA=CONTENT,application/x-www-form-urlencoded");
     4f8:	81 ec       	ldi	r24, 0xC1	; 193
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000);
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	68 ee       	ldi	r22, 0xE8	; 232
     504:	73 e0       	ldi	r23, 0x03	; 3
     506:	83 e1       	ldi	r24, 0x13	; 19
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     50e:	8f e4       	ldi	r24, 0x4F	; 79
     510:	93 ec       	ldi	r25, 0xC3	; 195
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
     516:	00 c0       	rjmp	.+0      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     518:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     51a:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	
	sprintf(reqvest,"man=%d&gtb=%u&hb=%u&chks=%u",machineNum,getbottle,hasbottle,checks);
     51e:	1f 92       	push	r1
     520:	ff 92       	push	r15
     522:	1f 92       	push	r1
     524:	0f 93       	push	r16
     526:	1f 92       	push	r1
     528:	1f 93       	push	r17
     52a:	1f 92       	push	r1
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	8f 93       	push	r24
     530:	87 ef       	ldi	r24, 0xF7	; 247
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	df 93       	push	r29
     53a:	cf 93       	push	r28
     53c:	0e 94 cc 06 	call	0xd98	; 0xd98 <sprintf>
	
	sprintf(lengthcal,"AT+HTTPDATA=%d,10000",strlen(reqvest));
     540:	09 90       	ld	r0, Y+
     542:	00 20       	and	r0, r0
     544:	e9 f7       	brne	.-6      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
     546:	21 97       	sbiw	r28, 0x01	; 1
     548:	ce 59       	subi	r28, 0x9E	; 158
     54a:	d2 40       	sbci	r29, 0x02	; 2
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	83 e1       	ldi	r24, 0x13	; 19
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	86 e1       	ldi	r24, 0x16	; 22
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	0e 94 cc 06 	call	0xd98	; 0xd98 <sprintf>
	USART_TxStringln(lengthcal);
     564:	86 e1       	ldi	r24, 0x16	; 22
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000);
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	68 ee       	ldi	r22, 0xE8	; 232
     570:	73 e0       	ldi	r23, 0x03	; 3
     572:	83 e1       	ldi	r24, 0x13	; 19
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     57a:	8f e4       	ldi	r24, 0x4F	; 79
     57c:	93 ec       	ldi	r25, 0xC3	; 195
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
     582:	00 c0       	rjmp	.+0      	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
     584:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     586:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	USART_TxStringln(reqvest);
     58a:	8e e9       	ldi	r24, 0x9E	; 158
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",10000);
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	60 e1       	ldi	r22, 0x10	; 16
     596:	77 e2       	ldi	r23, 0x27	; 39
     598:	83 e1       	ldi	r24, 0x13	; 19
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     5a0:	8f e4       	ldi	r24, 0x4F	; 79
     5a2:	93 ec       	ldi	r25, 0xC3	; 195
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
     5aa:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     5ac:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	USART_TxStringln("AT+HTTPACTION=1");
     5b0:	88 e2       	ldi	r24, 0x28	; 40
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("+HTTPACTION:",10000);
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	60 e1       	ldi	r22, 0x10	; 16
     5bc:	77 e2       	ldi	r23, 0x27	; 39
     5be:	88 e3       	ldi	r24, 0x38	; 56
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     5c6:	8f e4       	ldi	r24, 0x4F	; 79
     5c8:	93 ec       	ldi	r25, 0xC3	; 195
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
     5d0:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     5d2:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	

	
	USART_TxStringln("AT+HTTPREAD");
     5d6:	85 e4       	ldi	r24, 0x45	; 69
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	if (USART_ReciveWait("ctdgnhn",5000))
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	68 e8       	ldi	r22, 0x88	; 136
     5e2:	73 e1       	ldi	r23, 0x13	; 19
     5e4:	81 e5       	ldi	r24, 0x51	; 81
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     5ec:	2d b7       	in	r18, 0x3d	; 61
     5ee:	3e b7       	in	r19, 0x3e	; 62
     5f0:	28 5e       	subi	r18, 0xE8	; 232
     5f2:	3f 4f       	sbci	r19, 0xFF	; 255
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	3e bf       	out	0x3e, r19	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	2d bf       	out	0x3d, r18	; 61
     5fe:	81 11       	cpse	r24, r1
     600:	02 c0       	rjmp	.+4      	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
	USART_ClearRX();
}

bool uploaddataPOST(bool getbottle,bool hasbottle,bool checks){
	
	bool returnValue=0;
     602:	c0 e0       	ldi	r28, 0x00	; 0
     604:	01 c0       	rjmp	.+2      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
	

	
	USART_TxStringln("AT+HTTPREAD");
	if (USART_ReciveWait("ctdgnhn",5000))
	{returnValue=1;
     606:	c1 e0       	ldi	r28, 0x01	; 1
     608:	8f e4       	ldi	r24, 0x4F	; 79
     60a:	93 ec       	ldi	r25, 0xC3	; 195
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
     610:	00 c0       	rjmp	.+0      	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
     612:	00 00       	nop
	} 
		
	_delay_ms(25);
	USART_ClearRX();
     614:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	USART_ReciveWait("OK",1000);
	_delay_ms(25);
	USART_ClearRX();*/
	return returnValue;
	
}
     618:	8c 2f       	mov	r24, r28
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	08 95       	ret

00000626 <_Z12readdataPOSTv>:

bool readdataPOST(){
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
	bool returnValue=0;
	
	USART_TxStringln("AT+SAPBR=2,1");
     62a:	8d e6       	ldi	r24, 0x6D	; 109
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",3000);
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	68 eb       	ldi	r22, 0xB8	; 184
     636:	7b e0       	ldi	r23, 0x0B	; 11
     638:	83 e1       	ldi	r24, 0x13	; 19
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     640:	8f e4       	ldi	r24, 0x4F	; 79
     642:	93 ec       	ldi	r25, 0xC3	; 195
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <_Z12readdataPOSTv+0x1e>
     648:	00 c0       	rjmp	.+0      	; 0x64a <_Z12readdataPOSTv+0x24>
     64a:	00 00       	nop
	_delay_ms(25);
	
	if (USART_ReciveWait("0.0.0.0",100))
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	64 e6       	ldi	r22, 0x64	; 100
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	8a e7       	ldi	r24, 0x7A	; 122
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     65a:	88 23       	and	r24, r24
     65c:	61 f0       	breq	.+24     	; 0x676 <_Z12readdataPOSTv+0x50>
	{USART_TxStringln("AT+SAPBR =1,1");
     65e:	82 e8       	ldi	r24, 0x82	; 130
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
     666:	af e4       	ldi	r26, 0x4F	; 79
     668:	b3 ec       	ldi	r27, 0xC3	; 195
     66a:	11 97       	sbiw	r26, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <_Z12readdataPOSTv+0x44>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <_Z12readdataPOSTv+0x4a>
     670:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     672:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	} 
	
	
	USART_ClearRX();
     676:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	
	
	
	USART_TxStringln("AT+SAPBR=2,1");
     67a:	8d e6       	ldi	r24, 0x6D	; 109
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",3000);
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	68 eb       	ldi	r22, 0xB8	; 184
     686:	7b e0       	ldi	r23, 0x0B	; 11
     688:	83 e1       	ldi	r24, 0x13	; 19
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     690:	ef e4       	ldi	r30, 0x4F	; 79
     692:	f3 ec       	ldi	r31, 0xC3	; 195
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <_Z12readdataPOSTv+0x6e>
     698:	00 c0       	rjmp	.+0      	; 0x69a <_Z12readdataPOSTv+0x74>
     69a:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     69c:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	
	USART_TxStringln("AT+HTTPINIT");
     6a0:	80 e9       	ldi	r24, 0x90	; 144
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
     6a8:	8f e4       	ldi	r24, 0x4F	; 79
     6aa:	93 ec       	ldi	r25, 0xC3	; 195
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <_Z12readdataPOSTv+0x86>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <_Z12readdataPOSTv+0x8c>
     6b2:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     6b4:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	
	USART_TxStringln("AT+HTTPPARA=CID,1");
     6b8:	8c e9       	ldi	r24, 0x9C	; 156
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000);
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	68 ee       	ldi	r22, 0xE8	; 232
     6c4:	73 e0       	ldi	r23, 0x03	; 3
     6c6:	83 e1       	ldi	r24, 0x13	; 19
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     6ce:	af e4       	ldi	r26, 0x4F	; 79
     6d0:	b3 ec       	ldi	r27, 0xC3	; 195
     6d2:	11 97       	sbiw	r26, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <_Z12readdataPOSTv+0xac>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <_Z12readdataPOSTv+0xb2>
     6d8:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     6da:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	
	sprintf(reqvest,"AT+HTTPPARA=URL,%s",postserver);
     6de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <postserver+0x1>
     6e2:	8f 93       	push	r24
     6e4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <postserver>
     6e8:	8f 93       	push	r24
     6ea:	8e ea       	ldi	r24, 0xAE	; 174
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	ce e9       	ldi	r28, 0x9E	; 158
     6f4:	d2 e0       	ldi	r29, 0x02	; 2
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	0e 94 cc 06 	call	0xd98	; 0xd98 <sprintf>
	USART_TxStringln(reqvest);
     6fe:	ce 01       	movw	r24, r28
     700:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000);
     704:	40 e0       	ldi	r20, 0x00	; 0
     706:	68 ee       	ldi	r22, 0xE8	; 232
     708:	73 e0       	ldi	r23, 0x03	; 3
     70a:	83 e1       	ldi	r24, 0x13	; 19
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     712:	8f e4       	ldi	r24, 0x4F	; 79
     714:	93 ec       	ldi	r25, 0xC3	; 195
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <_Z12readdataPOSTv+0xf0>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <_Z12readdataPOSTv+0xf6>
     71c:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     71e:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	USART_TxStringln("AT+HTTPPARA=CONTENT,application/x-www-form-urlencoded");
     722:	81 ec       	ldi	r24, 0xC1	; 193
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000);
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	68 ee       	ldi	r22, 0xE8	; 232
     72e:	73 e0       	ldi	r23, 0x03	; 3
     730:	83 e1       	ldi	r24, 0x13	; 19
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     738:	af e4       	ldi	r26, 0x4F	; 79
     73a:	b3 ec       	ldi	r27, 0xC3	; 195
     73c:	11 97       	sbiw	r26, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <_Z12readdataPOSTv+0x116>
     740:	00 c0       	rjmp	.+0      	; 0x742 <_Z12readdataPOSTv+0x11c>
     742:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     744:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	

	sprintf(reqvest,"rd=%d",machineNum);
     748:	1f 92       	push	r1
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	8f 93       	push	r24
     74e:	89 e5       	ldi	r24, 0x59	; 89
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	0e 94 cc 06 	call	0xd98	; 0xd98 <sprintf>
	
	sprintf(lengthcal,"AT+HTTPDATA=%d,10000",strlen(reqvest));
     75e:	09 90       	ld	r0, Y+
     760:	00 20       	and	r0, r0
     762:	e9 f7       	brne	.-6      	; 0x75e <_Z12readdataPOSTv+0x138>
     764:	21 97       	sbiw	r28, 0x01	; 1
     766:	ce 59       	subi	r28, 0x9E	; 158
     768:	d2 40       	sbci	r29, 0x02	; 2
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	83 e1       	ldi	r24, 0x13	; 19
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	c6 e1       	ldi	r28, 0x16	; 22
     778:	d3 e0       	ldi	r29, 0x03	; 3
     77a:	df 93       	push	r29
     77c:	cf 93       	push	r28
     77e:	0e 94 cc 06 	call	0xd98	; 0xd98 <sprintf>
	USART_TxStringln(lengthcal);
     782:	ce 01       	movw	r24, r28
     784:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",1000);
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	68 ee       	ldi	r22, 0xE8	; 232
     78c:	73 e0       	ldi	r23, 0x03	; 3
     78e:	83 e1       	ldi	r24, 0x13	; 19
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     796:	ef e4       	ldi	r30, 0x4F	; 79
     798:	f3 ec       	ldi	r31, 0xC3	; 195
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <_Z12readdataPOSTv+0x174>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <_Z12readdataPOSTv+0x17a>
     7a0:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     7a2:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	USART_TxStringln(reqvest);
     7a6:	8e e9       	ldi	r24, 0x9E	; 158
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",10000);
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	60 e1       	ldi	r22, 0x10	; 16
     7b2:	77 e2       	ldi	r23, 0x27	; 39
     7b4:	83 e1       	ldi	r24, 0x13	; 19
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     7bc:	8f e4       	ldi	r24, 0x4F	; 79
     7be:	93 ec       	ldi	r25, 0xC3	; 195
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <_Z12readdataPOSTv+0x19a>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <_Z12readdataPOSTv+0x1a0>
     7c6:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     7c8:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	USART_TxStringln("AT+HTTPACTION=1");
     7cc:	88 e2       	ldi	r24, 0x28	; 40
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("+HTTPACTION:",10000);
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	60 e1       	ldi	r22, 0x10	; 16
     7d8:	77 e2       	ldi	r23, 0x27	; 39
     7da:	88 e3       	ldi	r24, 0x38	; 56
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     7e2:	af e4       	ldi	r26, 0x4F	; 79
     7e4:	b3 ec       	ldi	r27, 0xC3	; 195
     7e6:	11 97       	sbiw	r26, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <_Z12readdataPOSTv+0x1c0>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <_Z12readdataPOSTv+0x1c6>
     7ec:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     7ee:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	
	memset(lengthcal,0,40);
     7f2:	88 e2       	ldi	r24, 0x28	; 40
     7f4:	fe 01       	movw	r30, r28
     7f6:	11 92       	st	Z+, r1
     7f8:	8a 95       	dec	r24
     7fa:	e9 f7       	brne	.-6      	; 0x7f6 <_Z12readdataPOSTv+0x1d0>
	
	USART_TxStringln("AT+HTTPREAD");
     7fc:	85 e4       	ldi	r24, 0x45	; 69
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z16USART_TxStringlnPc>
	if (USART_ReciveWait("ctd",5000))
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	68 e8       	ldi	r22, 0x88	; 136
     808:	73 e1       	ldi	r23, 0x13	; 19
     80a:	8f e5       	ldi	r24, 0x5F	; 95
     80c:	92 e0       	ldi	r25, 0x02	; 2
     80e:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z16USART_ReciveWaitPcib>
     812:	c8 2f       	mov	r28, r24
     814:	8d b7       	in	r24, 0x3d	; 61
     816:	9e b7       	in	r25, 0x3e	; 62
     818:	42 96       	adiw	r24, 0x12	; 18
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	9e bf       	out	0x3e, r25	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	8d bf       	out	0x3d, r24	; 61
     824:	cc 23       	and	r28, r28
     826:	09 f4       	brne	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     828:	42 c0       	rjmp	.+132    	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
	{
	strncpy(lengthcal,strstr(rxvalue,"ctdchs")+6,1);
     82a:	63 e6       	ldi	r22, 0x63	; 99
     82c:	72 e0       	ldi	r23, 0x02	; 2
     82e:	85 e5       	ldi	r24, 0x55	; 85
     830:	93 e0       	ldi	r25, 0x03	; 3
     832:	0e 94 aa 06 	call	0xd54	; 0xd54 <strstr>
     836:	bc 01       	movw	r22, r24
     838:	6a 5f       	subi	r22, 0xFA	; 250
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	86 e1       	ldi	r24, 0x16	; 22
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	0e 94 9b 06 	call	0xd36	; 0xd36 <strncpy>
	checkS=atoi(lengthcal);
     848:	86 e1       	ldi	r24, 0x16	; 22
     84a:	93 e0       	ldi	r25, 0x03	; 3
     84c:	0e 94 3c 06 	call	0xc78	; 0xc78 <atoi>
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	89 2b       	or	r24, r25
     854:	09 f4       	brne	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	20 93 9d 02 	sts	0x029D, r18	; 0x80029d <checkS>
	memset(lengthcal,0,40);
     85c:	88 e2       	ldi	r24, 0x28	; 40
     85e:	e6 e1       	ldi	r30, 0x16	; 22
     860:	f3 e0       	ldi	r31, 0x03	; 3
     862:	df 01       	movw	r26, r30
     864:	1d 92       	st	X+, r1
     866:	8a 95       	dec	r24
     868:	e9 f7       	brne	.-6      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
	strncpy(lengthcal,strstr(rxvalue,"ctdchs")+9,1);
     86a:	63 e6       	ldi	r22, 0x63	; 99
     86c:	72 e0       	ldi	r23, 0x02	; 2
     86e:	85 e5       	ldi	r24, 0x55	; 85
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	0e 94 aa 06 	call	0xd54	; 0xd54 <strstr>
     876:	bc 01       	movw	r22, r24
     878:	67 5f       	subi	r22, 0xF7	; 247
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	86 e1       	ldi	r24, 0x16	; 22
     882:	93 e0       	ldi	r25, 0x03	; 3
     884:	0e 94 9b 06 	call	0xd36	; 0xd36 <strncpy>
	getbottle=atoi(lengthcal);
     888:	86 e1       	ldi	r24, 0x16	; 22
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	0e 94 3c 06 	call	0xc78	; 0xc78 <atoi>
     890:	21 e0       	ldi	r18, 0x01	; 1
     892:	89 2b       	or	r24, r25
     894:	09 f4       	brne	.+2      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	20 93 9c 02 	sts	0x029C, r18	; 0x80029c <__data_end>
     89c:	ef e4       	ldi	r30, 0x4F	; 79
     89e:	f3 ec       	ldi	r31, 0xC3	; 195
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     8a6:	00 00       	nop
	_delay_ms(25);
	USART_ClearRX();
     8a8:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	/*
	USART_TxStringln("AT+HTTPTERM");
	USART_ReciveWait("OK",1000);
	_delay_ms(25);
	USART_ClearRX();*/
	return returnValue;	
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
	USART_ClearRX();
	returnValue =1;	
	} 
	
	else{
	USART_ClearRX();
     8ae:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z13USART_ClearRXv>
	_delay_ms(25);
	USART_ClearRX();*/
	return returnValue;	
	
	
}
     8b2:	8c 2f       	mov	r24, r28
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <_Z7stepperbhj>:

void stepper(bool dir,uint8_t channel, uint16_t degree){
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
	
	if (dir)
     8c6:	88 23       	and	r24, r24
     8c8:	21 f0       	breq	.+8      	; 0x8d2 <_Z7stepperbhj+0x18>
	{stepdirport|=(1<<stepdir);
     8ca:	85 b1       	in	r24, 0x05	; 5
     8cc:	84 60       	ori	r24, 0x04	; 4
     8ce:	85 b9       	out	0x05, r24	; 5
     8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <_Z7stepperbhj+0x1e>
	} 
	else
	{stepdirport&=~(1<<stepdir);
     8d2:	85 b1       	in	r24, 0x05	; 5
     8d4:	8b 7f       	andi	r24, 0xFB	; 251
     8d6:	85 b9       	out	0x05, r24	; 5
	}
	
	
	uint32_t limit=(200*(stepperdiv[channel]));
     8d8:	c6 2f       	mov	r28, r22
     8da:	d0 e0       	ldi	r29, 0x00	; 0
     8dc:	fe 01       	movw	r30, r28
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e0 50       	subi	r30, 0x00	; 0
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	68 ec       	ldi	r22, 0xC8	; 200
     8ec:	68 9f       	mul	r22, r24
     8ee:	90 01       	movw	r18, r0
     8f0:	69 9f       	mul	r22, r25
     8f2:	30 0d       	add	r19, r0
     8f4:	11 24       	eor	r1, r1
	limit=limit*degree;
     8f6:	da 01       	movw	r26, r20
     8f8:	0e 94 19 06 	call	0xc32	; 0xc32 <__umulhisi3>
	limit=limit/360;
     8fc:	28 e6       	ldi	r18, 0x68	; 104
     8fe:	31 e0       	ldi	r19, 0x01	; 1
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__udivmodsi4>
     908:	69 01       	movw	r12, r18
     90a:	7a 01       	movw	r14, r20
	
	for(uint32_t i=0;i<limit;i++){
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	ba 01       	movw	r22, r20
     912:	4c 15       	cp	r20, r12
     914:	5d 05       	cpc	r21, r13
     916:	6e 05       	cpc	r22, r14
     918:	7f 05       	cpc	r23, r15
     91a:	08 f5       	brcc	.+66     	; 0x95e <__stack+0x5f>
		stepperport|=(1<<channel);
     91c:	38 b1       	in	r19, 0x08	; 8
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0c 2e       	mov	r0, r28
     924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	0a 94       	dec	r0
     92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0x27>
     92e:	93 2f       	mov	r25, r19
     930:	98 2b       	or	r25, r24
     932:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     934:	e7 ec       	ldi	r30, 0xC7	; 199
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	31 97       	sbiw	r30, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <__stack+0x39>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0x3f>
     93e:	00 00       	nop
		_delay_us(100);
		stepperport&=~(1<<channel);
     940:	98 b1       	in	r25, 0x08	; 8
     942:	80 95       	com	r24
     944:	89 23       	and	r24, r25
     946:	88 b9       	out	0x08, r24	; 8
     948:	87 ec       	ldi	r24, 0xC7	; 199
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <__stack+0x4d>
     950:	00 c0       	rjmp	.+0      	; 0x952 <__stack+0x53>
     952:	00 00       	nop
	
	uint32_t limit=(200*(stepperdiv[channel]));
	limit=limit*degree;
	limit=limit/360;
	
	for(uint32_t i=0;i<limit;i++){
     954:	4f 5f       	subi	r20, 0xFF	; 255
     956:	5f 4f       	sbci	r21, 0xFF	; 255
     958:	6f 4f       	sbci	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	da cf       	rjmp	.-76     	; 0x912 <__stack+0x13>
		stepperport&=~(1<<channel);
		_delay_us(100);
	}
	
	
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	08 95       	ret

0000096c <main>:
#define solout 5
#define solin 6
#define spkr 7

int main(void)
{	
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
	DDRC=0b111111;//stepper
     974:	8f e3       	ldi	r24, 0x3F	; 63
     976:	87 b9       	out	0x07, r24	; 7
	stepdirddr|=(1<<stepdir);
     978:	84 b1       	in	r24, 0x04	; 4
     97a:	84 60       	ori	r24, 0x04	; 4
     97c:	84 b9       	out	0x04, r24	; 4
	solddr|=(1<<solout)|(1<<solin)|(1<<spkr);
     97e:	8a b1       	in	r24, 0x0a	; 10
     980:	80 6e       	ori	r24, 0xE0	; 224
     982:	8a b9       	out	0x0a, r24	; 10
	stepper(1,0,360);
     984:	48 e6       	ldi	r20, 0x68	; 104
     986:	51 e0       	ldi	r21, 0x01	; 1
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z7stepperbhj>
	
	
    setjmp (mainstart);
     990:	8e e3       	ldi	r24, 0x3E	; 62
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <setjmp>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     998:	2f ef       	ldi	r18, 0xFF	; 255
     99a:	84 e3       	ldi	r24, 0x34	; 52
     99c:	9c e0       	ldi	r25, 0x0C	; 12
     99e:	21 50       	subi	r18, 0x01	; 1
     9a0:	80 40       	sbci	r24, 0x00	; 0
     9a2:	90 40       	sbci	r25, 0x00	; 0
     9a4:	e1 f7       	brne	.-8      	; 0x99e <main+0x32>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <main+0x3c>
     9a8:	00 00       	nop
    _delay_ms(500);
    sei();
     9aa:	78 94       	sei
	mainFunctionInit();
     9ac:	0e 94 18 01 	call	0x230	; 0x230 <_Z16mainFunctionInitv>
	if (!checkGSM())
     9b0:	0e 94 22 01 	call	0x244	; 0x244 <_Z8checkGSMv>
     9b4:	81 11       	cpse	r24, r1
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <main+0x58>
	{longjmp(mainstart,1);
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	8e e3       	ldi	r24, 0x3E	; 62
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <longjmp>
	}
	setupGSM();
     9c4:	0e 94 8d 01 	call	0x31a	; 0x31a <_Z8setupGSMv>

	solport|=(1<<spkr);
     9c8:	8b b1       	in	r24, 0x0b	; 11
     9ca:	80 68       	ori	r24, 0x80	; 128
     9cc:	8b b9       	out	0x0b, r24	; 11
     9ce:	ef e7       	ldi	r30, 0x7F	; 127
     9d0:	f8 e3       	ldi	r31, 0x38	; 56
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	e1 50       	subi	r30, 0x01	; 1
     9d6:	f0 40       	sbci	r31, 0x00	; 0
     9d8:	20 40       	sbci	r18, 0x00	; 0
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <main+0x68>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <main+0x72>
     9de:	00 00       	nop
	_delay_ms(50);
	solport&=~(1<<spkr);
     9e0:	8b b1       	in	r24, 0x0b	; 11
     9e2:	8f 77       	andi	r24, 0x7F	; 127
     9e4:	8b b9       	out	0x0b, r24	; 11
     9e6:	8f e7       	ldi	r24, 0x7F	; 127
     9e8:	98 e3       	ldi	r25, 0x38	; 56
     9ea:	e1 e0       	ldi	r30, 0x01	; 1
     9ec:	81 50       	subi	r24, 0x01	; 1
     9ee:	90 40       	sbci	r25, 0x00	; 0
     9f0:	e0 40       	sbci	r30, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <main+0x80>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <main+0x8a>
     9f6:	00 00       	nop
	_delay_ms(50);
	solport|=(1<<spkr);
     9f8:	8b b1       	in	r24, 0x0b	; 11
     9fa:	80 68       	ori	r24, 0x80	; 128
     9fc:	8b b9       	out	0x0b, r24	; 11
     9fe:	ff e7       	ldi	r31, 0x7F	; 127
     a00:	28 e3       	ldi	r18, 0x38	; 56
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	f1 50       	subi	r31, 0x01	; 1
     a06:	20 40       	sbci	r18, 0x00	; 0
     a08:	80 40       	sbci	r24, 0x00	; 0
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <main+0x98>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <main+0xa2>
     a0e:	00 00       	nop
	_delay_ms(50);
	solport&=~(1<<spkr);
     a10:	8b b1       	in	r24, 0x0b	; 11
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	8b b9       	out	0x0b, r24	; 11
	
	
    while (1) 
    {
		
		if (!readdataPOST())
     a16:	0e 94 13 03 	call	0x626	; 0x626 <_Z12readdataPOSTv>
     a1a:	81 11       	cpse	r24, r1
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <main+0xbe>
		{longjmp(mainstart,1);
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	8e e3       	ldi	r24, 0x3E	; 62
     a24:	93 e0       	ldi	r25, 0x03	; 3
     a26:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <longjmp>
		}
		
		if (checkS)
     a2a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <checkS>
     a2e:	88 23       	and	r24, r24
     a30:	09 f4       	brne	.+2      	; 0xa34 <main+0xc8>
     a32:	77 c0       	rjmp	.+238    	; 0xb22 <main+0x1b6>
		{
			solport|=(1<<solin);
     a34:	8b b1       	in	r24, 0x0b	; 11
     a36:	80 64       	ori	r24, 0x40	; 64
     a38:	8b b9       	out	0x0b, r24	; 11
			uint32_t  cycounter=0;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	dc 01       	movw	r26, r24
			bool bottle=0;
			while(1){
				if (PINB&(1<<0))
     a40:	18 9b       	sbis	0x03, 0	; 3
     a42:	11 c0       	rjmp	.+34     	; 0xa66 <main+0xfa>
				{	solport|=(1<<spkr);
     a44:	8b b1       	in	r24, 0x0b	; 11
     a46:	80 68       	ori	r24, 0x80	; 128
     a48:	8b b9       	out	0x0b, r24	; 11
     a4a:	9f e7       	ldi	r25, 0x7F	; 127
     a4c:	e8 e3       	ldi	r30, 0x38	; 56
     a4e:	f1 e0       	ldi	r31, 0x01	; 1
     a50:	91 50       	subi	r25, 0x01	; 1
     a52:	e0 40       	sbci	r30, 0x00	; 0
     a54:	f0 40       	sbci	r31, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <main+0xe4>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <main+0xee>
     a5a:	00 00       	nop
					_delay_ms(50);
					solport&=~(1<<spkr);
     a5c:	8b b1       	in	r24, 0x0b	; 11
     a5e:	8f 77       	andi	r24, 0x7F	; 127
     a60:	8b b9       	out	0x0b, r24	; 11
					bottle=1;
     a62:	81 e0       	ldi	r24, 0x01	; 1
					break;
     a64:	11 c0       	rjmp	.+34     	; 0xa88 <main+0x11c>
				}
				
				
				cycounter++;
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	a1 1d       	adc	r26, r1
     a6a:	b1 1d       	adc	r27, r1
				if (cycounter>2000)
     a6c:	81 3d       	cpi	r24, 0xD1	; 209
     a6e:	27 e0       	ldi	r18, 0x07	; 7
     a70:	92 07       	cpc	r25, r18
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	38 f4       	brcc	.+14     	; 0xa86 <main+0x11a>
     a78:	ef e1       	ldi	r30, 0x1F	; 31
     a7a:	fe e4       	ldi	r31, 0x4E	; 78
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <main+0x110>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <main+0x116>
     a82:	00 00       	nop
     a84:	dd cf       	rjmp	.-70     	; 0xa40 <main+0xd4>
		
		if (checkS)
		{
			solport|=(1<<solin);
			uint32_t  cycounter=0;
			bool bottle=0;
     a86:	80 e0       	ldi	r24, 0x00	; 0
				{break;
				}
				_delay_ms(10);
			}
			
			if (bottle)
     a88:	88 23       	and	r24, r24
     a8a:	f1 f1       	breq	.+124    	; 0xb08 <main+0x19c>
			{uploaddataPOST(0,1,0);//has bottle 1
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z14uploaddataPOSTbbb>
			solport|=(1<<spkr);
     a96:	8b b1       	in	r24, 0x0b	; 11
     a98:	80 68       	ori	r24, 0x80	; 128
     a9a:	8b b9       	out	0x0b, r24	; 11
     a9c:	ff e7       	ldi	r31, 0x7F	; 127
     a9e:	28 e3       	ldi	r18, 0x38	; 56
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	f1 50       	subi	r31, 0x01	; 1
     aa4:	20 40       	sbci	r18, 0x00	; 0
     aa6:	80 40       	sbci	r24, 0x00	; 0
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <main+0x136>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <main+0x140>
     aac:	00 00       	nop
			_delay_ms(50);
			solport&=~(1<<spkr);
     aae:	8b b1       	in	r24, 0x0b	; 11
     ab0:	8f 77       	andi	r24, 0x7F	; 127
     ab2:	8b b9       	out	0x0b, r24	; 11
     ab4:	9f e7       	ldi	r25, 0x7F	; 127
     ab6:	e8 e3       	ldi	r30, 0x38	; 56
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	91 50       	subi	r25, 0x01	; 1
     abc:	e0 40       	sbci	r30, 0x00	; 0
     abe:	f0 40       	sbci	r31, 0x00	; 0
     ac0:	e1 f7       	brne	.-8      	; 0xaba <main+0x14e>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <main+0x158>
     ac4:	00 00       	nop
			_delay_ms(50);
			solport|=(1<<spkr);
     ac6:	8b b1       	in	r24, 0x0b	; 11
     ac8:	80 68       	ori	r24, 0x80	; 128
     aca:	8b b9       	out	0x0b, r24	; 11
     acc:	2f e7       	ldi	r18, 0x7F	; 127
     ace:	88 e3       	ldi	r24, 0x38	; 56
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	21 50       	subi	r18, 0x01	; 1
     ad4:	80 40       	sbci	r24, 0x00	; 0
     ad6:	90 40       	sbci	r25, 0x00	; 0
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <main+0x166>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <main+0x170>
     adc:	00 00       	nop
			_delay_ms(50);
			solport&=~(1<<spkr);
     ade:	8b b1       	in	r24, 0x0b	; 11
     ae0:	8f 77       	andi	r24, 0x7F	; 127
     ae2:	8b b9       	out	0x0b, r24	; 11
     ae4:	ef ef       	ldi	r30, 0xFF	; 255
     ae6:	f3 e2       	ldi	r31, 0x23	; 35
     ae8:	24 ef       	ldi	r18, 0xF4	; 244
     aea:	e1 50       	subi	r30, 0x01	; 1
     aec:	f0 40       	sbci	r31, 0x00	; 0
     aee:	20 40       	sbci	r18, 0x00	; 0
     af0:	e1 f7       	brne	.-8      	; 0xaea <main+0x17e>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <main+0x188>
     af4:	00 00       	nop
			_delay_ms(10000);//button tome
			uploaddataPOST(0,0,0);//has bottle 1
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z14uploaddataPOSTbbb>
			solport&=~(1<<solin);	
     b00:	8b b1       	in	r24, 0x0b	; 11
     b02:	8f 7b       	andi	r24, 0xBF	; 191
     b04:	8b b9       	out	0x0b, r24	; 11
     b06:	08 c0       	rjmp	.+16     	; 0xb18 <main+0x1ac>
			}
			
			else{
			uploaddataPOST(0,0,0);//has bottle 0	
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z14uploaddataPOSTbbb>
			solport&=~(1<<solin);
     b12:	8b b1       	in	r24, 0x0b	; 11
     b14:	8f 7b       	andi	r24, 0xBF	; 191
     b16:	8b b9       	out	0x0b, r24	; 11
			}
			
			
			solport&=~(1<<solin);
     b18:	8b b1       	in	r24, 0x0b	; 11
     b1a:	8f 7b       	andi	r24, 0xBF	; 191
     b1c:	8b b9       	out	0x0b, r24	; 11
			
			checkS=0;
     b1e:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <checkS>
		}//end checks
		
		
		if (getbottle)
     b22:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end>
     b26:	88 23       	and	r24, r24
     b28:	29 f1       	breq	.+74     	; 0xb74 <main+0x208>
		{	solport|=(1<<spkr);
     b2a:	8b b1       	in	r24, 0x0b	; 11
     b2c:	80 68       	ori	r24, 0x80	; 128
     b2e:	8b b9       	out	0x0b, r24	; 11
     b30:	8f e7       	ldi	r24, 0x7F	; 127
     b32:	98 e3       	ldi	r25, 0x38	; 56
     b34:	e1 e0       	ldi	r30, 0x01	; 1
     b36:	81 50       	subi	r24, 0x01	; 1
     b38:	90 40       	sbci	r25, 0x00	; 0
     b3a:	e0 40       	sbci	r30, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <main+0x1ca>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <main+0x1d4>
     b40:	00 00       	nop
			_delay_ms(50);
			solport&=~(1<<spkr);
     b42:	8b b1       	in	r24, 0x0b	; 11
     b44:	8f 77       	andi	r24, 0x7F	; 127
     b46:	8b b9       	out	0x0b, r24	; 11
			solport|=(1<<solout);
     b48:	8b b1       	in	r24, 0x0b	; 11
     b4a:	80 62       	ori	r24, 0x20	; 32
     b4c:	8b b9       	out	0x0b, r24	; 11
     b4e:	ff ef       	ldi	r31, 0xFF	; 255
     b50:	23 ed       	ldi	r18, 0xD3	; 211
     b52:	80 e3       	ldi	r24, 0x30	; 48
     b54:	f1 50       	subi	r31, 0x01	; 1
     b56:	20 40       	sbci	r18, 0x00	; 0
     b58:	80 40       	sbci	r24, 0x00	; 0
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <main+0x1e8>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <main+0x1f2>
     b5e:	00 00       	nop
			_delay_ms(2000);
			solport&=~(1<<solout);
     b60:	8b b1       	in	r24, 0x0b	; 11
     b62:	8f 7d       	andi	r24, 0xDF	; 223
     b64:	8b b9       	out	0x0b, r24	; 11
			uploaddataPOST(0,0,0);//get bottle 0
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z14uploaddataPOSTbbb>
			getbottle=0;
     b70:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <__data_end>
     b74:	9f ef       	ldi	r25, 0xFF	; 255
     b76:	e1 ee       	ldi	r30, 0xE1	; 225
     b78:	f4 e0       	ldi	r31, 0x04	; 4
     b7a:	91 50       	subi	r25, 0x01	; 1
     b7c:	e0 40       	sbci	r30, 0x00	; 0
     b7e:	f0 40       	sbci	r31, 0x00	; 0
     b80:	e1 f7       	brne	.-8      	; 0xb7a <main+0x20e>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <main+0x218>
     b84:	00 00       	nop
     b86:	47 cf       	rjmp	.-370    	; 0xa16 <main+0xaa>

00000b88 <__divmodhi4>:
     b88:	97 fb       	bst	r25, 7
     b8a:	07 2e       	mov	r0, r23
     b8c:	16 f4       	brtc	.+4      	; 0xb92 <__divmodhi4+0xa>
     b8e:	00 94       	com	r0
     b90:	07 d0       	rcall	.+14     	; 0xba0 <__divmodhi4_neg1>
     b92:	77 fd       	sbrc	r23, 7
     b94:	09 d0       	rcall	.+18     	; 0xba8 <__divmodhi4_neg2>
     b96:	0e 94 28 06 	call	0xc50	; 0xc50 <__udivmodhi4>
     b9a:	07 fc       	sbrc	r0, 7
     b9c:	05 d0       	rcall	.+10     	; 0xba8 <__divmodhi4_neg2>
     b9e:	3e f4       	brtc	.+14     	; 0xbae <__divmodhi4_exit>

00000ba0 <__divmodhi4_neg1>:
     ba0:	90 95       	com	r25
     ba2:	81 95       	neg	r24
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	08 95       	ret

00000ba8 <__divmodhi4_neg2>:
     ba8:	70 95       	com	r23
     baa:	61 95       	neg	r22
     bac:	7f 4f       	sbci	r23, 0xFF	; 255

00000bae <__divmodhi4_exit>:
     bae:	08 95       	ret

00000bb0 <__udivmodsi4>:
     bb0:	a1 e2       	ldi	r26, 0x21	; 33
     bb2:	1a 2e       	mov	r1, r26
     bb4:	aa 1b       	sub	r26, r26
     bb6:	bb 1b       	sub	r27, r27
     bb8:	fd 01       	movw	r30, r26
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__udivmodsi4_ep>

00000bbc <__udivmodsi4_loop>:
     bbc:	aa 1f       	adc	r26, r26
     bbe:	bb 1f       	adc	r27, r27
     bc0:	ee 1f       	adc	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	a2 17       	cp	r26, r18
     bc6:	b3 07       	cpc	r27, r19
     bc8:	e4 07       	cpc	r30, r20
     bca:	f5 07       	cpc	r31, r21
     bcc:	20 f0       	brcs	.+8      	; 0xbd6 <__udivmodsi4_ep>
     bce:	a2 1b       	sub	r26, r18
     bd0:	b3 0b       	sbc	r27, r19
     bd2:	e4 0b       	sbc	r30, r20
     bd4:	f5 0b       	sbc	r31, r21

00000bd6 <__udivmodsi4_ep>:
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	88 1f       	adc	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	1a 94       	dec	r1
     be0:	69 f7       	brne	.-38     	; 0xbbc <__udivmodsi4_loop>
     be2:	60 95       	com	r22
     be4:	70 95       	com	r23
     be6:	80 95       	com	r24
     be8:	90 95       	com	r25
     bea:	9b 01       	movw	r18, r22
     bec:	ac 01       	movw	r20, r24
     bee:	bd 01       	movw	r22, r26
     bf0:	cf 01       	movw	r24, r30
     bf2:	08 95       	ret

00000bf4 <__divmodsi4>:
     bf4:	05 2e       	mov	r0, r21
     bf6:	97 fb       	bst	r25, 7
     bf8:	1e f4       	brtc	.+6      	; 0xc00 <__divmodsi4+0xc>
     bfa:	00 94       	com	r0
     bfc:	0e 94 11 06 	call	0xc22	; 0xc22 <__negsi2>
     c00:	57 fd       	sbrc	r21, 7
     c02:	07 d0       	rcall	.+14     	; 0xc12 <__divmodsi4_neg2>
     c04:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__udivmodsi4>
     c08:	07 fc       	sbrc	r0, 7
     c0a:	03 d0       	rcall	.+6      	; 0xc12 <__divmodsi4_neg2>
     c0c:	4e f4       	brtc	.+18     	; 0xc20 <__divmodsi4_exit>
     c0e:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__negsi2>

00000c12 <__divmodsi4_neg2>:
     c12:	50 95       	com	r21
     c14:	40 95       	com	r20
     c16:	30 95       	com	r19
     c18:	21 95       	neg	r18
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	4f 4f       	sbci	r20, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255

00000c20 <__divmodsi4_exit>:
     c20:	08 95       	ret

00000c22 <__negsi2>:
     c22:	90 95       	com	r25
     c24:	80 95       	com	r24
     c26:	70 95       	com	r23
     c28:	61 95       	neg	r22
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	8f 4f       	sbci	r24, 0xFF	; 255
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	08 95       	ret

00000c32 <__umulhisi3>:
     c32:	a2 9f       	mul	r26, r18
     c34:	b0 01       	movw	r22, r0
     c36:	b3 9f       	mul	r27, r19
     c38:	c0 01       	movw	r24, r0
     c3a:	a3 9f       	mul	r26, r19
     c3c:	70 0d       	add	r23, r0
     c3e:	81 1d       	adc	r24, r1
     c40:	11 24       	eor	r1, r1
     c42:	91 1d       	adc	r25, r1
     c44:	b2 9f       	mul	r27, r18
     c46:	70 0d       	add	r23, r0
     c48:	81 1d       	adc	r24, r1
     c4a:	11 24       	eor	r1, r1
     c4c:	91 1d       	adc	r25, r1
     c4e:	08 95       	ret

00000c50 <__udivmodhi4>:
     c50:	aa 1b       	sub	r26, r26
     c52:	bb 1b       	sub	r27, r27
     c54:	51 e1       	ldi	r21, 0x11	; 17
     c56:	07 c0       	rjmp	.+14     	; 0xc66 <__udivmodhi4_ep>

00000c58 <__udivmodhi4_loop>:
     c58:	aa 1f       	adc	r26, r26
     c5a:	bb 1f       	adc	r27, r27
     c5c:	a6 17       	cp	r26, r22
     c5e:	b7 07       	cpc	r27, r23
     c60:	10 f0       	brcs	.+4      	; 0xc66 <__udivmodhi4_ep>
     c62:	a6 1b       	sub	r26, r22
     c64:	b7 0b       	sbc	r27, r23

00000c66 <__udivmodhi4_ep>:
     c66:	88 1f       	adc	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	5a 95       	dec	r21
     c6c:	a9 f7       	brne	.-22     	; 0xc58 <__udivmodhi4_loop>
     c6e:	80 95       	com	r24
     c70:	90 95       	com	r25
     c72:	bc 01       	movw	r22, r24
     c74:	cd 01       	movw	r24, r26
     c76:	08 95       	ret

00000c78 <atoi>:
     c78:	fc 01       	movw	r30, r24
     c7a:	88 27       	eor	r24, r24
     c7c:	99 27       	eor	r25, r25
     c7e:	e8 94       	clt
     c80:	21 91       	ld	r18, Z+
     c82:	20 32       	cpi	r18, 0x20	; 32
     c84:	e9 f3       	breq	.-6      	; 0xc80 <atoi+0x8>
     c86:	29 30       	cpi	r18, 0x09	; 9
     c88:	10 f0       	brcs	.+4      	; 0xc8e <atoi+0x16>
     c8a:	2e 30       	cpi	r18, 0x0E	; 14
     c8c:	c8 f3       	brcs	.-14     	; 0xc80 <atoi+0x8>
     c8e:	2b 32       	cpi	r18, 0x2B	; 43
     c90:	41 f0       	breq	.+16     	; 0xca2 <atoi+0x2a>
     c92:	2d 32       	cpi	r18, 0x2D	; 45
     c94:	39 f4       	brne	.+14     	; 0xca4 <atoi+0x2c>
     c96:	68 94       	set
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <atoi+0x2a>
     c9a:	0e 94 c4 06 	call	0xd88	; 0xd88 <__mulhi_const_10>
     c9e:	82 0f       	add	r24, r18
     ca0:	91 1d       	adc	r25, r1
     ca2:	21 91       	ld	r18, Z+
     ca4:	20 53       	subi	r18, 0x30	; 48
     ca6:	2a 30       	cpi	r18, 0x0A	; 10
     ca8:	c0 f3       	brcs	.-16     	; 0xc9a <atoi+0x22>
     caa:	1e f4       	brtc	.+6      	; 0xcb2 <atoi+0x3a>
     cac:	90 95       	com	r25
     cae:	81 95       	neg	r24
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	08 95       	ret

00000cb4 <setjmp>:
     cb4:	dc 01       	movw	r26, r24
     cb6:	2d 92       	st	X+, r2
     cb8:	3d 92       	st	X+, r3
     cba:	4d 92       	st	X+, r4
     cbc:	5d 92       	st	X+, r5
     cbe:	6d 92       	st	X+, r6
     cc0:	7d 92       	st	X+, r7
     cc2:	8d 92       	st	X+, r8
     cc4:	9d 92       	st	X+, r9
     cc6:	ad 92       	st	X+, r10
     cc8:	bd 92       	st	X+, r11
     cca:	cd 92       	st	X+, r12
     ccc:	dd 92       	st	X+, r13
     cce:	ed 92       	st	X+, r14
     cd0:	fd 92       	st	X+, r15
     cd2:	0d 93       	st	X+, r16
     cd4:	1d 93       	st	X+, r17
     cd6:	cd 93       	st	X+, r28
     cd8:	dd 93       	st	X+, r29
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	8d b7       	in	r24, 0x3d	; 61
     ce0:	8d 93       	st	X+, r24
     ce2:	8e b7       	in	r24, 0x3e	; 62
     ce4:	8d 93       	st	X+, r24
     ce6:	8f b7       	in	r24, 0x3f	; 63
     ce8:	8d 93       	st	X+, r24
     cea:	ed 93       	st	X+, r30
     cec:	fd 93       	st	X+, r31
     cee:	88 27       	eor	r24, r24
     cf0:	99 27       	eor	r25, r25
     cf2:	09 94       	ijmp

00000cf4 <longjmp>:
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	91 05       	cpc	r25, r1
     cfc:	81 1d       	adc	r24, r1
     cfe:	2d 90       	ld	r2, X+
     d00:	3d 90       	ld	r3, X+
     d02:	4d 90       	ld	r4, X+
     d04:	5d 90       	ld	r5, X+
     d06:	6d 90       	ld	r6, X+
     d08:	7d 90       	ld	r7, X+
     d0a:	8d 90       	ld	r8, X+
     d0c:	9d 90       	ld	r9, X+
     d0e:	ad 90       	ld	r10, X+
     d10:	bd 90       	ld	r11, X+
     d12:	cd 90       	ld	r12, X+
     d14:	dd 90       	ld	r13, X+
     d16:	ed 90       	ld	r14, X+
     d18:	fd 90       	ld	r15, X+
     d1a:	0d 91       	ld	r16, X+
     d1c:	1d 91       	ld	r17, X+
     d1e:	cd 91       	ld	r28, X+
     d20:	dd 91       	ld	r29, X+
     d22:	ed 91       	ld	r30, X+
     d24:	fd 91       	ld	r31, X+
     d26:	0d 90       	ld	r0, X+
     d28:	f8 94       	cli
     d2a:	fe bf       	out	0x3e, r31	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	ed bf       	out	0x3d, r30	; 61
     d30:	ed 91       	ld	r30, X+
     d32:	fd 91       	ld	r31, X+
     d34:	09 94       	ijmp

00000d36 <strncpy>:
     d36:	fb 01       	movw	r30, r22
     d38:	dc 01       	movw	r26, r24
     d3a:	41 50       	subi	r20, 0x01	; 1
     d3c:	50 40       	sbci	r21, 0x00	; 0
     d3e:	48 f0       	brcs	.+18     	; 0xd52 <strncpy+0x1c>
     d40:	01 90       	ld	r0, Z+
     d42:	0d 92       	st	X+, r0
     d44:	00 20       	and	r0, r0
     d46:	c9 f7       	brne	.-14     	; 0xd3a <strncpy+0x4>
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <strncpy+0x16>
     d4a:	1d 92       	st	X+, r1
     d4c:	41 50       	subi	r20, 0x01	; 1
     d4e:	50 40       	sbci	r21, 0x00	; 0
     d50:	e0 f7       	brcc	.-8      	; 0xd4a <strncpy+0x14>
     d52:	08 95       	ret

00000d54 <strstr>:
     d54:	fb 01       	movw	r30, r22
     d56:	51 91       	ld	r21, Z+
     d58:	55 23       	and	r21, r21
     d5a:	a9 f0       	breq	.+42     	; 0xd86 <strstr+0x32>
     d5c:	bf 01       	movw	r22, r30
     d5e:	dc 01       	movw	r26, r24
     d60:	4d 91       	ld	r20, X+
     d62:	45 17       	cp	r20, r21
     d64:	41 11       	cpse	r20, r1
     d66:	e1 f7       	brne	.-8      	; 0xd60 <strstr+0xc>
     d68:	59 f4       	brne	.+22     	; 0xd80 <strstr+0x2c>
     d6a:	cd 01       	movw	r24, r26
     d6c:	01 90       	ld	r0, Z+
     d6e:	00 20       	and	r0, r0
     d70:	49 f0       	breq	.+18     	; 0xd84 <strstr+0x30>
     d72:	4d 91       	ld	r20, X+
     d74:	40 15       	cp	r20, r0
     d76:	41 11       	cpse	r20, r1
     d78:	c9 f3       	breq	.-14     	; 0xd6c <strstr+0x18>
     d7a:	fb 01       	movw	r30, r22
     d7c:	41 11       	cpse	r20, r1
     d7e:	ef cf       	rjmp	.-34     	; 0xd5e <strstr+0xa>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	08 95       	ret

00000d88 <__mulhi_const_10>:
     d88:	7a e0       	ldi	r23, 0x0A	; 10
     d8a:	97 9f       	mul	r25, r23
     d8c:	90 2d       	mov	r25, r0
     d8e:	87 9f       	mul	r24, r23
     d90:	80 2d       	mov	r24, r0
     d92:	91 0d       	add	r25, r1
     d94:	11 24       	eor	r1, r1
     d96:	08 95       	ret

00000d98 <sprintf>:
     d98:	ae e0       	ldi	r26, 0x0E	; 14
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e2 ed       	ldi	r30, 0xD2	; 210
     d9e:	f6 e0       	ldi	r31, 0x06	; 6
     da0:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__prologue_saves__+0x1c>
     da4:	0d 89       	ldd	r16, Y+21	; 0x15
     da6:	1e 89       	ldd	r17, Y+22	; 0x16
     da8:	86 e0       	ldi	r24, 0x06	; 6
     daa:	8c 83       	std	Y+4, r24	; 0x04
     dac:	1a 83       	std	Y+2, r17	; 0x02
     dae:	09 83       	std	Y+1, r16	; 0x01
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	9f e7       	ldi	r25, 0x7F	; 127
     db4:	9e 83       	std	Y+6, r25	; 0x06
     db6:	8d 83       	std	Y+5, r24	; 0x05
     db8:	ae 01       	movw	r20, r28
     dba:	47 5e       	subi	r20, 0xE7	; 231
     dbc:	5f 4f       	sbci	r21, 0xFF	; 255
     dbe:	6f 89       	ldd	r22, Y+23	; 0x17
     dc0:	78 8d       	ldd	r23, Y+24	; 0x18
     dc2:	ce 01       	movw	r24, r28
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	0e 94 ee 06 	call	0xddc	; 0xddc <vfprintf>
     dca:	ef 81       	ldd	r30, Y+7	; 0x07
     dcc:	f8 85       	ldd	r31, Y+8	; 0x08
     dce:	e0 0f       	add	r30, r16
     dd0:	f1 1f       	adc	r31, r17
     dd2:	10 82       	st	Z, r1
     dd4:	2e 96       	adiw	r28, 0x0e	; 14
     dd6:	e4 e0       	ldi	r30, 0x04	; 4
     dd8:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__epilogue_restores__+0x1c>

00000ddc <vfprintf>:
     ddc:	ab e0       	ldi	r26, 0x0B	; 11
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e4 ef       	ldi	r30, 0xF4	; 244
     de2:	f6 e0       	ldi	r31, 0x06	; 6
     de4:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__prologue_saves__>
     de8:	6c 01       	movw	r12, r24
     dea:	7b 01       	movw	r14, r22
     dec:	8a 01       	movw	r16, r20
     dee:	fc 01       	movw	r30, r24
     df0:	17 82       	std	Z+7, r1	; 0x07
     df2:	16 82       	std	Z+6, r1	; 0x06
     df4:	83 81       	ldd	r24, Z+3	; 0x03
     df6:	81 ff       	sbrs	r24, 1
     df8:	cc c1       	rjmp	.+920    	; 0x1192 <vfprintf+0x3b6>
     dfa:	ce 01       	movw	r24, r28
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	3c 01       	movw	r6, r24
     e00:	f6 01       	movw	r30, r12
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	f7 01       	movw	r30, r14
     e06:	93 fd       	sbrc	r25, 3
     e08:	85 91       	lpm	r24, Z+
     e0a:	93 ff       	sbrs	r25, 3
     e0c:	81 91       	ld	r24, Z+
     e0e:	7f 01       	movw	r14, r30
     e10:	88 23       	and	r24, r24
     e12:	09 f4       	brne	.+2      	; 0xe16 <vfprintf+0x3a>
     e14:	ba c1       	rjmp	.+884    	; 0x118a <vfprintf+0x3ae>
     e16:	85 32       	cpi	r24, 0x25	; 37
     e18:	39 f4       	brne	.+14     	; 0xe28 <vfprintf+0x4c>
     e1a:	93 fd       	sbrc	r25, 3
     e1c:	85 91       	lpm	r24, Z+
     e1e:	93 ff       	sbrs	r25, 3
     e20:	81 91       	ld	r24, Z+
     e22:	7f 01       	movw	r14, r30
     e24:	85 32       	cpi	r24, 0x25	; 37
     e26:	29 f4       	brne	.+10     	; 0xe32 <vfprintf+0x56>
     e28:	b6 01       	movw	r22, r12
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fputc>
     e30:	e7 cf       	rjmp	.-50     	; 0xe00 <vfprintf+0x24>
     e32:	91 2c       	mov	r9, r1
     e34:	21 2c       	mov	r2, r1
     e36:	31 2c       	mov	r3, r1
     e38:	ff e1       	ldi	r31, 0x1F	; 31
     e3a:	f3 15       	cp	r31, r3
     e3c:	d8 f0       	brcs	.+54     	; 0xe74 <vfprintf+0x98>
     e3e:	8b 32       	cpi	r24, 0x2B	; 43
     e40:	79 f0       	breq	.+30     	; 0xe60 <vfprintf+0x84>
     e42:	38 f4       	brcc	.+14     	; 0xe52 <vfprintf+0x76>
     e44:	80 32       	cpi	r24, 0x20	; 32
     e46:	79 f0       	breq	.+30     	; 0xe66 <vfprintf+0x8a>
     e48:	83 32       	cpi	r24, 0x23	; 35
     e4a:	a1 f4       	brne	.+40     	; 0xe74 <vfprintf+0x98>
     e4c:	23 2d       	mov	r18, r3
     e4e:	20 61       	ori	r18, 0x10	; 16
     e50:	1d c0       	rjmp	.+58     	; 0xe8c <vfprintf+0xb0>
     e52:	8d 32       	cpi	r24, 0x2D	; 45
     e54:	61 f0       	breq	.+24     	; 0xe6e <vfprintf+0x92>
     e56:	80 33       	cpi	r24, 0x30	; 48
     e58:	69 f4       	brne	.+26     	; 0xe74 <vfprintf+0x98>
     e5a:	23 2d       	mov	r18, r3
     e5c:	21 60       	ori	r18, 0x01	; 1
     e5e:	16 c0       	rjmp	.+44     	; 0xe8c <vfprintf+0xb0>
     e60:	83 2d       	mov	r24, r3
     e62:	82 60       	ori	r24, 0x02	; 2
     e64:	38 2e       	mov	r3, r24
     e66:	e3 2d       	mov	r30, r3
     e68:	e4 60       	ori	r30, 0x04	; 4
     e6a:	3e 2e       	mov	r3, r30
     e6c:	2a c0       	rjmp	.+84     	; 0xec2 <vfprintf+0xe6>
     e6e:	f3 2d       	mov	r31, r3
     e70:	f8 60       	ori	r31, 0x08	; 8
     e72:	1d c0       	rjmp	.+58     	; 0xeae <vfprintf+0xd2>
     e74:	37 fc       	sbrc	r3, 7
     e76:	2d c0       	rjmp	.+90     	; 0xed2 <vfprintf+0xf6>
     e78:	20 ed       	ldi	r18, 0xD0	; 208
     e7a:	28 0f       	add	r18, r24
     e7c:	2a 30       	cpi	r18, 0x0A	; 10
     e7e:	40 f0       	brcs	.+16     	; 0xe90 <vfprintf+0xb4>
     e80:	8e 32       	cpi	r24, 0x2E	; 46
     e82:	b9 f4       	brne	.+46     	; 0xeb2 <vfprintf+0xd6>
     e84:	36 fc       	sbrc	r3, 6
     e86:	81 c1       	rjmp	.+770    	; 0x118a <vfprintf+0x3ae>
     e88:	23 2d       	mov	r18, r3
     e8a:	20 64       	ori	r18, 0x40	; 64
     e8c:	32 2e       	mov	r3, r18
     e8e:	19 c0       	rjmp	.+50     	; 0xec2 <vfprintf+0xe6>
     e90:	36 fe       	sbrs	r3, 6
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <vfprintf+0xc4>
     e94:	8a e0       	ldi	r24, 0x0A	; 10
     e96:	98 9e       	mul	r9, r24
     e98:	20 0d       	add	r18, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	92 2e       	mov	r9, r18
     e9e:	11 c0       	rjmp	.+34     	; 0xec2 <vfprintf+0xe6>
     ea0:	ea e0       	ldi	r30, 0x0A	; 10
     ea2:	2e 9e       	mul	r2, r30
     ea4:	20 0d       	add	r18, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	22 2e       	mov	r2, r18
     eaa:	f3 2d       	mov	r31, r3
     eac:	f0 62       	ori	r31, 0x20	; 32
     eae:	3f 2e       	mov	r3, r31
     eb0:	08 c0       	rjmp	.+16     	; 0xec2 <vfprintf+0xe6>
     eb2:	8c 36       	cpi	r24, 0x6C	; 108
     eb4:	21 f4       	brne	.+8      	; 0xebe <vfprintf+0xe2>
     eb6:	83 2d       	mov	r24, r3
     eb8:	80 68       	ori	r24, 0x80	; 128
     eba:	38 2e       	mov	r3, r24
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <vfprintf+0xe6>
     ebe:	88 36       	cpi	r24, 0x68	; 104
     ec0:	41 f4       	brne	.+16     	; 0xed2 <vfprintf+0xf6>
     ec2:	f7 01       	movw	r30, r14
     ec4:	93 fd       	sbrc	r25, 3
     ec6:	85 91       	lpm	r24, Z+
     ec8:	93 ff       	sbrs	r25, 3
     eca:	81 91       	ld	r24, Z+
     ecc:	7f 01       	movw	r14, r30
     ece:	81 11       	cpse	r24, r1
     ed0:	b3 cf       	rjmp	.-154    	; 0xe38 <vfprintf+0x5c>
     ed2:	98 2f       	mov	r25, r24
     ed4:	9f 7d       	andi	r25, 0xDF	; 223
     ed6:	95 54       	subi	r25, 0x45	; 69
     ed8:	93 30       	cpi	r25, 0x03	; 3
     eda:	28 f4       	brcc	.+10     	; 0xee6 <vfprintf+0x10a>
     edc:	0c 5f       	subi	r16, 0xFC	; 252
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	9f e3       	ldi	r25, 0x3F	; 63
     ee2:	99 83       	std	Y+1, r25	; 0x01
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <vfprintf+0x124>
     ee6:	83 36       	cpi	r24, 0x63	; 99
     ee8:	31 f0       	breq	.+12     	; 0xef6 <vfprintf+0x11a>
     eea:	83 37       	cpi	r24, 0x73	; 115
     eec:	71 f0       	breq	.+28     	; 0xf0a <vfprintf+0x12e>
     eee:	83 35       	cpi	r24, 0x53	; 83
     ef0:	09 f0       	breq	.+2      	; 0xef4 <vfprintf+0x118>
     ef2:	59 c0       	rjmp	.+178    	; 0xfa6 <vfprintf+0x1ca>
     ef4:	21 c0       	rjmp	.+66     	; 0xf38 <vfprintf+0x15c>
     ef6:	f8 01       	movw	r30, r16
     ef8:	80 81       	ld	r24, Z
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	0e 5f       	subi	r16, 0xFE	; 254
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	88 24       	eor	r8, r8
     f02:	83 94       	inc	r8
     f04:	91 2c       	mov	r9, r1
     f06:	53 01       	movw	r10, r6
     f08:	13 c0       	rjmp	.+38     	; 0xf30 <vfprintf+0x154>
     f0a:	28 01       	movw	r4, r16
     f0c:	f2 e0       	ldi	r31, 0x02	; 2
     f0e:	4f 0e       	add	r4, r31
     f10:	51 1c       	adc	r5, r1
     f12:	f8 01       	movw	r30, r16
     f14:	a0 80       	ld	r10, Z
     f16:	b1 80       	ldd	r11, Z+1	; 0x01
     f18:	36 fe       	sbrs	r3, 6
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <vfprintf+0x146>
     f1c:	69 2d       	mov	r22, r9
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <vfprintf+0x14a>
     f22:	6f ef       	ldi	r22, 0xFF	; 255
     f24:	7f ef       	ldi	r23, 0xFF	; 255
     f26:	c5 01       	movw	r24, r10
     f28:	0e 94 da 08 	call	0x11b4	; 0x11b4 <strnlen>
     f2c:	4c 01       	movw	r8, r24
     f2e:	82 01       	movw	r16, r4
     f30:	f3 2d       	mov	r31, r3
     f32:	ff 77       	andi	r31, 0x7F	; 127
     f34:	3f 2e       	mov	r3, r31
     f36:	16 c0       	rjmp	.+44     	; 0xf64 <vfprintf+0x188>
     f38:	28 01       	movw	r4, r16
     f3a:	22 e0       	ldi	r18, 0x02	; 2
     f3c:	42 0e       	add	r4, r18
     f3e:	51 1c       	adc	r5, r1
     f40:	f8 01       	movw	r30, r16
     f42:	a0 80       	ld	r10, Z
     f44:	b1 80       	ldd	r11, Z+1	; 0x01
     f46:	36 fe       	sbrs	r3, 6
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <vfprintf+0x174>
     f4a:	69 2d       	mov	r22, r9
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x178>
     f50:	6f ef       	ldi	r22, 0xFF	; 255
     f52:	7f ef       	ldi	r23, 0xFF	; 255
     f54:	c5 01       	movw	r24, r10
     f56:	0e 94 cf 08 	call	0x119e	; 0x119e <strnlen_P>
     f5a:	4c 01       	movw	r8, r24
     f5c:	f3 2d       	mov	r31, r3
     f5e:	f0 68       	ori	r31, 0x80	; 128
     f60:	3f 2e       	mov	r3, r31
     f62:	82 01       	movw	r16, r4
     f64:	33 fc       	sbrc	r3, 3
     f66:	1b c0       	rjmp	.+54     	; 0xf9e <vfprintf+0x1c2>
     f68:	82 2d       	mov	r24, r2
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 16       	cp	r8, r24
     f6e:	99 06       	cpc	r9, r25
     f70:	b0 f4       	brcc	.+44     	; 0xf9e <vfprintf+0x1c2>
     f72:	b6 01       	movw	r22, r12
     f74:	80 e2       	ldi	r24, 0x20	; 32
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fputc>
     f7c:	2a 94       	dec	r2
     f7e:	f4 cf       	rjmp	.-24     	; 0xf68 <vfprintf+0x18c>
     f80:	f5 01       	movw	r30, r10
     f82:	37 fc       	sbrc	r3, 7
     f84:	85 91       	lpm	r24, Z+
     f86:	37 fe       	sbrs	r3, 7
     f88:	81 91       	ld	r24, Z+
     f8a:	5f 01       	movw	r10, r30
     f8c:	b6 01       	movw	r22, r12
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fputc>
     f94:	21 10       	cpse	r2, r1
     f96:	2a 94       	dec	r2
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	82 1a       	sub	r8, r18
     f9c:	91 08       	sbc	r9, r1
     f9e:	81 14       	cp	r8, r1
     fa0:	91 04       	cpc	r9, r1
     fa2:	71 f7       	brne	.-36     	; 0xf80 <vfprintf+0x1a4>
     fa4:	e8 c0       	rjmp	.+464    	; 0x1176 <vfprintf+0x39a>
     fa6:	84 36       	cpi	r24, 0x64	; 100
     fa8:	11 f0       	breq	.+4      	; 0xfae <vfprintf+0x1d2>
     faa:	89 36       	cpi	r24, 0x69	; 105
     fac:	41 f5       	brne	.+80     	; 0xffe <vfprintf+0x222>
     fae:	f8 01       	movw	r30, r16
     fb0:	37 fe       	sbrs	r3, 7
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <vfprintf+0x1e6>
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	0c 5f       	subi	r16, 0xFC	; 252
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	08 c0       	rjmp	.+16     	; 0xfd2 <vfprintf+0x1f6>
     fc2:	60 81       	ld	r22, Z
     fc4:	71 81       	ldd	r23, Z+1	; 0x01
     fc6:	07 2e       	mov	r0, r23
     fc8:	00 0c       	add	r0, r0
     fca:	88 0b       	sbc	r24, r24
     fcc:	99 0b       	sbc	r25, r25
     fce:	0e 5f       	subi	r16, 0xFE	; 254
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	f3 2d       	mov	r31, r3
     fd4:	ff 76       	andi	r31, 0x6F	; 111
     fd6:	3f 2e       	mov	r3, r31
     fd8:	97 ff       	sbrs	r25, 7
     fda:	09 c0       	rjmp	.+18     	; 0xfee <vfprintf+0x212>
     fdc:	90 95       	com	r25
     fde:	80 95       	com	r24
     fe0:	70 95       	com	r23
     fe2:	61 95       	neg	r22
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	8f 4f       	sbci	r24, 0xFF	; 255
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	f0 68       	ori	r31, 0x80	; 128
     fec:	3f 2e       	mov	r3, r31
     fee:	2a e0       	ldi	r18, 0x0A	; 10
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	a3 01       	movw	r20, r6
     ff4:	0e 94 21 09 	call	0x1242	; 0x1242 <__ultoa_invert>
     ff8:	88 2e       	mov	r8, r24
     ffa:	86 18       	sub	r8, r6
     ffc:	45 c0       	rjmp	.+138    	; 0x1088 <vfprintf+0x2ac>
     ffe:	85 37       	cpi	r24, 0x75	; 117
    1000:	31 f4       	brne	.+12     	; 0x100e <vfprintf+0x232>
    1002:	23 2d       	mov	r18, r3
    1004:	2f 7e       	andi	r18, 0xEF	; 239
    1006:	b2 2e       	mov	r11, r18
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	25 c0       	rjmp	.+74     	; 0x1058 <vfprintf+0x27c>
    100e:	93 2d       	mov	r25, r3
    1010:	99 7f       	andi	r25, 0xF9	; 249
    1012:	b9 2e       	mov	r11, r25
    1014:	8f 36       	cpi	r24, 0x6F	; 111
    1016:	c1 f0       	breq	.+48     	; 0x1048 <vfprintf+0x26c>
    1018:	18 f4       	brcc	.+6      	; 0x1020 <vfprintf+0x244>
    101a:	88 35       	cpi	r24, 0x58	; 88
    101c:	79 f0       	breq	.+30     	; 0x103c <vfprintf+0x260>
    101e:	b5 c0       	rjmp	.+362    	; 0x118a <vfprintf+0x3ae>
    1020:	80 37       	cpi	r24, 0x70	; 112
    1022:	19 f0       	breq	.+6      	; 0x102a <vfprintf+0x24e>
    1024:	88 37       	cpi	r24, 0x78	; 120
    1026:	21 f0       	breq	.+8      	; 0x1030 <vfprintf+0x254>
    1028:	b0 c0       	rjmp	.+352    	; 0x118a <vfprintf+0x3ae>
    102a:	e9 2f       	mov	r30, r25
    102c:	e0 61       	ori	r30, 0x10	; 16
    102e:	be 2e       	mov	r11, r30
    1030:	b4 fe       	sbrs	r11, 4
    1032:	0d c0       	rjmp	.+26     	; 0x104e <vfprintf+0x272>
    1034:	fb 2d       	mov	r31, r11
    1036:	f4 60       	ori	r31, 0x04	; 4
    1038:	bf 2e       	mov	r11, r31
    103a:	09 c0       	rjmp	.+18     	; 0x104e <vfprintf+0x272>
    103c:	34 fe       	sbrs	r3, 4
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <vfprintf+0x278>
    1040:	29 2f       	mov	r18, r25
    1042:	26 60       	ori	r18, 0x06	; 6
    1044:	b2 2e       	mov	r11, r18
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <vfprintf+0x278>
    1048:	28 e0       	ldi	r18, 0x08	; 8
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <vfprintf+0x27c>
    104e:	20 e1       	ldi	r18, 0x10	; 16
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <vfprintf+0x27c>
    1054:	20 e1       	ldi	r18, 0x10	; 16
    1056:	32 e0       	ldi	r19, 0x02	; 2
    1058:	f8 01       	movw	r30, r16
    105a:	b7 fe       	sbrs	r11, 7
    105c:	07 c0       	rjmp	.+14     	; 0x106c <vfprintf+0x290>
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	0c 5f       	subi	r16, 0xFC	; 252
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <vfprintf+0x29c>
    106c:	60 81       	ld	r22, Z
    106e:	71 81       	ldd	r23, Z+1	; 0x01
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 5f       	subi	r16, 0xFE	; 254
    1076:	1f 4f       	sbci	r17, 0xFF	; 255
    1078:	a3 01       	movw	r20, r6
    107a:	0e 94 21 09 	call	0x1242	; 0x1242 <__ultoa_invert>
    107e:	88 2e       	mov	r8, r24
    1080:	86 18       	sub	r8, r6
    1082:	fb 2d       	mov	r31, r11
    1084:	ff 77       	andi	r31, 0x7F	; 127
    1086:	3f 2e       	mov	r3, r31
    1088:	36 fe       	sbrs	r3, 6
    108a:	0d c0       	rjmp	.+26     	; 0x10a6 <vfprintf+0x2ca>
    108c:	23 2d       	mov	r18, r3
    108e:	2e 7f       	andi	r18, 0xFE	; 254
    1090:	a2 2e       	mov	r10, r18
    1092:	89 14       	cp	r8, r9
    1094:	58 f4       	brcc	.+22     	; 0x10ac <vfprintf+0x2d0>
    1096:	34 fe       	sbrs	r3, 4
    1098:	0b c0       	rjmp	.+22     	; 0x10b0 <vfprintf+0x2d4>
    109a:	32 fc       	sbrc	r3, 2
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <vfprintf+0x2d4>
    109e:	83 2d       	mov	r24, r3
    10a0:	8e 7e       	andi	r24, 0xEE	; 238
    10a2:	a8 2e       	mov	r10, r24
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <vfprintf+0x2d4>
    10a6:	b8 2c       	mov	r11, r8
    10a8:	a3 2c       	mov	r10, r3
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <vfprintf+0x2d6>
    10ac:	b8 2c       	mov	r11, r8
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <vfprintf+0x2d6>
    10b0:	b9 2c       	mov	r11, r9
    10b2:	a4 fe       	sbrs	r10, 4
    10b4:	0f c0       	rjmp	.+30     	; 0x10d4 <vfprintf+0x2f8>
    10b6:	fe 01       	movw	r30, r28
    10b8:	e8 0d       	add	r30, r8
    10ba:	f1 1d       	adc	r31, r1
    10bc:	80 81       	ld	r24, Z
    10be:	80 33       	cpi	r24, 0x30	; 48
    10c0:	21 f4       	brne	.+8      	; 0x10ca <vfprintf+0x2ee>
    10c2:	9a 2d       	mov	r25, r10
    10c4:	99 7e       	andi	r25, 0xE9	; 233
    10c6:	a9 2e       	mov	r10, r25
    10c8:	09 c0       	rjmp	.+18     	; 0x10dc <vfprintf+0x300>
    10ca:	a2 fe       	sbrs	r10, 2
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <vfprintf+0x2fe>
    10ce:	b3 94       	inc	r11
    10d0:	b3 94       	inc	r11
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <vfprintf+0x300>
    10d4:	8a 2d       	mov	r24, r10
    10d6:	86 78       	andi	r24, 0x86	; 134
    10d8:	09 f0       	breq	.+2      	; 0x10dc <vfprintf+0x300>
    10da:	b3 94       	inc	r11
    10dc:	a3 fc       	sbrc	r10, 3
    10de:	11 c0       	rjmp	.+34     	; 0x1102 <vfprintf+0x326>
    10e0:	a0 fe       	sbrs	r10, 0
    10e2:	06 c0       	rjmp	.+12     	; 0x10f0 <vfprintf+0x314>
    10e4:	b2 14       	cp	r11, r2
    10e6:	88 f4       	brcc	.+34     	; 0x110a <vfprintf+0x32e>
    10e8:	28 0c       	add	r2, r8
    10ea:	92 2c       	mov	r9, r2
    10ec:	9b 18       	sub	r9, r11
    10ee:	0e c0       	rjmp	.+28     	; 0x110c <vfprintf+0x330>
    10f0:	b2 14       	cp	r11, r2
    10f2:	60 f4       	brcc	.+24     	; 0x110c <vfprintf+0x330>
    10f4:	b6 01       	movw	r22, r12
    10f6:	80 e2       	ldi	r24, 0x20	; 32
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fputc>
    10fe:	b3 94       	inc	r11
    1100:	f7 cf       	rjmp	.-18     	; 0x10f0 <vfprintf+0x314>
    1102:	b2 14       	cp	r11, r2
    1104:	18 f4       	brcc	.+6      	; 0x110c <vfprintf+0x330>
    1106:	2b 18       	sub	r2, r11
    1108:	02 c0       	rjmp	.+4      	; 0x110e <vfprintf+0x332>
    110a:	98 2c       	mov	r9, r8
    110c:	21 2c       	mov	r2, r1
    110e:	a4 fe       	sbrs	r10, 4
    1110:	10 c0       	rjmp	.+32     	; 0x1132 <vfprintf+0x356>
    1112:	b6 01       	movw	r22, r12
    1114:	80 e3       	ldi	r24, 0x30	; 48
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fputc>
    111c:	a2 fe       	sbrs	r10, 2
    111e:	17 c0       	rjmp	.+46     	; 0x114e <vfprintf+0x372>
    1120:	a1 fc       	sbrc	r10, 1
    1122:	03 c0       	rjmp	.+6      	; 0x112a <vfprintf+0x34e>
    1124:	88 e7       	ldi	r24, 0x78	; 120
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <vfprintf+0x352>
    112a:	88 e5       	ldi	r24, 0x58	; 88
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	b6 01       	movw	r22, r12
    1130:	0c c0       	rjmp	.+24     	; 0x114a <vfprintf+0x36e>
    1132:	8a 2d       	mov	r24, r10
    1134:	86 78       	andi	r24, 0x86	; 134
    1136:	59 f0       	breq	.+22     	; 0x114e <vfprintf+0x372>
    1138:	a1 fe       	sbrs	r10, 1
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <vfprintf+0x364>
    113c:	8b e2       	ldi	r24, 0x2B	; 43
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <vfprintf+0x366>
    1140:	80 e2       	ldi	r24, 0x20	; 32
    1142:	a7 fc       	sbrc	r10, 7
    1144:	8d e2       	ldi	r24, 0x2D	; 45
    1146:	b6 01       	movw	r22, r12
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fputc>
    114e:	89 14       	cp	r8, r9
    1150:	38 f4       	brcc	.+14     	; 0x1160 <vfprintf+0x384>
    1152:	b6 01       	movw	r22, r12
    1154:	80 e3       	ldi	r24, 0x30	; 48
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fputc>
    115c:	9a 94       	dec	r9
    115e:	f7 cf       	rjmp	.-18     	; 0x114e <vfprintf+0x372>
    1160:	8a 94       	dec	r8
    1162:	f3 01       	movw	r30, r6
    1164:	e8 0d       	add	r30, r8
    1166:	f1 1d       	adc	r31, r1
    1168:	80 81       	ld	r24, Z
    116a:	b6 01       	movw	r22, r12
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fputc>
    1172:	81 10       	cpse	r8, r1
    1174:	f5 cf       	rjmp	.-22     	; 0x1160 <vfprintf+0x384>
    1176:	22 20       	and	r2, r2
    1178:	09 f4       	brne	.+2      	; 0x117c <vfprintf+0x3a0>
    117a:	42 ce       	rjmp	.-892    	; 0xe00 <vfprintf+0x24>
    117c:	b6 01       	movw	r22, r12
    117e:	80 e2       	ldi	r24, 0x20	; 32
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 e5 08 	call	0x11ca	; 0x11ca <fputc>
    1186:	2a 94       	dec	r2
    1188:	f6 cf       	rjmp	.-20     	; 0x1176 <vfprintf+0x39a>
    118a:	f6 01       	movw	r30, r12
    118c:	86 81       	ldd	r24, Z+6	; 0x06
    118e:	97 81       	ldd	r25, Z+7	; 0x07
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <vfprintf+0x3ba>
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	9f ef       	ldi	r25, 0xFF	; 255
    1196:	2b 96       	adiw	r28, 0x0b	; 11
    1198:	e2 e1       	ldi	r30, 0x12	; 18
    119a:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__epilogue_restores__>

0000119e <strnlen_P>:
    119e:	fc 01       	movw	r30, r24
    11a0:	05 90       	lpm	r0, Z+
    11a2:	61 50       	subi	r22, 0x01	; 1
    11a4:	70 40       	sbci	r23, 0x00	; 0
    11a6:	01 10       	cpse	r0, r1
    11a8:	d8 f7       	brcc	.-10     	; 0x11a0 <strnlen_P+0x2>
    11aa:	80 95       	com	r24
    11ac:	90 95       	com	r25
    11ae:	8e 0f       	add	r24, r30
    11b0:	9f 1f       	adc	r25, r31
    11b2:	08 95       	ret

000011b4 <strnlen>:
    11b4:	fc 01       	movw	r30, r24
    11b6:	61 50       	subi	r22, 0x01	; 1
    11b8:	70 40       	sbci	r23, 0x00	; 0
    11ba:	01 90       	ld	r0, Z+
    11bc:	01 10       	cpse	r0, r1
    11be:	d8 f7       	brcc	.-10     	; 0x11b6 <strnlen+0x2>
    11c0:	80 95       	com	r24
    11c2:	90 95       	com	r25
    11c4:	8e 0f       	add	r24, r30
    11c6:	9f 1f       	adc	r25, r31
    11c8:	08 95       	ret

000011ca <fputc>:
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	fb 01       	movw	r30, r22
    11d4:	23 81       	ldd	r18, Z+3	; 0x03
    11d6:	21 fd       	sbrc	r18, 1
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <fputc+0x16>
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	9f ef       	ldi	r25, 0xFF	; 255
    11de:	2c c0       	rjmp	.+88     	; 0x1238 <fputc+0x6e>
    11e0:	22 ff       	sbrs	r18, 2
    11e2:	16 c0       	rjmp	.+44     	; 0x1210 <fputc+0x46>
    11e4:	46 81       	ldd	r20, Z+6	; 0x06
    11e6:	57 81       	ldd	r21, Z+7	; 0x07
    11e8:	24 81       	ldd	r18, Z+4	; 0x04
    11ea:	35 81       	ldd	r19, Z+5	; 0x05
    11ec:	42 17       	cp	r20, r18
    11ee:	53 07       	cpc	r21, r19
    11f0:	44 f4       	brge	.+16     	; 0x1202 <fputc+0x38>
    11f2:	a0 81       	ld	r26, Z
    11f4:	b1 81       	ldd	r27, Z+1	; 0x01
    11f6:	9d 01       	movw	r18, r26
    11f8:	2f 5f       	subi	r18, 0xFF	; 255
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    11fc:	31 83       	std	Z+1, r19	; 0x01
    11fe:	20 83       	st	Z, r18
    1200:	8c 93       	st	X, r24
    1202:	26 81       	ldd	r18, Z+6	; 0x06
    1204:	37 81       	ldd	r19, Z+7	; 0x07
    1206:	2f 5f       	subi	r18, 0xFF	; 255
    1208:	3f 4f       	sbci	r19, 0xFF	; 255
    120a:	37 83       	std	Z+7, r19	; 0x07
    120c:	26 83       	std	Z+6, r18	; 0x06
    120e:	14 c0       	rjmp	.+40     	; 0x1238 <fputc+0x6e>
    1210:	8b 01       	movw	r16, r22
    1212:	ec 01       	movw	r28, r24
    1214:	fb 01       	movw	r30, r22
    1216:	00 84       	ldd	r0, Z+8	; 0x08
    1218:	f1 85       	ldd	r31, Z+9	; 0x09
    121a:	e0 2d       	mov	r30, r0
    121c:	09 95       	icall
    121e:	89 2b       	or	r24, r25
    1220:	e1 f6       	brne	.-72     	; 0x11da <fputc+0x10>
    1222:	d8 01       	movw	r26, r16
    1224:	16 96       	adiw	r26, 0x06	; 6
    1226:	8d 91       	ld	r24, X+
    1228:	9c 91       	ld	r25, X
    122a:	17 97       	sbiw	r26, 0x07	; 7
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	17 96       	adiw	r26, 0x07	; 7
    1230:	9c 93       	st	X, r25
    1232:	8e 93       	st	-X, r24
    1234:	16 97       	sbiw	r26, 0x06	; 6
    1236:	ce 01       	movw	r24, r28
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	08 95       	ret

00001242 <__ultoa_invert>:
    1242:	fa 01       	movw	r30, r20
    1244:	aa 27       	eor	r26, r26
    1246:	28 30       	cpi	r18, 0x08	; 8
    1248:	51 f1       	breq	.+84     	; 0x129e <__ultoa_invert+0x5c>
    124a:	20 31       	cpi	r18, 0x10	; 16
    124c:	81 f1       	breq	.+96     	; 0x12ae <__ultoa_invert+0x6c>
    124e:	e8 94       	clt
    1250:	6f 93       	push	r22
    1252:	6e 7f       	andi	r22, 0xFE	; 254
    1254:	6e 5f       	subi	r22, 0xFE	; 254
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	8f 4f       	sbci	r24, 0xFF	; 255
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	af 4f       	sbci	r26, 0xFF	; 255
    125e:	b1 e0       	ldi	r27, 0x01	; 1
    1260:	3e d0       	rcall	.+124    	; 0x12de <__ultoa_invert+0x9c>
    1262:	b4 e0       	ldi	r27, 0x04	; 4
    1264:	3c d0       	rcall	.+120    	; 0x12de <__ultoa_invert+0x9c>
    1266:	67 0f       	add	r22, r23
    1268:	78 1f       	adc	r23, r24
    126a:	89 1f       	adc	r24, r25
    126c:	9a 1f       	adc	r25, r26
    126e:	a1 1d       	adc	r26, r1
    1270:	68 0f       	add	r22, r24
    1272:	79 1f       	adc	r23, r25
    1274:	8a 1f       	adc	r24, r26
    1276:	91 1d       	adc	r25, r1
    1278:	a1 1d       	adc	r26, r1
    127a:	6a 0f       	add	r22, r26
    127c:	71 1d       	adc	r23, r1
    127e:	81 1d       	adc	r24, r1
    1280:	91 1d       	adc	r25, r1
    1282:	a1 1d       	adc	r26, r1
    1284:	20 d0       	rcall	.+64     	; 0x12c6 <__ultoa_invert+0x84>
    1286:	09 f4       	brne	.+2      	; 0x128a <__ultoa_invert+0x48>
    1288:	68 94       	set
    128a:	3f 91       	pop	r19
    128c:	2a e0       	ldi	r18, 0x0A	; 10
    128e:	26 9f       	mul	r18, r22
    1290:	11 24       	eor	r1, r1
    1292:	30 19       	sub	r19, r0
    1294:	30 5d       	subi	r19, 0xD0	; 208
    1296:	31 93       	st	Z+, r19
    1298:	de f6       	brtc	.-74     	; 0x1250 <__ultoa_invert+0xe>
    129a:	cf 01       	movw	r24, r30
    129c:	08 95       	ret
    129e:	46 2f       	mov	r20, r22
    12a0:	47 70       	andi	r20, 0x07	; 7
    12a2:	40 5d       	subi	r20, 0xD0	; 208
    12a4:	41 93       	st	Z+, r20
    12a6:	b3 e0       	ldi	r27, 0x03	; 3
    12a8:	0f d0       	rcall	.+30     	; 0x12c8 <__ultoa_invert+0x86>
    12aa:	c9 f7       	brne	.-14     	; 0x129e <__ultoa_invert+0x5c>
    12ac:	f6 cf       	rjmp	.-20     	; 0x129a <__ultoa_invert+0x58>
    12ae:	46 2f       	mov	r20, r22
    12b0:	4f 70       	andi	r20, 0x0F	; 15
    12b2:	40 5d       	subi	r20, 0xD0	; 208
    12b4:	4a 33       	cpi	r20, 0x3A	; 58
    12b6:	18 f0       	brcs	.+6      	; 0x12be <__ultoa_invert+0x7c>
    12b8:	49 5d       	subi	r20, 0xD9	; 217
    12ba:	31 fd       	sbrc	r19, 1
    12bc:	40 52       	subi	r20, 0x20	; 32
    12be:	41 93       	st	Z+, r20
    12c0:	02 d0       	rcall	.+4      	; 0x12c6 <__ultoa_invert+0x84>
    12c2:	a9 f7       	brne	.-22     	; 0x12ae <__ultoa_invert+0x6c>
    12c4:	ea cf       	rjmp	.-44     	; 0x129a <__ultoa_invert+0x58>
    12c6:	b4 e0       	ldi	r27, 0x04	; 4
    12c8:	a6 95       	lsr	r26
    12ca:	97 95       	ror	r25
    12cc:	87 95       	ror	r24
    12ce:	77 95       	ror	r23
    12d0:	67 95       	ror	r22
    12d2:	ba 95       	dec	r27
    12d4:	c9 f7       	brne	.-14     	; 0x12c8 <__ultoa_invert+0x86>
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	61 05       	cpc	r22, r1
    12da:	71 05       	cpc	r23, r1
    12dc:	08 95       	ret
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	0a 2e       	mov	r0, r26
    12e4:	06 94       	lsr	r0
    12e6:	57 95       	ror	r21
    12e8:	47 95       	ror	r20
    12ea:	37 95       	ror	r19
    12ec:	27 95       	ror	r18
    12ee:	ba 95       	dec	r27
    12f0:	c9 f7       	brne	.-14     	; 0x12e4 <__ultoa_invert+0xa2>
    12f2:	62 0f       	add	r22, r18
    12f4:	73 1f       	adc	r23, r19
    12f6:	84 1f       	adc	r24, r20
    12f8:	95 1f       	adc	r25, r21
    12fa:	a0 1d       	adc	r26, r0
    12fc:	08 95       	ret

000012fe <__prologue_saves__>:
    12fe:	2f 92       	push	r2
    1300:	3f 92       	push	r3
    1302:	4f 92       	push	r4
    1304:	5f 92       	push	r5
    1306:	6f 92       	push	r6
    1308:	7f 92       	push	r7
    130a:	8f 92       	push	r8
    130c:	9f 92       	push	r9
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	ca 1b       	sub	r28, r26
    1328:	db 0b       	sbc	r29, r27
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	09 94       	ijmp

00001336 <__epilogue_restores__>:
    1336:	2a 88       	ldd	r2, Y+18	; 0x12
    1338:	39 88       	ldd	r3, Y+17	; 0x11
    133a:	48 88       	ldd	r4, Y+16	; 0x10
    133c:	5f 84       	ldd	r5, Y+15	; 0x0f
    133e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1340:	7d 84       	ldd	r7, Y+13	; 0x0d
    1342:	8c 84       	ldd	r8, Y+12	; 0x0c
    1344:	9b 84       	ldd	r9, Y+11	; 0x0b
    1346:	aa 84       	ldd	r10, Y+10	; 0x0a
    1348:	b9 84       	ldd	r11, Y+9	; 0x09
    134a:	c8 84       	ldd	r12, Y+8	; 0x08
    134c:	df 80       	ldd	r13, Y+7	; 0x07
    134e:	ee 80       	ldd	r14, Y+6	; 0x06
    1350:	fd 80       	ldd	r15, Y+5	; 0x05
    1352:	0c 81       	ldd	r16, Y+4	; 0x04
    1354:	1b 81       	ldd	r17, Y+3	; 0x03
    1356:	aa 81       	ldd	r26, Y+2	; 0x02
    1358:	b9 81       	ldd	r27, Y+1	; 0x01
    135a:	ce 0f       	add	r28, r30
    135c:	d1 1d       	adc	r29, r1
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	ed 01       	movw	r28, r26
    136a:	08 95       	ret

0000136c <_exit>:
    136c:	f8 94       	cli

0000136e <__stop_program>:
    136e:	ff cf       	rjmp	.-2      	; 0x136e <__stop_program>

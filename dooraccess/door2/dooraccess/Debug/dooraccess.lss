
dooraccess.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000097c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000908  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800100  00800100  0000097c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000009f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021b4  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000945  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e16  00000000  00000000  00003619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00004430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091c  00000000  00000000  000047a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001931  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000069f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 21 04 	call	0x842	; 0x842 <main>
  9e:	0c 94 82 04 	jmp	0x904	; 0x904 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z8SPI_Initv>:
  buff[0] = PICC_HALT;
  buff[1] = 0;
  CalulateCRC(buff, 2, &buff[2]);

  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
}
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8e 62       	ori	r24, 0x2E	; 46
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	24 98       	cbi	0x04, 4	; 4
  ae:	2a 9a       	sbi	0x05, 2	; 5
  b0:	81 e5       	ldi	r24, 0x51	; 81
  b2:	8c bd       	out	0x2c, r24	; 44
  b4:	08 95       	ret

000000b6 <_Z9SPI_Writeh>:
  b6:	8e bd       	out	0x2e, r24	; 46
  b8:	0d b4       	in	r0, 0x2d	; 45
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <_Z9SPI_Writeh+0x2>
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	08 95       	ret

000000c2 <_Z15Separate_hexP10h>:
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	95 95       	asr	r25
  d0:	87 95       	ror	r24
  d2:	95 95       	asr	r25
  d4:	87 95       	ror	r24
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	10 f4       	brcc	.+4      	; 0xde <_Z15Separate_hexP10h+0x1c>
  da:	80 5d       	subi	r24, 0xD0	; 208
  dc:	08 95       	ret
  de:	89 5c       	subi	r24, 0xC9	; 201
  e0:	08 95       	ret

000000e2 <_Z14Separate_hexP1h>:
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	10 f4       	brcc	.+4      	; 0xec <_Z14Separate_hexP1h+0xa>
  e8:	80 5d       	subi	r24, 0xD0	; 208
  ea:	08 95       	ret
  ec:	89 5c       	subi	r24, 0xC9	; 201
  ee:	08 95       	ret

000000f0 <_Z15SetFormatRDM630v>:
  f0:	af 92       	push	r10
  f2:	bf 92       	push	r11
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	03 e4       	ldi	r16, 0x43	; 67
 106:	11 e0       	ldi	r17, 0x01	; 1
 108:	f8 01       	movw	r30, r16
 10a:	f0 80       	ld	r15, Z
 10c:	8f 2d       	mov	r24, r15
 10e:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z15Separate_hexP10h>
 112:	a8 2e       	mov	r10, r24
 114:	cb e3       	ldi	r28, 0x3B	; 59
 116:	d1 e0       	ldi	r29, 0x01	; 1
 118:	88 83       	st	Y, r24
 11a:	8f 2d       	mov	r24, r15
 11c:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z14Separate_hexP1h>
 120:	b8 2e       	mov	r11, r24
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	f8 01       	movw	r30, r16
 126:	f1 80       	ldd	r15, Z+1	; 0x01
 128:	8f 2d       	mov	r24, r15
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z15Separate_hexP10h>
 12e:	c8 2e       	mov	r12, r24
 130:	8a 83       	std	Y+2, r24	; 0x02
 132:	8f 2d       	mov	r24, r15
 134:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z14Separate_hexP1h>
 138:	d8 2e       	mov	r13, r24
 13a:	8b 83       	std	Y+3, r24	; 0x03
 13c:	f8 01       	movw	r30, r16
 13e:	f2 80       	ldd	r15, Z+2	; 0x02
 140:	8f 2d       	mov	r24, r15
 142:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z15Separate_hexP10h>
 146:	e8 2e       	mov	r14, r24
 148:	8c 83       	std	Y+4, r24	; 0x04
 14a:	8f 2d       	mov	r24, r15
 14c:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z14Separate_hexP1h>
 150:	f8 2e       	mov	r15, r24
 152:	8d 83       	std	Y+5, r24	; 0x05
 154:	f8 01       	movw	r30, r16
 156:	03 81       	ldd	r16, Z+3	; 0x03
 158:	80 2f       	mov	r24, r16
 15a:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z15Separate_hexP10h>
 15e:	18 2f       	mov	r17, r24
 160:	8e 83       	std	Y+6, r24	; 0x06
 162:	80 2f       	mov	r24, r16
 164:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z14Separate_hexP1h>
 168:	8f 83       	std	Y+7, r24	; 0x07
 16a:	e1 e3       	ldi	r30, 0x31	; 49
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	a0 82       	st	Z, r10
 170:	b1 82       	std	Z+1, r11	; 0x01
 172:	c2 82       	std	Z+2, r12	; 0x02
 174:	d3 82       	std	Z+3, r13	; 0x03
 176:	e4 82       	std	Z+4, r14	; 0x04
 178:	f5 82       	std	Z+5, r15	; 0x05
 17a:	16 83       	std	Z+6, r17	; 0x06
 17c:	87 83       	std	Z+7, r24	; 0x07
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	df 90       	pop	r13
 18c:	cf 90       	pop	r12
 18e:	bf 90       	pop	r11
 190:	af 90       	pop	r10
 192:	08 95       	ret

00000194 <_Z13Write_MFRC522hh>:
 194:	cf 93       	push	r28
 196:	c6 2f       	mov	r28, r22
 198:	2a 98       	cbi	0x05, 2	; 5
 19a:	88 0f       	add	r24, r24
 19c:	8e 77       	andi	r24, 0x7E	; 126
 19e:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z9SPI_Writeh>
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z9SPI_Writeh>
 1a8:	2a 9a       	sbi	0x05, 2	; 5
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <_Z12Read_MFRC522h>:
 1ae:	2a 98       	cbi	0x05, 2	; 5
 1b0:	88 0f       	add	r24, r24
 1b2:	8e 77       	andi	r24, 0x7E	; 126
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z9SPI_Writeh>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z9SPI_Writeh>
 1c0:	2a 9a       	sbi	0x05, 2	; 5
 1c2:	08 95       	ret

000001c4 <_Z10SetBitMaskhh>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	d8 2f       	mov	r29, r24
 1ca:	c6 2f       	mov	r28, r22
 1cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12Read_MFRC522h>
 1d0:	68 2f       	mov	r22, r24
 1d2:	6c 2b       	or	r22, r28
 1d4:	8d 2f       	mov	r24, r29
 1d6:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <_Z12ClearBitMaskhh>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	d8 2f       	mov	r29, r24
 1e6:	c6 2f       	mov	r28, r22
 1e8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12Read_MFRC522h>
 1ec:	c0 95       	com	r28
 1ee:	6c 2f       	mov	r22, r28
 1f0:	68 23       	and	r22, r24
 1f2:	8d 2f       	mov	r24, r29
 1f4:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <_Z9AntennaOnv>:
 1fe:	84 e1       	ldi	r24, 0x14	; 20
 200:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12Read_MFRC522h>
 204:	83 70       	andi	r24, 0x03	; 3
 206:	21 f4       	brne	.+8      	; 0x210 <_Z9AntennaOnv+0x12>
 208:	63 e0       	ldi	r22, 0x03	; 3
 20a:	84 e1       	ldi	r24, 0x14	; 20
 20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z10SetBitMaskhh>
 210:	08 95       	ret

00000212 <_Z13MFRC522_Resetv>:
 212:	6f e0       	ldi	r22, 0x0F	; 15
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 21a:	08 95       	ret

0000021c <_Z12MFRC522_Initv>:
 21c:	0e 94 09 01 	call	0x212	; 0x212 <_Z13MFRC522_Resetv>
 220:	6d e8       	ldi	r22, 0x8D	; 141
 222:	8a e2       	ldi	r24, 0x2A	; 42
 224:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 228:	6e e3       	ldi	r22, 0x3E	; 62
 22a:	8b e2       	ldi	r24, 0x2B	; 43
 22c:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 230:	6e e1       	ldi	r22, 0x1E	; 30
 232:	8d e2       	ldi	r24, 0x2D	; 45
 234:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	8c e2       	ldi	r24, 0x2C	; 44
 23c:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 240:	60 e4       	ldi	r22, 0x40	; 64
 242:	85 e1       	ldi	r24, 0x15	; 21
 244:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 248:	6d e3       	ldi	r22, 0x3D	; 61
 24a:	81 e1       	ldi	r24, 0x11	; 17
 24c:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 250:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_Z9AntennaOnv>
 254:	08 95       	ret

00000256 <_Z14MFRC522_ToCardhPhhS_Pj>:
 256:	7f 92       	push	r7
 258:	8f 92       	push	r8
 25a:	9f 92       	push	r9
 25c:	af 92       	push	r10
 25e:	bf 92       	push	r11
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	b8 2e       	mov	r11, r24
 272:	c6 2f       	mov	r28, r22
 274:	d7 2f       	mov	r29, r23
 276:	c4 2e       	mov	r12, r20
 278:	a2 2e       	mov	r10, r18
 27a:	93 2e       	mov	r9, r19
 27c:	78 01       	movw	r14, r16
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	b8 16       	cp	r11, r24
 282:	09 f4       	brne	.+2      	; 0x286 <_Z14MFRC522_ToCardhPhhS_Pj+0x30>
 284:	a7 c0       	rjmp	.+334    	; 0x3d4 <_Z14MFRC522_ToCardhPhhS_Pj+0x17e>
 286:	ee e0       	ldi	r30, 0x0E	; 14
 288:	be 12       	cpse	r11, r30
 28a:	08 c0       	rjmp	.+16     	; 0x29c <_Z14MFRC522_ToCardhPhhS_Pj+0x46>
 28c:	68 94       	set
 28e:	77 24       	eor	r7, r7
 290:	74 f8       	bld	r7, 4
 292:	0f 2e       	mov	r0, r31
 294:	f2 e1       	ldi	r31, 0x12	; 18
 296:	8f 2e       	mov	r8, r31
 298:	f0 2d       	mov	r31, r0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <_Z14MFRC522_ToCardhPhhS_Pj+0x4a>
 29c:	71 2c       	mov	r7, r1
 29e:	81 2c       	mov	r8, r1
 2a0:	68 2d       	mov	r22, r8
 2a2:	60 68       	ori	r22, 0x80	; 128
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 2aa:	60 e8       	ldi	r22, 0x80	; 128
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z12ClearBitMaskhh>
 2b2:	60 e8       	ldi	r22, 0x80	; 128
 2b4:	8a e0       	ldi	r24, 0x0A	; 10
 2b6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z10SetBitMaskhh>
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 2c2:	d1 2c       	mov	r13, r1
 2c4:	c1 14       	cp	r12, r1
 2c6:	d1 04       	cpc	r13, r1
 2c8:	71 f0       	breq	.+28     	; 0x2e6 <_Z14MFRC522_ToCardhPhhS_Pj+0x90>
 2ca:	0c 2f       	mov	r16, r28
 2cc:	1d 2f       	mov	r17, r29
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	f8 01       	movw	r30, r16
 2d4:	61 91       	ld	r22, Z+
 2d6:	8f 01       	movw	r16, r30
 2d8:	89 e0       	ldi	r24, 0x09	; 9
 2da:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 2de:	21 96       	adiw	r28, 0x01	; 1
 2e0:	cc 15       	cp	r28, r12
 2e2:	dd 05       	cpc	r29, r13
 2e4:	b0 f3       	brcs	.-20     	; 0x2d2 <_Z14MFRC522_ToCardhPhhS_Pj+0x7c>
 2e6:	6b 2d       	mov	r22, r11
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 2ee:	fc e0       	ldi	r31, 0x0C	; 12
 2f0:	bf 12       	cpse	r11, r31
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <_Z14MFRC522_ToCardhPhhS_Pj+0xa6>
 2f4:	60 e8       	ldi	r22, 0x80	; 128
 2f6:	8d e0       	ldi	r24, 0x0D	; 13
 2f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z10SetBitMaskhh>
 2fc:	84 e0       	ldi	r24, 0x04	; 4
 2fe:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12Read_MFRC522h>
 302:	18 2f       	mov	r17, r24
 304:	cf ec       	ldi	r28, 0xCF	; 207
 306:	d7 e0       	ldi	r29, 0x07	; 7
 308:	07 2d       	mov	r16, r7
 30a:	01 60       	ori	r16, 0x01	; 1
 30c:	07 c0       	rjmp	.+14     	; 0x31c <_Z14MFRC522_ToCardhPhhS_Pj+0xc6>
 30e:	84 e0       	ldi	r24, 0x04	; 4
 310:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12Read_MFRC522h>
 314:	18 2f       	mov	r17, r24
 316:	21 97       	sbiw	r28, 0x01	; 1
 318:	09 f4       	brne	.+2      	; 0x31c <_Z14MFRC522_ToCardhPhhS_Pj+0xc6>
 31a:	79 c0       	rjmp	.+242    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 31c:	80 2f       	mov	r24, r16
 31e:	81 23       	and	r24, r17
 320:	b1 f3       	breq	.-20     	; 0x30e <_Z14MFRC522_ToCardhPhhS_Pj+0xb8>
 322:	7b c0       	rjmp	.+246    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 324:	88 2d       	mov	r24, r8
 326:	81 70       	andi	r24, 0x01	; 1
 328:	18 23       	and	r17, r24
 32a:	c1 e0       	ldi	r28, 0x01	; 1
 32c:	09 f4       	brne	.+2      	; 0x330 <_Z14MFRC522_ToCardhPhhS_Pj+0xda>
 32e:	c0 e0       	ldi	r28, 0x00	; 0
 330:	8c e0       	ldi	r24, 0x0C	; 12
 332:	b8 12       	cpse	r11, r24
 334:	7d c0       	rjmp	.+250    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 336:	8a e0       	ldi	r24, 0x0A	; 10
 338:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12Read_MFRC522h>
 33c:	d8 2f       	mov	r29, r24
 33e:	8c e0       	ldi	r24, 0x0C	; 12
 340:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12Read_MFRC522h>
 344:	28 2f       	mov	r18, r24
 346:	27 70       	andi	r18, 0x07	; 7
 348:	79 f0       	breq	.+30     	; 0x368 <_Z14MFRC522_ToCardhPhhS_Pj+0x112>
 34a:	8d 2f       	mov	r24, r29
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	82 0f       	add	r24, r18
 35e:	91 1d       	adc	r25, r1
 360:	f7 01       	movw	r30, r14
 362:	91 83       	std	Z+1, r25	; 0x01
 364:	80 83       	st	Z, r24
 366:	0b c0       	rjmp	.+22     	; 0x37e <_Z14MFRC522_ToCardhPhhS_Pj+0x128>
 368:	8d 2f       	mov	r24, r29
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	f7 01       	movw	r30, r14
 37a:	91 83       	std	Z+1, r25	; 0x01
 37c:	80 83       	st	Z, r24
 37e:	dd 23       	and	r29, r29
 380:	49 f0       	breq	.+18     	; 0x394 <_Z14MFRC522_ToCardhPhhS_Pj+0x13e>
 382:	d1 31       	cpi	r29, 0x11	; 17
 384:	08 f0       	brcs	.+2      	; 0x388 <_Z14MFRC522_ToCardhPhhS_Pj+0x132>
 386:	d0 e1       	ldi	r29, 0x10	; 16
 388:	ed 2e       	mov	r14, r29
 38a:	f1 2c       	mov	r15, r1
 38c:	e1 14       	cp	r14, r1
 38e:	f1 04       	cpc	r15, r1
 390:	21 f4       	brne	.+8      	; 0x39a <_Z14MFRC522_ToCardhPhhS_Pj+0x144>
 392:	4e c0       	rjmp	.+156    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 394:	ee 24       	eor	r14, r14
 396:	e3 94       	inc	r14
 398:	f1 2c       	mov	r15, r1
 39a:	ca 2c       	mov	r12, r10
 39c:	d9 2c       	mov	r13, r9
 39e:	00 e0       	ldi	r16, 0x00	; 0
 3a0:	10 e0       	ldi	r17, 0x00	; 0
 3a2:	89 e0       	ldi	r24, 0x09	; 9
 3a4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12Read_MFRC522h>
 3a8:	f6 01       	movw	r30, r12
 3aa:	81 93       	st	Z+, r24
 3ac:	6f 01       	movw	r12, r30
 3ae:	0f 5f       	subi	r16, 0xFF	; 255
 3b0:	1f 4f       	sbci	r17, 0xFF	; 255
 3b2:	0e 15       	cp	r16, r14
 3b4:	1f 05       	cpc	r17, r15
 3b6:	a8 f3       	brcs	.-22     	; 0x3a2 <_Z14MFRC522_ToCardhPhhS_Pj+0x14c>
 3b8:	3b c0       	rjmp	.+118    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3ba:	6c e0       	ldi	r22, 0x0C	; 12
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 3c2:	0f 2e       	mov	r0, r31
 3c4:	f0 e3       	ldi	r31, 0x30	; 48
 3c6:	7f 2e       	mov	r7, r31
 3c8:	f0 2d       	mov	r31, r0
 3ca:	0f 2e       	mov	r0, r31
 3cc:	f7 e7       	ldi	r31, 0x77	; 119
 3ce:	8f 2e       	mov	r8, r31
 3d0:	f0 2d       	mov	r31, r0
 3d2:	90 cf       	rjmp	.-224    	; 0x2f4 <_Z14MFRC522_ToCardhPhhS_Pj+0x9e>
 3d4:	67 ef       	ldi	r22, 0xF7	; 247
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 3dc:	60 e8       	ldi	r22, 0x80	; 128
 3de:	84 e0       	ldi	r24, 0x04	; 4
 3e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z12ClearBitMaskhh>
 3e4:	60 e8       	ldi	r22, 0x80	; 128
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z10SetBitMaskhh>
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 3f4:	d1 2c       	mov	r13, r1
 3f6:	c1 14       	cp	r12, r1
 3f8:	d1 04       	cpc	r13, r1
 3fa:	f9 f2       	breq	.-66     	; 0x3ba <_Z14MFRC522_ToCardhPhhS_Pj+0x164>
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f0 e3       	ldi	r31, 0x30	; 48
 400:	7f 2e       	mov	r7, r31
 402:	f0 2d       	mov	r31, r0
 404:	0f 2e       	mov	r0, r31
 406:	f7 e7       	ldi	r31, 0x77	; 119
 408:	8f 2e       	mov	r8, r31
 40a:	f0 2d       	mov	r31, r0
 40c:	5e cf       	rjmp	.-324    	; 0x2ca <_Z14MFRC522_ToCardhPhhS_Pj+0x74>
 40e:	60 e8       	ldi	r22, 0x80	; 128
 410:	8d e0       	ldi	r24, 0x0D	; 13
 412:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z12ClearBitMaskhh>
 416:	c2 e0       	ldi	r28, 0x02	; 2
 418:	0b c0       	rjmp	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 41a:	60 e8       	ldi	r22, 0x80	; 128
 41c:	8d e0       	ldi	r24, 0x0D	; 13
 41e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z12ClearBitMaskhh>
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z12Read_MFRC522h>
 428:	8b 71       	andi	r24, 0x1B	; 27
 42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	7b cf       	rjmp	.-266    	; 0x324 <_Z14MFRC522_ToCardhPhhS_Pj+0xce>
 42e:	c2 e0       	ldi	r28, 0x02	; 2
 430:	8c 2f       	mov	r24, r28
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	bf 90       	pop	r11
 444:	af 90       	pop	r10
 446:	9f 90       	pop	r9
 448:	8f 90       	pop	r8
 44a:	7f 90       	pop	r7
 44c:	08 95       	ret

0000044e <_Z15MFRC522_RequesthPh>:
 44e:	ef 92       	push	r14
 450:	ff 92       	push	r15
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	00 d0       	rcall	.+0      	; 0x45c <_Z15MFRC522_RequesthPh+0xe>
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	18 2f       	mov	r17, r24
 462:	7b 01       	movw	r14, r22
 464:	67 e0       	ldi	r22, 0x07	; 7
 466:	8d e0       	ldi	r24, 0x0D	; 13
 468:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 46c:	f7 01       	movw	r30, r14
 46e:	10 83       	st	Z, r17
 470:	8e 01       	movw	r16, r28
 472:	0f 5f       	subi	r16, 0xFF	; 255
 474:	1f 4f       	sbci	r17, 0xFF	; 255
 476:	97 01       	movw	r18, r14
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	b7 01       	movw	r22, r14
 47c:	8c e0       	ldi	r24, 0x0C	; 12
 47e:	0e 94 2b 01 	call	0x256	; 0x256 <_Z14MFRC522_ToCardhPhhS_Pj>
 482:	81 11       	cpse	r24, r1
 484:	07 c0       	rjmp	.+14     	; 0x494 <_Z15MFRC522_RequesthPh+0x46>
 486:	29 81       	ldd	r18, Y+1	; 0x01
 488:	3a 81       	ldd	r19, Y+2	; 0x02
 48a:	20 31       	cpi	r18, 0x10	; 16
 48c:	31 05       	cpc	r19, r1
 48e:	19 f0       	breq	.+6      	; 0x496 <_Z15MFRC522_RequesthPh+0x48>
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	01 c0       	rjmp	.+2      	; 0x496 <_Z15MFRC522_RequesthPh+0x48>
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	08 95       	ret

000004a8 <_Z16MFRC522_AnticollPh>:
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <_Z16MFRC522_AnticollPh+0xe>
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	7c 01       	movw	r14, r24
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	8d e0       	ldi	r24, 0x0D	; 13
 4c0:	0e 94 ca 00 	call	0x194	; 0x194 <_Z13Write_MFRC522hh>
 4c4:	83 e9       	ldi	r24, 0x93	; 147
 4c6:	f7 01       	movw	r30, r14
 4c8:	80 83       	st	Z, r24
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	81 83       	std	Z+1, r24	; 0x01
 4ce:	8e 01       	movw	r16, r28
 4d0:	0f 5f       	subi	r16, 0xFF	; 255
 4d2:	1f 4f       	sbci	r17, 0xFF	; 255
 4d4:	97 01       	movw	r18, r14
 4d6:	42 e0       	ldi	r20, 0x02	; 2
 4d8:	b7 01       	movw	r22, r14
 4da:	8c e0       	ldi	r24, 0x0C	; 12
 4dc:	0e 94 2b 01 	call	0x256	; 0x256 <_Z14MFRC522_ToCardhPhhS_Pj>
 4e0:	81 11       	cpse	r24, r1
 4e2:	0e c0       	rjmp	.+28     	; 0x500 <_Z16MFRC522_AnticollPh+0x58>
 4e4:	f7 01       	movw	r30, r14
 4e6:	a7 01       	movw	r20, r14
 4e8:	4c 5f       	subi	r20, 0xFC	; 252
 4ea:	5f 4f       	sbci	r21, 0xFF	; 255
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	21 91       	ld	r18, Z+
 4f0:	92 27       	eor	r25, r18
 4f2:	e4 17       	cp	r30, r20
 4f4:	f5 07       	cpc	r31, r21
 4f6:	d9 f7       	brne	.-10     	; 0x4ee <_Z16MFRC522_AnticollPh+0x46>
 4f8:	f7 01       	movw	r30, r14
 4fa:	24 81       	ldd	r18, Z+4	; 0x04
 4fc:	92 13       	cpse	r25, r18
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	ff 90       	pop	r15
 50e:	ef 90       	pop	r14
 510:	08 95       	ret

00000512 <_Z7readingv>:
		}
		_delay_ms(500);
	}
}

bool reading(){
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	28 97       	sbiw	r28, 0x08	; 8
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
	bool state=0;
	uint8_t ReadingCard [8]={};
 526:	fe 01       	movw	r30, r28
 528:	31 96       	adiw	r30, 0x01	; 1
 52a:	88 e0       	ldi	r24, 0x08	; 8
 52c:	df 01       	movw	r26, r30
 52e:	1d 92       	st	X+, r1
 530:	8a 95       	dec	r24
 532:	e9 f7       	brne	.-6      	; 0x52e <_Z7readingv+0x1c>
	
	//Find cards, return card type - Don't remove this sub
	status = MFRC522_Request(PICC_REQIDL, str);
 534:	61 e2       	ldi	r22, 0x21	; 33
 536:	71 e0       	ldi	r23, 0x01	; 1
 538:	86 e2       	ldi	r24, 0x26	; 38
 53a:	0e 94 27 02 	call	0x44e	; 0x44e <_Z15MFRC522_RequesthPh>
 53e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
	//Anti-collision, return card serial number 4 bytes
	status = MFRC522_Anticoll(str);
 542:	81 e2       	ldi	r24, 0x21	; 33
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_Z16MFRC522_AnticollPh>
 54a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
	memcpy(serNum, str, 5);
 54e:	95 e0       	ldi	r25, 0x05	; 5
 550:	e1 e2       	ldi	r30, 0x21	; 33
 552:	f1 e0       	ldi	r31, 0x01	; 1
 554:	a3 e4       	ldi	r26, 0x43	; 67
 556:	b1 e0       	ldi	r27, 0x01	; 1
 558:	01 90       	ld	r0, Z+
 55a:	0d 92       	st	X+, r0
 55c:	9a 95       	dec	r25
 55e:	e1 f7       	brne	.-8      	; 0x558 <_Z7readingv+0x46>
	
	if (status == MI_OK)   //if ther is a new card detected
 560:	81 11       	cpse	r24, r1
 562:	1b c0       	rjmp	.+54     	; 0x59a <_Z7readingv+0x88>
	{
		
		SetFormatRDM630(); // take serNum and format it and retern read
 564:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z15SetFormatRDM630v>
 568:	e1 e3       	ldi	r30, 0x31	; 49
 56a:	f1 e0       	ldi	r31, 0x01	; 1
 56c:	de 01       	movw	r26, r28
 56e:	11 96       	adiw	r26, 0x01	; 1
 570:	29 e3       	ldi	r18, 0x39	; 57
 572:	31 e0       	ldi	r19, 0x01	; 1
		for(uint8_t i=0;i<8;i++){
			ReadingCard[i]=read[i];
 574:	81 91       	ld	r24, Z+
 576:	8d 93       	st	X+, r24
	
	if (status == MI_OK)   //if ther is a new card detected
	{
		
		SetFormatRDM630(); // take serNum and format it and retern read
		for(uint8_t i=0;i<8;i++){
 578:	e2 17       	cp	r30, r18
 57a:	f3 07       	cpc	r31, r19
 57c:	d9 f7       	brne	.-10     	; 0x574 <_Z7readingv+0x62>
 57e:	e0 e0       	ldi	r30, 0x00	; 0
 580:	f1 e0       	ldi	r31, 0x01	; 1
 582:	20 e2       	ldi	r18, 0x20	; 32
 584:	31 e0       	ldi	r19, 0x01	; 1
			
		}

		for(uint8_t i=0;i<4;i++){
		for(uint8_t j=0;j<8;j++){
			if (ReadingCard[j]==eepromR[i][j])
 586:	98 85       	ldd	r25, Y+8	; 0x08
			else
			{
				state=0;
			}
		}
		if (state==1)
 588:	87 81       	ldd	r24, Z+7	; 0x07
 58a:	98 17       	cp	r25, r24
 58c:	41 f0       	breq	.+16     	; 0x59e <_Z7readingv+0x8c>
 58e:	38 96       	adiw	r30, 0x08	; 8
		for(uint8_t i=0;i<8;i++){
			ReadingCard[i]=read[i];
			
		}

		for(uint8_t i=0;i<4;i++){
 590:	e2 17       	cp	r30, r18
 592:	f3 07       	cpc	r31, r19
 594:	c9 f7       	brne	.-14     	; 0x588 <_Z7readingv+0x76>
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <_Z7readingv+0x8e>
		_delay_ms(500);
	}
}

bool reading(){
	bool state=0;
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <_Z7readingv+0x8e>
 59e:	81 e0       	ldi	r24, 0x01	; 1
		
		}
		
	}
		return state;
}
 5a0:	28 96       	adiw	r28, 0x08	; 8
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	08 95       	ret

000005b2 <_Z7newCardv>:
	
	


void newCard(){
	DDRB|=(1<<6);
 5b2:	26 9a       	sbi	0x04, 6	; 4
	PORTB|=(1<<6);
 5b4:	2e 9a       	sbi	0x05, 6	; 5

	
	SPI_Init();
 5b6:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8SPI_Initv>
	MFRC522_Init();   // Initialize RC522 module
 5ba:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z12MFRC522_Initv>
	
	/*one*/
	PORTB|=(1<<6);
 5be:	2e 9a       	sbi	0x05, 6	; 5
	while(1){
		status = MFRC522_Request(PICC_REQIDL, str);
 5c0:	61 e2       	ldi	r22, 0x21	; 33
 5c2:	71 e0       	ldi	r23, 0x01	; 1
 5c4:	86 e2       	ldi	r24, 0x26	; 38
 5c6:	0e 94 27 02 	call	0x44e	; 0x44e <_Z15MFRC522_RequesthPh>
 5ca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
		//Anti-collision, return card serial number 4 bytes
		status = MFRC522_Anticoll(str);
 5ce:	81 e2       	ldi	r24, 0x21	; 33
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_Z16MFRC522_AnticollPh>
 5d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
		memcpy(serNum, str, 5);
 5da:	95 e0       	ldi	r25, 0x05	; 5
 5dc:	e1 e2       	ldi	r30, 0x21	; 33
 5de:	f1 e0       	ldi	r31, 0x01	; 1
 5e0:	a3 e4       	ldi	r26, 0x43	; 67
 5e2:	b1 e0       	ldi	r27, 0x01	; 1
 5e4:	01 90       	ld	r0, Z+
 5e6:	0d 92       	st	X+, r0
 5e8:	9a 95       	dec	r25
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <_Z7newCardv+0x32>

		if (status == MI_OK)   //if ther is a new card detected
 5ec:	81 11       	cpse	r24, r1
 5ee:	e8 cf       	rjmp	.-48     	; 0x5c0 <_Z7newCardv+0xe>
		{
			SetFormatRDM630(); // take serNum and format it and retern read
 5f0:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z15SetFormatRDM630v>
 5f4:	01 e3       	ldi	r16, 0x31	; 49
 5f6:	11 e0       	ldi	r17, 0x01	; 1
 5f8:	78 01       	movw	r14, r16
 5fa:	c0 e0       	ldi	r28, 0x00	; 0
 5fc:	d0 e0       	ldi	r29, 0x00	; 0
			for(uint8_t i=0;i<8;i++){
				eeprom_write_byte((uint8_t*)(0+i),read[i]);
 5fe:	f7 01       	movw	r30, r14
 600:	61 91       	ld	r22, Z+
 602:	7f 01       	movw	r14, r30
 604:	ce 01       	movw	r24, r28
 606:	0e 94 74 04 	call	0x8e8	; 0x8e8 <eeprom_write_byte>
 60a:	21 96       	adiw	r28, 0x01	; 1
		memcpy(serNum, str, 5);

		if (status == MI_OK)   //if ther is a new card detected
		{
			SetFormatRDM630(); // take serNum and format it and retern read
			for(uint8_t i=0;i<8;i++){
 60c:	c8 30       	cpi	r28, 0x08	; 8
 60e:	d1 05       	cpc	r29, r1
 610:	b1 f7       	brne	.-20     	; 0x5fe <_Z7newCardv+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 612:	ff ef       	ldi	r31, 0xFF	; 255
 614:	24 e3       	ldi	r18, 0x34	; 52
 616:	3c e0       	ldi	r19, 0x0C	; 12
 618:	f1 50       	subi	r31, 0x01	; 1
 61a:	20 40       	sbci	r18, 0x00	; 0
 61c:	30 40       	sbci	r19, 0x00	; 0
 61e:	e1 f7       	brne	.-8      	; 0x618 <_Z7newCardv+0x66>
 620:	00 c0       	rjmp	.+0      	; 0x622 <_Z7newCardv+0x70>
 622:	00 00       	nop
 624:	89 e1       	ldi	r24, 0x19	; 25
		}
		
	}
	_delay_ms(500);
	for(uint8_t i=0;i<25;i++){
		PORTB|=(1<<6);
 626:	2e 9a       	sbi	0x05, 6	; 5
 628:	9f ef       	ldi	r25, 0xFF	; 255
 62a:	e0 e7       	ldi	r30, 0x70	; 112
 62c:	f2 e0       	ldi	r31, 0x02	; 2
 62e:	91 50       	subi	r25, 0x01	; 1
 630:	e0 40       	sbci	r30, 0x00	; 0
 632:	f0 40       	sbci	r31, 0x00	; 0
 634:	e1 f7       	brne	.-8      	; 0x62e <_Z7newCardv+0x7c>
 636:	00 c0       	rjmp	.+0      	; 0x638 <_Z7newCardv+0x86>
 638:	00 00       	nop
		_delay_ms(100);
		PORTB&=~(1<<6);
 63a:	2e 98       	cbi	0x05, 6	; 5
 63c:	2f ef       	ldi	r18, 0xFF	; 255
 63e:	30 e7       	ldi	r19, 0x70	; 112
 640:	92 e0       	ldi	r25, 0x02	; 2
 642:	21 50       	subi	r18, 0x01	; 1
 644:	30 40       	sbci	r19, 0x00	; 0
 646:	90 40       	sbci	r25, 0x00	; 0
 648:	e1 f7       	brne	.-8      	; 0x642 <_Z7newCardv+0x90>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <_Z7newCardv+0x9a>
 64c:	00 00       	nop
 64e:	81 50       	subi	r24, 0x01	; 1
			
		}
		
	}
	_delay_ms(500);
	for(uint8_t i=0;i<25;i++){
 650:	51 f7       	brne	.-44     	; 0x626 <_Z7newCardv+0x74>
 652:	ef ef       	ldi	r30, 0xFF	; 255
 654:	f3 ed       	ldi	r31, 0xD3	; 211
 656:	20 e3       	ldi	r18, 0x30	; 48
 658:	e1 50       	subi	r30, 0x01	; 1
 65a:	f0 40       	sbci	r31, 0x00	; 0
 65c:	20 40       	sbci	r18, 0x00	; 0
 65e:	e1 f7       	brne	.-8      	; 0x658 <_Z7newCardv+0xa6>
 660:	00 c0       	rjmp	.+0      	; 0x662 <_Z7newCardv+0xb0>
 662:	00 00       	nop
		_delay_ms(100);
	}
	
	/*two*/
	_delay_ms(2000);
	PORTB|=(1<<6);
 664:	2e 9a       	sbi	0x05, 6	; 5
	while(1){
		status = MFRC522_Request(PICC_REQIDL, str);
 666:	61 e2       	ldi	r22, 0x21	; 33
 668:	71 e0       	ldi	r23, 0x01	; 1
 66a:	86 e2       	ldi	r24, 0x26	; 38
 66c:	0e 94 27 02 	call	0x44e	; 0x44e <_Z15MFRC522_RequesthPh>
 670:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
		//Anti-collision, return card serial number 4 bytes
		status = MFRC522_Anticoll(str);
 674:	81 e2       	ldi	r24, 0x21	; 33
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_Z16MFRC522_AnticollPh>
 67c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
		memcpy(serNum, str, 5);
 680:	95 e0       	ldi	r25, 0x05	; 5
 682:	e1 e2       	ldi	r30, 0x21	; 33
 684:	f1 e0       	ldi	r31, 0x01	; 1
 686:	a3 e4       	ldi	r26, 0x43	; 67
 688:	b1 e0       	ldi	r27, 0x01	; 1
 68a:	01 90       	ld	r0, Z+
 68c:	0d 92       	st	X+, r0
 68e:	9a 95       	dec	r25
 690:	e1 f7       	brne	.-8      	; 0x68a <_Z7newCardv+0xd8>

		if (status == MI_OK)   //if ther is a new card detected
 692:	81 11       	cpse	r24, r1
 694:	e8 cf       	rjmp	.-48     	; 0x666 <_Z7newCardv+0xb4>
		{
			SetFormatRDM630(); // take serNum and format it and retern read
 696:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z15SetFormatRDM630v>
 69a:	0f 2e       	mov	r0, r31
 69c:	f1 e3       	ldi	r31, 0x31	; 49
 69e:	ef 2e       	mov	r14, r31
 6a0:	f1 e0       	ldi	r31, 0x01	; 1
 6a2:	ff 2e       	mov	r15, r31
 6a4:	f0 2d       	mov	r31, r0
			for(uint8_t i=0;i<8;i++){
				eeprom_write_byte((uint8_t*)(8+i),read[i]);
 6a6:	f7 01       	movw	r30, r14
 6a8:	61 91       	ld	r22, Z+
 6aa:	7f 01       	movw	r14, r30
 6ac:	ce 01       	movw	r24, r28
 6ae:	0e 94 74 04 	call	0x8e8	; 0x8e8 <eeprom_write_byte>
 6b2:	21 96       	adiw	r28, 0x01	; 1
		memcpy(serNum, str, 5);

		if (status == MI_OK)   //if ther is a new card detected
		{
			SetFormatRDM630(); // take serNum and format it and retern read
			for(uint8_t i=0;i<8;i++){
 6b4:	c0 31       	cpi	r28, 0x10	; 16
 6b6:	d1 05       	cpc	r29, r1
 6b8:	b1 f7       	brne	.-20     	; 0x6a6 <_Z7newCardv+0xf4>
 6ba:	ff ef       	ldi	r31, 0xFF	; 255
 6bc:	24 e3       	ldi	r18, 0x34	; 52
 6be:	3c e0       	ldi	r19, 0x0C	; 12
 6c0:	f1 50       	subi	r31, 0x01	; 1
 6c2:	20 40       	sbci	r18, 0x00	; 0
 6c4:	30 40       	sbci	r19, 0x00	; 0
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <_Z7newCardv+0x10e>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <_Z7newCardv+0x118>
 6ca:	00 00       	nop
 6cc:	89 e1       	ldi	r24, 0x19	; 25
	}
	
	
	_delay_ms(500);
	for(uint8_t i=0;i<25;i++){
		PORTB|=(1<<6);
 6ce:	2e 9a       	sbi	0x05, 6	; 5
 6d0:	9f ef       	ldi	r25, 0xFF	; 255
 6d2:	e0 e7       	ldi	r30, 0x70	; 112
 6d4:	f2 e0       	ldi	r31, 0x02	; 2
 6d6:	91 50       	subi	r25, 0x01	; 1
 6d8:	e0 40       	sbci	r30, 0x00	; 0
 6da:	f0 40       	sbci	r31, 0x00	; 0
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <_Z7newCardv+0x124>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <_Z7newCardv+0x12e>
 6e0:	00 00       	nop
		_delay_ms(100);
		PORTB&=~(1<<6);
 6e2:	2e 98       	cbi	0x05, 6	; 5
 6e4:	2f ef       	ldi	r18, 0xFF	; 255
 6e6:	30 e7       	ldi	r19, 0x70	; 112
 6e8:	92 e0       	ldi	r25, 0x02	; 2
 6ea:	21 50       	subi	r18, 0x01	; 1
 6ec:	30 40       	sbci	r19, 0x00	; 0
 6ee:	90 40       	sbci	r25, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <_Z7newCardv+0x138>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <_Z7newCardv+0x142>
 6f4:	00 00       	nop
 6f6:	81 50       	subi	r24, 0x01	; 1
		
	}
	
	
	_delay_ms(500);
	for(uint8_t i=0;i<25;i++){
 6f8:	51 f7       	brne	.-44     	; 0x6ce <_Z7newCardv+0x11c>
 6fa:	ef ef       	ldi	r30, 0xFF	; 255
 6fc:	f3 ed       	ldi	r31, 0xD3	; 211
 6fe:	20 e3       	ldi	r18, 0x30	; 48
 700:	e1 50       	subi	r30, 0x01	; 1
 702:	f0 40       	sbci	r31, 0x00	; 0
 704:	20 40       	sbci	r18, 0x00	; 0
 706:	e1 f7       	brne	.-8      	; 0x700 <_Z7newCardv+0x14e>
 708:	00 c0       	rjmp	.+0      	; 0x70a <_Z7newCardv+0x158>
 70a:	00 00       	nop
		_delay_ms(100);
	}
	
	/*three*/
	_delay_ms(2000);
	PORTB|=(1<<6);
 70c:	2e 9a       	sbi	0x05, 6	; 5
	while(1){
		status = MFRC522_Request(PICC_REQIDL, str);
 70e:	61 e2       	ldi	r22, 0x21	; 33
 710:	71 e0       	ldi	r23, 0x01	; 1
 712:	86 e2       	ldi	r24, 0x26	; 38
 714:	0e 94 27 02 	call	0x44e	; 0x44e <_Z15MFRC522_RequesthPh>
 718:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
		//Anti-collision, return card serial number 4 bytes
		status = MFRC522_Anticoll(str);
 71c:	81 e2       	ldi	r24, 0x21	; 33
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_Z16MFRC522_AnticollPh>
 724:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
		memcpy(serNum, str, 5);
 728:	95 e0       	ldi	r25, 0x05	; 5
 72a:	e1 e2       	ldi	r30, 0x21	; 33
 72c:	f1 e0       	ldi	r31, 0x01	; 1
 72e:	a3 e4       	ldi	r26, 0x43	; 67
 730:	b1 e0       	ldi	r27, 0x01	; 1
 732:	01 90       	ld	r0, Z+
 734:	0d 92       	st	X+, r0
 736:	9a 95       	dec	r25
 738:	e1 f7       	brne	.-8      	; 0x732 <_Z7newCardv+0x180>

		if (status == MI_OK)   //if ther is a new card detected
 73a:	81 11       	cpse	r24, r1
 73c:	e8 cf       	rjmp	.-48     	; 0x70e <_Z7newCardv+0x15c>
		{
			SetFormatRDM630(); // take serNum and format it and retern read
 73e:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z15SetFormatRDM630v>
 742:	0f 2e       	mov	r0, r31
 744:	f1 e3       	ldi	r31, 0x31	; 49
 746:	ef 2e       	mov	r14, r31
 748:	f1 e0       	ldi	r31, 0x01	; 1
 74a:	ff 2e       	mov	r15, r31
 74c:	f0 2d       	mov	r31, r0
			for(uint8_t i=0;i<8;i++){
				eeprom_write_byte((uint8_t*)(16+i),read[i]);
 74e:	f7 01       	movw	r30, r14
 750:	61 91       	ld	r22, Z+
 752:	7f 01       	movw	r14, r30
 754:	ce 01       	movw	r24, r28
 756:	0e 94 74 04 	call	0x8e8	; 0x8e8 <eeprom_write_byte>
 75a:	21 96       	adiw	r28, 0x01	; 1
		memcpy(serNum, str, 5);

		if (status == MI_OK)   //if ther is a new card detected
		{
			SetFormatRDM630(); // take serNum and format it and retern read
			for(uint8_t i=0;i<8;i++){
 75c:	c8 31       	cpi	r28, 0x18	; 24
 75e:	d1 05       	cpc	r29, r1
 760:	b1 f7       	brne	.-20     	; 0x74e <_Z7newCardv+0x19c>
 762:	ff ef       	ldi	r31, 0xFF	; 255
 764:	24 e3       	ldi	r18, 0x34	; 52
 766:	3c e0       	ldi	r19, 0x0C	; 12
 768:	f1 50       	subi	r31, 0x01	; 1
 76a:	20 40       	sbci	r18, 0x00	; 0
 76c:	30 40       	sbci	r19, 0x00	; 0
 76e:	e1 f7       	brne	.-8      	; 0x768 <_Z7newCardv+0x1b6>
 770:	00 c0       	rjmp	.+0      	; 0x772 <_Z7newCardv+0x1c0>
 772:	00 00       	nop
 774:	89 e1       	ldi	r24, 0x19	; 25
		
	}
	
	_delay_ms(500);
	for(uint8_t i=0;i<25;i++){
		PORTB|=(1<<6);
 776:	2e 9a       	sbi	0x05, 6	; 5
 778:	9f ef       	ldi	r25, 0xFF	; 255
 77a:	e0 e7       	ldi	r30, 0x70	; 112
 77c:	f2 e0       	ldi	r31, 0x02	; 2
 77e:	91 50       	subi	r25, 0x01	; 1
 780:	e0 40       	sbci	r30, 0x00	; 0
 782:	f0 40       	sbci	r31, 0x00	; 0
 784:	e1 f7       	brne	.-8      	; 0x77e <_Z7newCardv+0x1cc>
 786:	00 c0       	rjmp	.+0      	; 0x788 <_Z7newCardv+0x1d6>
 788:	00 00       	nop
		_delay_ms(100);
		PORTB&=~(1<<6);
 78a:	2e 98       	cbi	0x05, 6	; 5
 78c:	2f ef       	ldi	r18, 0xFF	; 255
 78e:	30 e7       	ldi	r19, 0x70	; 112
 790:	92 e0       	ldi	r25, 0x02	; 2
 792:	21 50       	subi	r18, 0x01	; 1
 794:	30 40       	sbci	r19, 0x00	; 0
 796:	90 40       	sbci	r25, 0x00	; 0
 798:	e1 f7       	brne	.-8      	; 0x792 <_Z7newCardv+0x1e0>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <_Z7newCardv+0x1ea>
 79c:	00 00       	nop
 79e:	81 50       	subi	r24, 0x01	; 1
		}
		
	}
	
	_delay_ms(500);
	for(uint8_t i=0;i<25;i++){
 7a0:	51 f7       	brne	.-44     	; 0x776 <_Z7newCardv+0x1c4>
 7a2:	ef ef       	ldi	r30, 0xFF	; 255
 7a4:	f3 ed       	ldi	r31, 0xD3	; 211
 7a6:	20 e3       	ldi	r18, 0x30	; 48
 7a8:	e1 50       	subi	r30, 0x01	; 1
 7aa:	f0 40       	sbci	r31, 0x00	; 0
 7ac:	20 40       	sbci	r18, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <_Z7newCardv+0x1f6>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <_Z7newCardv+0x200>
 7b2:	00 00       	nop
		_delay_ms(100);
	}
	
	/*four*/
	_delay_ms(2000);
	PORTB|=(1<<6);
 7b4:	2e 9a       	sbi	0x05, 6	; 5
	while(1){
		status = MFRC522_Request(PICC_REQIDL, str);
 7b6:	61 e2       	ldi	r22, 0x21	; 33
 7b8:	71 e0       	ldi	r23, 0x01	; 1
 7ba:	86 e2       	ldi	r24, 0x26	; 38
 7bc:	0e 94 27 02 	call	0x44e	; 0x44e <_Z15MFRC522_RequesthPh>
 7c0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
		//Anti-collision, return card serial number 4 bytes
		status = MFRC522_Anticoll(str);
 7c4:	81 e2       	ldi	r24, 0x21	; 33
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_Z16MFRC522_AnticollPh>
 7cc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <status>
		memcpy(serNum, str, 5);
 7d0:	95 e0       	ldi	r25, 0x05	; 5
 7d2:	e1 e2       	ldi	r30, 0x21	; 33
 7d4:	f1 e0       	ldi	r31, 0x01	; 1
 7d6:	a3 e4       	ldi	r26, 0x43	; 67
 7d8:	b1 e0       	ldi	r27, 0x01	; 1
 7da:	01 90       	ld	r0, Z+
 7dc:	0d 92       	st	X+, r0
 7de:	9a 95       	dec	r25
 7e0:	e1 f7       	brne	.-8      	; 0x7da <_Z7newCardv+0x228>

		if (status == MI_OK)   //if ther is a new card detected
 7e2:	81 11       	cpse	r24, r1
 7e4:	e8 cf       	rjmp	.-48     	; 0x7b6 <_Z7newCardv+0x204>
		{
			SetFormatRDM630(); // take serNum and format it and retern read
 7e6:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z15SetFormatRDM630v>
			for(uint8_t i=0;i<8;i++){
				eeprom_write_byte((uint8_t*)(24+i),read[i]);
 7ea:	f8 01       	movw	r30, r16
 7ec:	61 91       	ld	r22, Z+
 7ee:	8f 01       	movw	r16, r30
 7f0:	ce 01       	movw	r24, r28
 7f2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <eeprom_write_byte>
 7f6:	21 96       	adiw	r28, 0x01	; 1
		memcpy(serNum, str, 5);

		if (status == MI_OK)   //if ther is a new card detected
		{
			SetFormatRDM630(); // take serNum and format it and retern read
			for(uint8_t i=0;i<8;i++){
 7f8:	c0 32       	cpi	r28, 0x20	; 32
 7fa:	d1 05       	cpc	r29, r1
 7fc:	b1 f7       	brne	.-20     	; 0x7ea <_Z7newCardv+0x238>
 7fe:	ff ef       	ldi	r31, 0xFF	; 255
 800:	24 e3       	ldi	r18, 0x34	; 52
 802:	3c e0       	ldi	r19, 0x0C	; 12
 804:	f1 50       	subi	r31, 0x01	; 1
 806:	20 40       	sbci	r18, 0x00	; 0
 808:	30 40       	sbci	r19, 0x00	; 0
 80a:	e1 f7       	brne	.-8      	; 0x804 <_Z7newCardv+0x252>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <_Z7newCardv+0x25c>
 80e:	00 00       	nop
 810:	89 e1       	ldi	r24, 0x19	; 25
		}
		
	}
	_delay_ms(500);
	for(uint8_t i=0;i<25;i++){
		PORTB|=(1<<6);
 812:	2e 9a       	sbi	0x05, 6	; 5
 814:	9f ef       	ldi	r25, 0xFF	; 255
 816:	e0 e7       	ldi	r30, 0x70	; 112
 818:	f2 e0       	ldi	r31, 0x02	; 2
 81a:	91 50       	subi	r25, 0x01	; 1
 81c:	e0 40       	sbci	r30, 0x00	; 0
 81e:	f0 40       	sbci	r31, 0x00	; 0
 820:	e1 f7       	brne	.-8      	; 0x81a <_Z7newCardv+0x268>
 822:	00 c0       	rjmp	.+0      	; 0x824 <_Z7newCardv+0x272>
 824:	00 00       	nop
		_delay_ms(100);
		PORTB&=~(1<<6);
 826:	2e 98       	cbi	0x05, 6	; 5
 828:	2f ef       	ldi	r18, 0xFF	; 255
 82a:	30 e7       	ldi	r19, 0x70	; 112
 82c:	92 e0       	ldi	r25, 0x02	; 2
 82e:	21 50       	subi	r18, 0x01	; 1
 830:	30 40       	sbci	r19, 0x00	; 0
 832:	90 40       	sbci	r25, 0x00	; 0
 834:	e1 f7       	brne	.-8      	; 0x82e <_Z7newCardv+0x27c>
 836:	00 c0       	rjmp	.+0      	; 0x838 <_Z7newCardv+0x286>
 838:	00 00       	nop
 83a:	81 50       	subi	r24, 0x01	; 1
			
		}
		
	}
	_delay_ms(500);
	for(uint8_t i=0;i<25;i++){
 83c:	51 f7       	brne	.-44     	; 0x812 <_Z7newCardv+0x260>
		PORTB|=(1<<6);
		_delay_ms(100);
		PORTB&=~(1<<6);
		_delay_ms(100);
	}
	PORTB&=~(1<<6);
 83e:	2e 98       	cbi	0x05, 6	; 5
 840:	ff cf       	rjmp	.-2      	; 0x840 <_Z7newCardv+0x28e>

00000842 <main>:


int main(void)
{	
	/*init card*/
	DDRC&=~(1<<0);
 842:	38 98       	cbi	0x07, 0	; 7
	PORTC|=(1<<0);
 844:	40 9a       	sbi	0x08, 0	; 8
 846:	2f ef       	ldi	r18, 0xFF	; 255
 848:	80 e7       	ldi	r24, 0x70	; 112
 84a:	92 e0       	ldi	r25, 0x02	; 2
 84c:	21 50       	subi	r18, 0x01	; 1
 84e:	80 40       	sbci	r24, 0x00	; 0
 850:	90 40       	sbci	r25, 0x00	; 0
 852:	e1 f7       	brne	.-8      	; 0x84c <main+0xa>
 854:	00 c0       	rjmp	.+0      	; 0x856 <main+0x14>
 856:	00 00       	nop
	_delay_ms(100);
	if (!((PINC&(1<<0))>>0))//programming mode
 858:	30 9b       	sbis	0x06, 0	; 6
	{	newCard();
 85a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_Z7newCardv>
	}
	/*end initcard*/
	

   
   DDRB|=(1<<0);
 85e:	20 9a       	sbi	0x04, 0	; 4
   PORTB&=~(1<<0);
 860:	28 98       	cbi	0x05, 0	; 5
 862:	ef ef       	ldi	r30, 0xFF	; 255
 864:	f9 e6       	ldi	r31, 0x69	; 105
 866:	28 e1       	ldi	r18, 0x18	; 24
 868:	e1 50       	subi	r30, 0x01	; 1
 86a:	f0 40       	sbci	r31, 0x00	; 0
 86c:	20 40       	sbci	r18, 0x00	; 0
 86e:	e1 f7       	brne	.-8      	; 0x868 <main+0x26>
 870:	00 c0       	rjmp	.+0      	; 0x872 <main+0x30>
 872:	00 00       	nop
 874:	c0 e0       	ldi	r28, 0x00	; 0
 876:	d0 e0       	ldi	r29, 0x00	; 0
 878:	8e 01       	movw	r16, r28
 87a:	00 50       	subi	r16, 0x00	; 0
 87c:	1f 4f       	sbci	r17, 0xFF	; 255
 87e:	7e 01       	movw	r14, r28
 880:	88 e0       	ldi	r24, 0x08	; 8
 882:	e8 0e       	add	r14, r24
 884:	f1 1c       	adc	r15, r1
   
   _delay_ms(1000);
   
   for(uint8_t i=0;i<4;i++){
	   for(uint8_t j=0;j<8;j++){
		   eepromR[i][j]=eeprom_read_byte((uint8_t*)((8*i)+j));
 886:	ce 01       	movw	r24, r28
 888:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <eeprom_read_byte>
 88c:	f8 01       	movw	r30, r16
 88e:	81 93       	st	Z+, r24
 890:	8f 01       	movw	r16, r30
 892:	21 96       	adiw	r28, 0x01	; 1
   PORTB&=~(1<<0);
   
   _delay_ms(1000);
   
   for(uint8_t i=0;i<4;i++){
	   for(uint8_t j=0;j<8;j++){
 894:	ce 15       	cp	r28, r14
 896:	df 05       	cpc	r29, r15
 898:	b1 f7       	brne	.-20     	; 0x886 <main+0x44>
 89a:	e7 01       	movw	r28, r14
   DDRB|=(1<<0);
   PORTB&=~(1<<0);
   
   _delay_ms(1000);
   
   for(uint8_t i=0;i<4;i++){
 89c:	c0 32       	cpi	r28, 0x20	; 32
 89e:	d1 05       	cpc	r29, r1
 8a0:	59 f7       	brne	.-42     	; 0x878 <main+0x36>
   
   
 
 
   //MFRC522_HardReset();
   SPI_Init();
 8a2:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8SPI_Initv>
   MFRC522_Init();   // Initialize RC522 module
 8a6:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z12MFRC522_Initv>
 
   
    while (1) 
    {
				
		if (reading())
 8aa:	0e 94 89 02 	call	0x512	; 0x512 <_Z7readingv>
 8ae:	88 23       	and	r24, r24
 8b0:	11 f0       	breq	.+4      	; 0x8b6 <main+0x74>
		{
			PORTB|=(1<<0);
 8b2:	28 9a       	sbi	0x05, 0	; 5
 8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <main+0x82>
		} 
		else
		{	
			if (reading())
 8b6:	0e 94 89 02 	call	0x512	; 0x512 <_Z7readingv>
 8ba:	88 23       	and	r24, r24
 8bc:	11 f0       	breq	.+4      	; 0x8c2 <main+0x80>
			{PORTB|=(1<<0);
 8be:	28 9a       	sbi	0x05, 0	; 5
 8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <main+0x82>
			} 
			else
			{PORTB&=~(1<<0);
 8c2:	28 98       	cbi	0x05, 0	; 5
 8c4:	ff ef       	ldi	r31, 0xFF	; 255
 8c6:	24 e3       	ldi	r18, 0x34	; 52
 8c8:	8c e0       	ldi	r24, 0x0C	; 12
 8ca:	f1 50       	subi	r31, 0x01	; 1
 8cc:	20 40       	sbci	r18, 0x00	; 0
 8ce:	80 40       	sbci	r24, 0x00	; 0
 8d0:	e1 f7       	brne	.-8      	; 0x8ca <main+0x88>
 8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <main+0x92>
 8d4:	00 00       	nop
 8d6:	e9 cf       	rjmp	.-46     	; 0x8aa <main+0x68>

000008d8 <eeprom_read_byte>:
 8d8:	f9 99       	sbic	0x1f, 1	; 31
 8da:	fe cf       	rjmp	.-4      	; 0x8d8 <eeprom_read_byte>
 8dc:	92 bd       	out	0x22, r25	; 34
 8de:	81 bd       	out	0x21, r24	; 33
 8e0:	f8 9a       	sbi	0x1f, 0	; 31
 8e2:	99 27       	eor	r25, r25
 8e4:	80 b5       	in	r24, 0x20	; 32
 8e6:	08 95       	ret

000008e8 <eeprom_write_byte>:
 8e8:	26 2f       	mov	r18, r22

000008ea <eeprom_write_r18>:
 8ea:	f9 99       	sbic	0x1f, 1	; 31
 8ec:	fe cf       	rjmp	.-4      	; 0x8ea <eeprom_write_r18>
 8ee:	1f ba       	out	0x1f, r1	; 31
 8f0:	92 bd       	out	0x22, r25	; 34
 8f2:	81 bd       	out	0x21, r24	; 33
 8f4:	20 bd       	out	0x20, r18	; 32
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	f8 94       	cli
 8fa:	fa 9a       	sbi	0x1f, 2	; 31
 8fc:	f9 9a       	sbi	0x1f, 1	; 31
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	08 95       	ret

00000904 <_exit>:
 904:	f8 94       	cli

00000906 <__stop_program>:
 906:	ff cf       	rjmp	.-2      	; 0x906 <__stop_program>

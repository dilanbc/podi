
dooraccess.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000890  00000924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080010a  0080010a  0000092e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000009a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002033  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000982  00000000  00000000  00002b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1d  00000000  00000000  0000349d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000490  00000000  00000000  000041bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9d  00000000  00000000  0000464c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000197c  00000000  00000000  000050e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 34       	cpi	r26, 0x4F	; 79
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 91 03 	call	0x722	; 0x722 <main>
  9e:	0c 94 46 04 	jmp	0x88c	; 0x88c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
  buff[0] = PICC_HALT;
  buff[1] = 0;
  CalulateCRC(buff, 2, &buff[2]);

  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
}
  a6:	9c 01       	movw	r18, r24
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e2       	ldi	r22, 0x20	; 32
  ae:	71 ea       	ldi	r23, 0xA1	; 161
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__udivmodsi4>
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
  bc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  c0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c4:	88 e9       	ldi	r24, 0x98	; 152
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <_Z14USART_Transmith>:
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	95 ff       	sbrs	r25, 5
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <_Z14USART_Transmith+0x4>
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e2:	08 95       	ret

000000e4 <_Z14USART_TxStringPc>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <_Z14USART_TxStringPc+0x18>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
  f6:	89 91       	ld	r24, Y+
  f8:	81 11       	cpse	r24, r1
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <_Z14USART_TxStringPc+0xe>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <_Z16USART_TxStringlnPc>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	31 f0       	breq	.+12     	; 0x11a <_Z16USART_TxStringlnPc+0x18>
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 114:	89 91       	ld	r24, Y+
 116:	81 11       	cpse	r24, r1
 118:	fb cf       	rjmp	.-10     	; 0x110 <_Z16USART_TxStringlnPc+0xe>
 11a:	8d e0       	ldi	r24, 0x0D	; 13
 11c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <_Z14USART_TxNumberlh>:
 12c:	dc 01       	movw	r26, r24
 12e:	cb 01       	movw	r24, r22
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	6e e4       	ldi	r22, 0x4E	; 78
 134:	71 e0       	ldi	r23, 0x01	; 1
 136:	0e 94 fe 03 	call	0x7fc	; 0x7fc <itoa>
 13a:	8e e4       	ldi	r24, 0x4E	; 78
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z14USART_TxStringPc>
 142:	08 95       	ret

00000144 <__vector_18>:
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
 15c:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 160:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <rxvalue>
 164:	88 23       	and	r24, r24
 166:	69 f0       	breq	.+26     	; 0x182 <__vector_18+0x3e>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	e6 5c       	subi	r30, 0xC6	; 198
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	90 81       	ld	r25, Z
 178:	91 11       	cpse	r25, r1
 17a:	f7 cf       	rjmp	.-18     	; 0x16a <__vector_18+0x26>
 17c:	84 31       	cpi	r24, 0x14	; 20
 17e:	40 f4       	brcc	.+16     	; 0x190 <__vector_18+0x4c>
 180:	02 c0       	rjmp	.+4      	; 0x186 <__vector_18+0x42>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	f9 01       	movw	r30, r18
 188:	e6 5c       	subi	r30, 0xC6	; 198
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	40 83       	st	Z, r20
 18e:	0b c0       	rjmp	.+22     	; 0x1a6 <__vector_18+0x62>
 190:	ea e3       	ldi	r30, 0x3A	; 58
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	2d e4       	ldi	r18, 0x4D	; 77
 196:	31 e0       	ldi	r19, 0x01	; 1
 198:	81 81       	ldd	r24, Z+1	; 0x01
 19a:	81 93       	st	Z+, r24
 19c:	2e 17       	cp	r18, r30
 19e:	3f 07       	cpc	r19, r31
 1a0:	d9 f7       	brne	.-10     	; 0x198 <__vector_18+0x54>
 1a2:	40 93 4d 01 	sts	0x014D, r20	; 0x80014d <rxvalue+0x13>
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <_Z8SPI_Initv>:
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	8e 62       	ori	r24, 0x2E	; 46
 1c2:	84 b9       	out	0x04, r24	; 4
 1c4:	24 98       	cbi	0x04, 4	; 4
 1c6:	2a 9a       	sbi	0x05, 2	; 5
 1c8:	81 e5       	ldi	r24, 0x51	; 81
 1ca:	8c bd       	out	0x2c, r24	; 44
 1cc:	08 95       	ret

000001ce <_Z9SPI_Writeh>:
 1ce:	8e bd       	out	0x2e, r24	; 46
 1d0:	0d b4       	in	r0, 0x2d	; 45
 1d2:	07 fe       	sbrs	r0, 7
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <_Z9SPI_Writeh+0x2>
 1d6:	8e b5       	in	r24, 0x2e	; 46
 1d8:	08 95       	ret

000001da <_Z15Separate_hexP10h>:
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	95 95       	asr	r25
 1e4:	87 95       	ror	r24
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	95 95       	asr	r25
 1ec:	87 95       	ror	r24
 1ee:	8a 30       	cpi	r24, 0x0A	; 10
 1f0:	10 f4       	brcc	.+4      	; 0x1f6 <_Z15Separate_hexP10h+0x1c>
 1f2:	80 5d       	subi	r24, 0xD0	; 208
 1f4:	08 95       	ret
 1f6:	89 5c       	subi	r24, 0xC9	; 201
 1f8:	08 95       	ret

000001fa <_Z14Separate_hexP1h>:
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	8a 30       	cpi	r24, 0x0A	; 10
 1fe:	10 f4       	brcc	.+4      	; 0x204 <_Z14Separate_hexP1h+0xa>
 200:	80 5d       	subi	r24, 0xD0	; 208
 202:	08 95       	ret
 204:	89 5c       	subi	r24, 0xC9	; 201
 206:	08 95       	ret

00000208 <_Z15SetFormatRDM630v>:
 208:	af 92       	push	r10
 20a:	bf 92       	push	r11
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	05 e3       	ldi	r16, 0x35	; 53
 21e:	11 e0       	ldi	r17, 0x01	; 1
 220:	f8 01       	movw	r30, r16
 222:	f0 80       	ld	r15, Z
 224:	8f 2d       	mov	r24, r15
 226:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z15Separate_hexP10h>
 22a:	a8 2e       	mov	r10, r24
 22c:	cd e2       	ldi	r28, 0x2D	; 45
 22e:	d1 e0       	ldi	r29, 0x01	; 1
 230:	88 83       	st	Y, r24
 232:	8f 2d       	mov	r24, r15
 234:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z14Separate_hexP1h>
 238:	b8 2e       	mov	r11, r24
 23a:	89 83       	std	Y+1, r24	; 0x01
 23c:	f8 01       	movw	r30, r16
 23e:	f1 80       	ldd	r15, Z+1	; 0x01
 240:	8f 2d       	mov	r24, r15
 242:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z15Separate_hexP10h>
 246:	c8 2e       	mov	r12, r24
 248:	8a 83       	std	Y+2, r24	; 0x02
 24a:	8f 2d       	mov	r24, r15
 24c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z14Separate_hexP1h>
 250:	d8 2e       	mov	r13, r24
 252:	8b 83       	std	Y+3, r24	; 0x03
 254:	f8 01       	movw	r30, r16
 256:	f2 80       	ldd	r15, Z+2	; 0x02
 258:	8f 2d       	mov	r24, r15
 25a:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z15Separate_hexP10h>
 25e:	e8 2e       	mov	r14, r24
 260:	8c 83       	std	Y+4, r24	; 0x04
 262:	8f 2d       	mov	r24, r15
 264:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z14Separate_hexP1h>
 268:	f8 2e       	mov	r15, r24
 26a:	8d 83       	std	Y+5, r24	; 0x05
 26c:	f8 01       	movw	r30, r16
 26e:	03 81       	ldd	r16, Z+3	; 0x03
 270:	80 2f       	mov	r24, r16
 272:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z15Separate_hexP10h>
 276:	18 2f       	mov	r17, r24
 278:	8e 83       	std	Y+6, r24	; 0x06
 27a:	80 2f       	mov	r24, r16
 27c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z14Separate_hexP1h>
 280:	8f 83       	std	Y+7, r24	; 0x07
 282:	e3 e2       	ldi	r30, 0x23	; 35
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	a0 82       	st	Z, r10
 288:	b1 82       	std	Z+1, r11	; 0x01
 28a:	c2 82       	std	Z+2, r12	; 0x02
 28c:	d3 82       	std	Z+3, r13	; 0x03
 28e:	e4 82       	std	Z+4, r14	; 0x04
 290:	f5 82       	std	Z+5, r15	; 0x05
 292:	16 83       	std	Z+6, r17	; 0x06
 294:	87 83       	std	Z+7, r24	; 0x07
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	bf 90       	pop	r11
 2a8:	af 90       	pop	r10
 2aa:	08 95       	ret

000002ac <_Z13Write_MFRC522hh>:
 2ac:	cf 93       	push	r28
 2ae:	c6 2f       	mov	r28, r22
 2b0:	2a 98       	cbi	0x05, 2	; 5
 2b2:	88 0f       	add	r24, r24
 2b4:	8e 77       	andi	r24, 0x7E	; 126
 2b6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9SPI_Writeh>
 2ba:	8c 2f       	mov	r24, r28
 2bc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9SPI_Writeh>
 2c0:	2a 9a       	sbi	0x05, 2	; 5
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <_Z12Read_MFRC522h>:
 2c6:	2a 98       	cbi	0x05, 2	; 5
 2c8:	88 0f       	add	r24, r24
 2ca:	8e 77       	andi	r24, 0x7E	; 126
 2cc:	80 68       	ori	r24, 0x80	; 128
 2ce:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9SPI_Writeh>
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9SPI_Writeh>
 2d8:	2a 9a       	sbi	0x05, 2	; 5
 2da:	08 95       	ret

000002dc <_Z10SetBitMaskhh>:
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	d8 2f       	mov	r29, r24
 2e2:	c6 2f       	mov	r28, r22
 2e4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z12Read_MFRC522h>
 2e8:	68 2f       	mov	r22, r24
 2ea:	6c 2b       	or	r22, r28
 2ec:	8d 2f       	mov	r24, r29
 2ee:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <_Z12ClearBitMaskhh>:
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	d8 2f       	mov	r29, r24
 2fe:	c6 2f       	mov	r28, r22
 300:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z12Read_MFRC522h>
 304:	c0 95       	com	r28
 306:	6c 2f       	mov	r22, r28
 308:	68 23       	and	r22, r24
 30a:	8d 2f       	mov	r24, r29
 30c:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <_Z9AntennaOnv>:
 316:	84 e1       	ldi	r24, 0x14	; 20
 318:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z12Read_MFRC522h>
 31c:	83 70       	andi	r24, 0x03	; 3
 31e:	21 f4       	brne	.+8      	; 0x328 <_Z9AntennaOnv+0x12>
 320:	63 e0       	ldi	r22, 0x03	; 3
 322:	84 e1       	ldi	r24, 0x14	; 20
 324:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z10SetBitMaskhh>
 328:	08 95       	ret

0000032a <_Z13MFRC522_Resetv>:
 32a:	6f e0       	ldi	r22, 0x0F	; 15
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 332:	08 95       	ret

00000334 <_Z12MFRC522_Initv>:
 334:	0e 94 95 01 	call	0x32a	; 0x32a <_Z13MFRC522_Resetv>
 338:	6d e8       	ldi	r22, 0x8D	; 141
 33a:	8a e2       	ldi	r24, 0x2A	; 42
 33c:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 340:	6e e3       	ldi	r22, 0x3E	; 62
 342:	8b e2       	ldi	r24, 0x2B	; 43
 344:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 348:	6e e1       	ldi	r22, 0x1E	; 30
 34a:	8d e2       	ldi	r24, 0x2D	; 45
 34c:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	8c e2       	ldi	r24, 0x2C	; 44
 354:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 358:	60 e4       	ldi	r22, 0x40	; 64
 35a:	85 e1       	ldi	r24, 0x15	; 21
 35c:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 360:	6d e3       	ldi	r22, 0x3D	; 61
 362:	81 e1       	ldi	r24, 0x11	; 17
 364:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 368:	0e 94 8b 01 	call	0x316	; 0x316 <_Z9AntennaOnv>
 36c:	08 95       	ret

0000036e <_Z14MFRC522_ToCardhPhhS_Pj>:
 36e:	7f 92       	push	r7
 370:	8f 92       	push	r8
 372:	9f 92       	push	r9
 374:	af 92       	push	r10
 376:	bf 92       	push	r11
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	b8 2e       	mov	r11, r24
 38a:	c6 2f       	mov	r28, r22
 38c:	d7 2f       	mov	r29, r23
 38e:	c4 2e       	mov	r12, r20
 390:	a2 2e       	mov	r10, r18
 392:	93 2e       	mov	r9, r19
 394:	78 01       	movw	r14, r16
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	b8 16       	cp	r11, r24
 39a:	09 f4       	brne	.+2      	; 0x39e <_Z14MFRC522_ToCardhPhhS_Pj+0x30>
 39c:	a7 c0       	rjmp	.+334    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 39e:	ee e0       	ldi	r30, 0x0E	; 14
 3a0:	be 12       	cpse	r11, r30
 3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <_Z14MFRC522_ToCardhPhhS_Pj+0x46>
 3a4:	68 94       	set
 3a6:	77 24       	eor	r7, r7
 3a8:	74 f8       	bld	r7, 4
 3aa:	0f 2e       	mov	r0, r31
 3ac:	f2 e1       	ldi	r31, 0x12	; 18
 3ae:	8f 2e       	mov	r8, r31
 3b0:	f0 2d       	mov	r31, r0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <_Z14MFRC522_ToCardhPhhS_Pj+0x4a>
 3b4:	71 2c       	mov	r7, r1
 3b6:	81 2c       	mov	r8, r1
 3b8:	68 2d       	mov	r22, r8
 3ba:	60 68       	ori	r22, 0x80	; 128
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 3c2:	60 e8       	ldi	r22, 0x80	; 128
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z12ClearBitMaskhh>
 3ca:	60 e8       	ldi	r22, 0x80	; 128
 3cc:	8a e0       	ldi	r24, 0x0A	; 10
 3ce:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z10SetBitMaskhh>
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 3da:	d1 2c       	mov	r13, r1
 3dc:	c1 14       	cp	r12, r1
 3de:	d1 04       	cpc	r13, r1
 3e0:	71 f0       	breq	.+28     	; 0x3fe <_Z14MFRC522_ToCardhPhhS_Pj+0x90>
 3e2:	0c 2f       	mov	r16, r28
 3e4:	1d 2f       	mov	r17, r29
 3e6:	c0 e0       	ldi	r28, 0x00	; 0
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	f8 01       	movw	r30, r16
 3ec:	61 91       	ld	r22, Z+
 3ee:	8f 01       	movw	r16, r30
 3f0:	89 e0       	ldi	r24, 0x09	; 9
 3f2:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 3f6:	21 96       	adiw	r28, 0x01	; 1
 3f8:	cc 15       	cp	r28, r12
 3fa:	dd 05       	cpc	r29, r13
 3fc:	b0 f3       	brcs	.-20     	; 0x3ea <_Z14MFRC522_ToCardhPhhS_Pj+0x7c>
 3fe:	6b 2d       	mov	r22, r11
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 406:	fc e0       	ldi	r31, 0x0C	; 12
 408:	bf 12       	cpse	r11, r31
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	60 e8       	ldi	r22, 0x80	; 128
 40e:	8d e0       	ldi	r24, 0x0D	; 13
 410:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z10SetBitMaskhh>
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z12Read_MFRC522h>
 41a:	18 2f       	mov	r17, r24
 41c:	cf ec       	ldi	r28, 0xCF	; 207
 41e:	d7 e0       	ldi	r29, 0x07	; 7
 420:	07 2d       	mov	r16, r7
 422:	01 60       	ori	r16, 0x01	; 1
 424:	07 c0       	rjmp	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 426:	84 e0       	ldi	r24, 0x04	; 4
 428:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z12Read_MFRC522h>
 42c:	18 2f       	mov	r17, r24
 42e:	21 97       	sbiw	r28, 0x01	; 1
 430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	79 c0       	rjmp	.+242    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 434:	80 2f       	mov	r24, r16
 436:	81 23       	and	r24, r17
 438:	b1 f3       	breq	.-20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 43a:	7b c0       	rjmp	.+246    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 43c:	88 2d       	mov	r24, r8
 43e:	81 70       	andi	r24, 0x01	; 1
 440:	18 23       	and	r17, r24
 442:	c1 e0       	ldi	r28, 0x01	; 1
 444:	09 f4       	brne	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	c0 e0       	ldi	r28, 0x00	; 0
 448:	8c e0       	ldi	r24, 0x0C	; 12
 44a:	b8 12       	cpse	r11, r24
 44c:	7d c0       	rjmp	.+250    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 44e:	8a e0       	ldi	r24, 0x0A	; 10
 450:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z12Read_MFRC522h>
 454:	d8 2f       	mov	r29, r24
 456:	8c e0       	ldi	r24, 0x0C	; 12
 458:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z12Read_MFRC522h>
 45c:	28 2f       	mov	r18, r24
 45e:	27 70       	andi	r18, 0x07	; 7
 460:	79 f0       	breq	.+30     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 462:	8d 2f       	mov	r24, r29
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	82 0f       	add	r24, r18
 476:	91 1d       	adc	r25, r1
 478:	f7 01       	movw	r30, r14
 47a:	91 83       	std	Z+1, r25	; 0x01
 47c:	80 83       	st	Z, r24
 47e:	0b c0       	rjmp	.+22     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 480:	8d 2f       	mov	r24, r29
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	f7 01       	movw	r30, r14
 492:	91 83       	std	Z+1, r25	; 0x01
 494:	80 83       	st	Z, r24
 496:	dd 23       	and	r29, r29
 498:	49 f0       	breq	.+18     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 49a:	d1 31       	cpi	r29, 0x11	; 17
 49c:	08 f0       	brcs	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49e:	d0 e1       	ldi	r29, 0x10	; 16
 4a0:	ed 2e       	mov	r14, r29
 4a2:	f1 2c       	mov	r15, r1
 4a4:	e1 14       	cp	r14, r1
 4a6:	f1 04       	cpc	r15, r1
 4a8:	21 f4       	brne	.+8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4aa:	4e c0       	rjmp	.+156    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 4ac:	ee 24       	eor	r14, r14
 4ae:	e3 94       	inc	r14
 4b0:	f1 2c       	mov	r15, r1
 4b2:	ca 2c       	mov	r12, r10
 4b4:	d9 2c       	mov	r13, r9
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	89 e0       	ldi	r24, 0x09	; 9
 4bc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z12Read_MFRC522h>
 4c0:	f6 01       	movw	r30, r12
 4c2:	81 93       	st	Z+, r24
 4c4:	6f 01       	movw	r12, r30
 4c6:	0f 5f       	subi	r16, 0xFF	; 255
 4c8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ca:	0e 15       	cp	r16, r14
 4cc:	1f 05       	cpc	r17, r15
 4ce:	a8 f3       	brcs	.-22     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4d0:	3b c0       	rjmp	.+118    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 4d2:	6c e0       	ldi	r22, 0x0C	; 12
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 4da:	0f 2e       	mov	r0, r31
 4dc:	f0 e3       	ldi	r31, 0x30	; 48
 4de:	7f 2e       	mov	r7, r31
 4e0:	f0 2d       	mov	r31, r0
 4e2:	0f 2e       	mov	r0, r31
 4e4:	f7 e7       	ldi	r31, 0x77	; 119
 4e6:	8f 2e       	mov	r8, r31
 4e8:	f0 2d       	mov	r31, r0
 4ea:	90 cf       	rjmp	.-224    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 4ec:	67 ef       	ldi	r22, 0xF7	; 247
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 4f4:	60 e8       	ldi	r22, 0x80	; 128
 4f6:	84 e0       	ldi	r24, 0x04	; 4
 4f8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z12ClearBitMaskhh>
 4fc:	60 e8       	ldi	r22, 0x80	; 128
 4fe:	8a e0       	ldi	r24, 0x0A	; 10
 500:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Z10SetBitMaskhh>
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 50c:	d1 2c       	mov	r13, r1
 50e:	c1 14       	cp	r12, r1
 510:	d1 04       	cpc	r13, r1
 512:	f9 f2       	breq	.-66     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 514:	0f 2e       	mov	r0, r31
 516:	f0 e3       	ldi	r31, 0x30	; 48
 518:	7f 2e       	mov	r7, r31
 51a:	f0 2d       	mov	r31, r0
 51c:	0f 2e       	mov	r0, r31
 51e:	f7 e7       	ldi	r31, 0x77	; 119
 520:	8f 2e       	mov	r8, r31
 522:	f0 2d       	mov	r31, r0
 524:	5e cf       	rjmp	.-324    	; 0x3e2 <_Z14MFRC522_ToCardhPhhS_Pj+0x74>
 526:	60 e8       	ldi	r22, 0x80	; 128
 528:	8d e0       	ldi	r24, 0x0D	; 13
 52a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z12ClearBitMaskhh>
 52e:	c2 e0       	ldi	r28, 0x02	; 2
 530:	0b c0       	rjmp	.+22     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 532:	60 e8       	ldi	r22, 0x80	; 128
 534:	8d e0       	ldi	r24, 0x0D	; 13
 536:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z12ClearBitMaskhh>
 53a:	86 e0       	ldi	r24, 0x06	; 6
 53c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z12Read_MFRC522h>
 540:	8b 71       	andi	r24, 0x1B	; 27
 542:	09 f4       	brne	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 544:	7b cf       	rjmp	.-266    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 546:	c2 e0       	ldi	r28, 0x02	; 2
 548:	8c 2f       	mov	r24, r28
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	bf 90       	pop	r11
 55c:	af 90       	pop	r10
 55e:	9f 90       	pop	r9
 560:	8f 90       	pop	r8
 562:	7f 90       	pop	r7
 564:	08 95       	ret

00000566 <_Z15MFRC522_RequesthPh>:
 566:	ef 92       	push	r14
 568:	ff 92       	push	r15
 56a:	0f 93       	push	r16
 56c:	1f 93       	push	r17
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	00 d0       	rcall	.+0      	; 0x574 <_Z15MFRC522_RequesthPh+0xe>
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
 578:	18 2f       	mov	r17, r24
 57a:	7b 01       	movw	r14, r22
 57c:	67 e0       	ldi	r22, 0x07	; 7
 57e:	8d e0       	ldi	r24, 0x0D	; 13
 580:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 584:	f7 01       	movw	r30, r14
 586:	10 83       	st	Z, r17
 588:	8e 01       	movw	r16, r28
 58a:	0f 5f       	subi	r16, 0xFF	; 255
 58c:	1f 4f       	sbci	r17, 0xFF	; 255
 58e:	97 01       	movw	r18, r14
 590:	41 e0       	ldi	r20, 0x01	; 1
 592:	b7 01       	movw	r22, r14
 594:	8c e0       	ldi	r24, 0x0C	; 12
 596:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z14MFRC522_ToCardhPhhS_Pj>
 59a:	81 11       	cpse	r24, r1
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <_Z15MFRC522_RequesthPh+0x46>
 59e:	29 81       	ldd	r18, Y+1	; 0x01
 5a0:	3a 81       	ldd	r19, Y+2	; 0x02
 5a2:	20 31       	cpi	r18, 0x10	; 16
 5a4:	31 05       	cpc	r19, r1
 5a6:	19 f0       	breq	.+6      	; 0x5ae <_Z15MFRC522_RequesthPh+0x48>
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_Z15MFRC522_RequesthPh+0x48>
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	ff 90       	pop	r15
 5bc:	ef 90       	pop	r14
 5be:	08 95       	ret

000005c0 <_Z16MFRC522_AnticollPh>:
 5c0:	ef 92       	push	r14
 5c2:	ff 92       	push	r15
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	00 d0       	rcall	.+0      	; 0x5ce <_Z16MFRC522_AnticollPh+0xe>
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	7c 01       	movw	r14, r24
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	8d e0       	ldi	r24, 0x0D	; 13
 5d8:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13Write_MFRC522hh>
 5dc:	83 e9       	ldi	r24, 0x93	; 147
 5de:	f7 01       	movw	r30, r14
 5e0:	80 83       	st	Z, r24
 5e2:	80 e2       	ldi	r24, 0x20	; 32
 5e4:	81 83       	std	Z+1, r24	; 0x01
 5e6:	8e 01       	movw	r16, r28
 5e8:	0f 5f       	subi	r16, 0xFF	; 255
 5ea:	1f 4f       	sbci	r17, 0xFF	; 255
 5ec:	97 01       	movw	r18, r14
 5ee:	42 e0       	ldi	r20, 0x02	; 2
 5f0:	b7 01       	movw	r22, r14
 5f2:	8c e0       	ldi	r24, 0x0C	; 12
 5f4:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z14MFRC522_ToCardhPhhS_Pj>
 5f8:	81 11       	cpse	r24, r1
 5fa:	0e c0       	rjmp	.+28     	; 0x618 <_Z16MFRC522_AnticollPh+0x58>
 5fc:	f7 01       	movw	r30, r14
 5fe:	a7 01       	movw	r20, r14
 600:	4c 5f       	subi	r20, 0xFC	; 252
 602:	5f 4f       	sbci	r21, 0xFF	; 255
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	21 91       	ld	r18, Z+
 608:	92 27       	eor	r25, r18
 60a:	e4 17       	cp	r30, r20
 60c:	f5 07       	cpc	r31, r21
 60e:	d9 f7       	brne	.-10     	; 0x606 <_Z16MFRC522_AnticollPh+0x46>
 610:	f7 01       	movw	r30, r14
 612:	24 81       	ldd	r18, Z+4	; 0x04
 614:	92 13       	cpse	r25, r18
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	ff 90       	pop	r15
 626:	ef 90       	pop	r14
 628:	08 95       	ret

0000062a <_Z7readingv>:
uchar status;
uint8_t eepromR[8];



bool reading(){
 62a:	cf 92       	push	r12
 62c:	df 92       	push	r13
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
 63e:	28 97       	sbiw	r28, 0x08	; 8
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	de bf       	out	0x3e, r29	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	cd bf       	out	0x3d, r28	; 61
	bool state=0;
	uint8_t ReadingCard [8]={};
 64a:	fe 01       	movw	r30, r28
 64c:	31 96       	adiw	r30, 0x01	; 1
 64e:	88 e0       	ldi	r24, 0x08	; 8
 650:	df 01       	movw	r26, r30
 652:	1d 92       	st	X+, r1
 654:	8a 95       	dec	r24
 656:	e9 f7       	brne	.-6      	; 0x652 <_Z7readingv+0x28>
	
	//Find cards, return card type - Don't remove this sub
	status = MFRC522_Request(PICC_REQIDL, str);
 658:	63 e1       	ldi	r22, 0x13	; 19
 65a:	71 e0       	ldi	r23, 0x01	; 1
 65c:	86 e2       	ldi	r24, 0x26	; 38
 65e:	0e 94 b3 02 	call	0x566	; 0x566 <_Z15MFRC522_RequesthPh>
 662:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <status>
	//Anti-collision, return card serial number 4 bytes
	status = MFRC522_Anticoll(str);
 666:	83 e1       	ldi	r24, 0x13	; 19
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z16MFRC522_AnticollPh>
 66e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <status>
	memcpy(serNum, str, 5);
 672:	95 e0       	ldi	r25, 0x05	; 5
 674:	e3 e1       	ldi	r30, 0x13	; 19
 676:	f1 e0       	ldi	r31, 0x01	; 1
 678:	a5 e3       	ldi	r26, 0x35	; 53
 67a:	b1 e0       	ldi	r27, 0x01	; 1
 67c:	01 90       	ld	r0, Z+
 67e:	0d 92       	st	X+, r0
 680:	9a 95       	dec	r25
 682:	e1 f7       	brne	.-8      	; 0x67c <_Z7readingv+0x52>

	if (status == MI_OK)   //if ther is a new card detected
 684:	81 11       	cpse	r24, r1
 686:	39 c0       	rjmp	.+114    	; 0x6fa <_Z7readingv+0xd0>
	{
		SetFormatRDM630(); // take serNum and format it and retern read
 688:	0e 94 04 01 	call	0x208	; 0x208 <_Z15SetFormatRDM630v>
 68c:	03 e2       	ldi	r16, 0x23	; 35
 68e:	11 e0       	ldi	r17, 0x01	; 1
 690:	fe 01       	movw	r30, r28
 692:	31 96       	adiw	r30, 0x01	; 1
 694:	7f 01       	movw	r14, r30
 696:	0f 2e       	mov	r0, r31
 698:	fb e2       	ldi	r31, 0x2B	; 43
 69a:	cf 2e       	mov	r12, r31
 69c:	f1 e0       	ldi	r31, 0x01	; 1
 69e:	df 2e       	mov	r13, r31
 6a0:	f0 2d       	mov	r31, r0
		for(uint8_t i=0;i<8;i++){
			ReadingCard[i]=read[i];
 6a2:	d8 01       	movw	r26, r16
 6a4:	6d 91       	ld	r22, X+
 6a6:	8d 01       	movw	r16, r26
 6a8:	f7 01       	movw	r30, r14
 6aa:	61 93       	st	Z+, r22
 6ac:	7f 01       	movw	r14, r30
			USART_TxNumber(ReadingCard[i],16);
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	40 e1       	ldi	r20, 0x10	; 16
 6b6:	0e 94 96 00 	call	0x12c	; 0x12c <_Z14USART_TxNumberlh>
			USART_TxString(" ");
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z14USART_TxStringPc>
	memcpy(serNum, str, 5);

	if (status == MI_OK)   //if ther is a new card detected
	{
		SetFormatRDM630(); // take serNum and format it and retern read
		for(uint8_t i=0;i<8;i++){
 6c2:	0c 15       	cp	r16, r12
 6c4:	1d 05       	cpc	r17, r13
 6c6:	69 f7       	brne	.-38     	; 0x6a2 <_Z7readingv+0x78>
			ReadingCard[i]=read[i];
			USART_TxNumber(ReadingCard[i],16);
			USART_TxString(" ");
		}
		USART_TxStringln("");
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	0e 94 81 00 	call	0x102	; 0x102 <_Z16USART_TxStringlnPc>
		
	for(uint8_t i=0;i<8;i++){
		if (ReadingCard[i]==eepromR[i])
 6d0:	99 81       	ldd	r25, Y+1	; 0x01
 6d2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 6d6:	98 13       	cpse	r25, r24
 6d8:	12 c0       	rjmp	.+36     	; 0x6fe <_Z7readingv+0xd4>
 6da:	fe 01       	movw	r30, r28
 6dc:	32 96       	adiw	r30, 0x02	; 2
 6de:	ab e0       	ldi	r26, 0x0B	; 11
 6e0:	b1 e0       	ldi	r27, 0x01	; 1
 6e2:	9e 01       	movw	r18, r28
 6e4:	27 5f       	subi	r18, 0xF7	; 247
 6e6:	3f 4f       	sbci	r19, 0xFF	; 255
 6e8:	91 91       	ld	r25, Z+
 6ea:	8d 91       	ld	r24, X+
 6ec:	98 13       	cpse	r25, r24
 6ee:	09 c0       	rjmp	.+18     	; 0x702 <_Z7readingv+0xd8>
			USART_TxNumber(ReadingCard[i],16);
			USART_TxString(" ");
		}
		USART_TxStringln("");
		
	for(uint8_t i=0;i<8;i++){
 6f0:	e2 17       	cp	r30, r18
 6f2:	f3 07       	cpc	r31, r19
 6f4:	c9 f7       	brne	.-14     	; 0x6e8 <_Z7readingv+0xbe>
		if (ReadingCard[i]==eepromR[i])
		{state=1;
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <_Z7readingv+0xda>
uint8_t eepromR[8];



bool reading(){
	bool state=0;
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <_Z7readingv+0xda>
	for(uint8_t i=0;i<8;i++){
		if (ReadingCard[i]==eepromR[i])
		{state=1;
		}
		else
		{state=0;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	01 c0       	rjmp	.+2      	; 0x704 <_Z7readingv+0xda>
 702:	80 e0       	ldi	r24, 0x00	; 0
	}	
	}
	
	return state;
	
}
 704:	28 96       	adiw	r28, 0x08	; 8
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	1f 91       	pop	r17
 716:	0f 91       	pop	r16
 718:	ff 90       	pop	r15
 71a:	ef 90       	pop	r14
 71c:	df 90       	pop	r13
 71e:	cf 90       	pop	r12
 720:	08 95       	ret

00000722 <main>:
	while(1);
	}*/
	/*end initcard*/
	
	
   USART_Init(9600);
 722:	80 e8       	ldi	r24, 0x80	; 128
 724:	95 e2       	ldi	r25, 0x25	; 37
 726:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
   USART_TxStringln("Started");
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	0e 94 81 00 	call	0x102	; 0x102 <_Z16USART_TxStringlnPc>
   
   DDRB|=(1<<0);
 732:	20 9a       	sbi	0x04, 0	; 4
   PORTB&=~(1<<0);
 734:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 736:	2f ef       	ldi	r18, 0xFF	; 255
 738:	89 e6       	ldi	r24, 0x69	; 105
 73a:	98 e1       	ldi	r25, 0x18	; 24
 73c:	21 50       	subi	r18, 0x01	; 1
 73e:	80 40       	sbci	r24, 0x00	; 0
 740:	90 40       	sbci	r25, 0x00	; 0
 742:	e1 f7       	brne	.-8      	; 0x73c <main+0x1a>
 744:	00 c0       	rjmp	.+0      	; 0x746 <main+0x24>
 746:	00 00       	nop
 748:	0a e0       	ldi	r16, 0x0A	; 10
 74a:	11 e0       	ldi	r17, 0x01	; 1
 74c:	c0 e0       	ldi	r28, 0x00	; 0
 74e:	d0 e0       	ldi	r29, 0x00	; 0
   
   _delay_ms(1000);
   for(uint8_t i=0;i<8;i++){
	   eepromR[i]=eeprom_read_byte((uint8_t*)i);
 750:	ce 01       	movw	r24, r28
 752:	0e 94 3e 04 	call	0x87c	; 0x87c <eeprom_read_byte>
 756:	f8 01       	movw	r30, r16
 758:	81 93       	st	Z+, r24
 75a:	8f 01       	movw	r16, r30
	   USART_TxNumber(eepromR[i],16);
 75c:	68 2f       	mov	r22, r24
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	40 e1       	ldi	r20, 0x10	; 16
 766:	0e 94 96 00 	call	0x12c	; 0x12c <_Z14USART_TxNumberlh>
	   USART_TxString(" ");
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	91 e0       	ldi	r25, 0x01	; 1
 76e:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z14USART_TxStringPc>
 772:	21 96       	adiw	r28, 0x01	; 1
   
   DDRB|=(1<<0);
   PORTB&=~(1<<0);
   
   _delay_ms(1000);
   for(uint8_t i=0;i<8;i++){
 774:	c8 30       	cpi	r28, 0x08	; 8
 776:	d1 05       	cpc	r29, r1
 778:	59 f7       	brne	.-42     	; 0x750 <main+0x2e>
	   eepromR[i]=eeprom_read_byte((uint8_t*)i);
	   USART_TxNumber(eepromR[i],16);
	   USART_TxString(" ");
   }
   USART_TxStringln("");
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	0e 94 81 00 	call	0x102	; 0x102 <_Z16USART_TxStringlnPc>
   //MFRC522_HardReset();
   SPI_Init();
 782:	0e 94 df 00 	call	0x1be	; 0x1be <_Z8SPI_Initv>
   MFRC522_Init();   // Initialize RC522 module
 786:	0e 94 9a 01 	call	0x334	; 0x334 <_Z12MFRC522_Initv>
   */
   
    while (1) 
    {
				
		if (reading())
 78a:	0e 94 15 03 	call	0x62a	; 0x62a <_Z7readingv>
 78e:	88 23       	and	r24, r24
 790:	11 f0       	breq	.+4      	; 0x796 <main+0x74>
		{
			PORTB|=(1<<0);
 792:	28 9a       	sbi	0x05, 0	; 5
 794:	07 c0       	rjmp	.+14     	; 0x7a4 <main+0x82>
		} 
		else
		{	
			if (reading())
 796:	0e 94 15 03 	call	0x62a	; 0x62a <_Z7readingv>
 79a:	88 23       	and	r24, r24
 79c:	11 f0       	breq	.+4      	; 0x7a2 <main+0x80>
			{PORTB|=(1<<0);
 79e:	28 9a       	sbi	0x05, 0	; 5
 7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <main+0x82>
			} 
			else
			{PORTB&=~(1<<0);
 7a2:	28 98       	cbi	0x05, 0	; 5
 7a4:	ff ef       	ldi	r31, 0xFF	; 255
 7a6:	24 e3       	ldi	r18, 0x34	; 52
 7a8:	8c e0       	ldi	r24, 0x0C	; 12
 7aa:	f1 50       	subi	r31, 0x01	; 1
 7ac:	20 40       	sbci	r18, 0x00	; 0
 7ae:	80 40       	sbci	r24, 0x00	; 0
 7b0:	e1 f7       	brne	.-8      	; 0x7aa <main+0x88>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <main+0x92>
 7b4:	00 00       	nop
 7b6:	e9 cf       	rjmp	.-46     	; 0x78a <main+0x68>

000007b8 <__udivmodsi4>:
 7b8:	a1 e2       	ldi	r26, 0x21	; 33
 7ba:	1a 2e       	mov	r1, r26
 7bc:	aa 1b       	sub	r26, r26
 7be:	bb 1b       	sub	r27, r27
 7c0:	fd 01       	movw	r30, r26
 7c2:	0d c0       	rjmp	.+26     	; 0x7de <__udivmodsi4_ep>

000007c4 <__udivmodsi4_loop>:
 7c4:	aa 1f       	adc	r26, r26
 7c6:	bb 1f       	adc	r27, r27
 7c8:	ee 1f       	adc	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	a2 17       	cp	r26, r18
 7ce:	b3 07       	cpc	r27, r19
 7d0:	e4 07       	cpc	r30, r20
 7d2:	f5 07       	cpc	r31, r21
 7d4:	20 f0       	brcs	.+8      	; 0x7de <__udivmodsi4_ep>
 7d6:	a2 1b       	sub	r26, r18
 7d8:	b3 0b       	sbc	r27, r19
 7da:	e4 0b       	sbc	r30, r20
 7dc:	f5 0b       	sbc	r31, r21

000007de <__udivmodsi4_ep>:
 7de:	66 1f       	adc	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	1a 94       	dec	r1
 7e8:	69 f7       	brne	.-38     	; 0x7c4 <__udivmodsi4_loop>
 7ea:	60 95       	com	r22
 7ec:	70 95       	com	r23
 7ee:	80 95       	com	r24
 7f0:	90 95       	com	r25
 7f2:	9b 01       	movw	r18, r22
 7f4:	ac 01       	movw	r20, r24
 7f6:	bd 01       	movw	r22, r26
 7f8:	cf 01       	movw	r24, r30
 7fa:	08 95       	ret

000007fc <itoa>:
 7fc:	45 32       	cpi	r20, 0x25	; 37
 7fe:	51 05       	cpc	r21, r1
 800:	20 f4       	brcc	.+8      	; 0x80a <itoa+0xe>
 802:	42 30       	cpi	r20, 0x02	; 2
 804:	10 f0       	brcs	.+4      	; 0x80a <itoa+0xe>
 806:	0c 94 09 04 	jmp	0x812	; 0x812 <__itoa_ncheck>
 80a:	fb 01       	movw	r30, r22
 80c:	10 82       	st	Z, r1
 80e:	cb 01       	movw	r24, r22
 810:	08 95       	ret

00000812 <__itoa_ncheck>:
 812:	bb 27       	eor	r27, r27
 814:	4a 30       	cpi	r20, 0x0A	; 10
 816:	31 f4       	brne	.+12     	; 0x824 <__itoa_ncheck+0x12>
 818:	99 23       	and	r25, r25
 81a:	22 f4       	brpl	.+8      	; 0x824 <__itoa_ncheck+0x12>
 81c:	bd e2       	ldi	r27, 0x2D	; 45
 81e:	90 95       	com	r25
 820:	81 95       	neg	r24
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	0c 94 15 04 	jmp	0x82a	; 0x82a <__utoa_common>

00000828 <__utoa_ncheck>:
 828:	bb 27       	eor	r27, r27

0000082a <__utoa_common>:
 82a:	fb 01       	movw	r30, r22
 82c:	55 27       	eor	r21, r21
 82e:	aa 27       	eor	r26, r26
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	aa 1f       	adc	r26, r26
 836:	a4 17       	cp	r26, r20
 838:	10 f0       	brcs	.+4      	; 0x83e <__utoa_common+0x14>
 83a:	a4 1b       	sub	r26, r20
 83c:	83 95       	inc	r24
 83e:	50 51       	subi	r21, 0x10	; 16
 840:	b9 f7       	brne	.-18     	; 0x830 <__utoa_common+0x6>
 842:	a0 5d       	subi	r26, 0xD0	; 208
 844:	aa 33       	cpi	r26, 0x3A	; 58
 846:	08 f0       	brcs	.+2      	; 0x84a <__utoa_common+0x20>
 848:	a9 5d       	subi	r26, 0xD9	; 217
 84a:	a1 93       	st	Z+, r26
 84c:	00 97       	sbiw	r24, 0x00	; 0
 84e:	79 f7       	brne	.-34     	; 0x82e <__utoa_common+0x4>
 850:	b1 11       	cpse	r27, r1
 852:	b1 93       	st	Z+, r27
 854:	11 92       	st	Z+, r1
 856:	cb 01       	movw	r24, r22
 858:	0c 94 2e 04 	jmp	0x85c	; 0x85c <strrev>

0000085c <strrev>:
 85c:	dc 01       	movw	r26, r24
 85e:	fc 01       	movw	r30, r24
 860:	67 2f       	mov	r22, r23
 862:	71 91       	ld	r23, Z+
 864:	77 23       	and	r23, r23
 866:	e1 f7       	brne	.-8      	; 0x860 <strrev+0x4>
 868:	32 97       	sbiw	r30, 0x02	; 2
 86a:	04 c0       	rjmp	.+8      	; 0x874 <strrev+0x18>
 86c:	7c 91       	ld	r23, X
 86e:	6d 93       	st	X+, r22
 870:	70 83       	st	Z, r23
 872:	62 91       	ld	r22, -Z
 874:	ae 17       	cp	r26, r30
 876:	bf 07       	cpc	r27, r31
 878:	c8 f3       	brcs	.-14     	; 0x86c <strrev+0x10>
 87a:	08 95       	ret

0000087c <eeprom_read_byte>:
 87c:	f9 99       	sbic	0x1f, 1	; 31
 87e:	fe cf       	rjmp	.-4      	; 0x87c <eeprom_read_byte>
 880:	92 bd       	out	0x22, r25	; 34
 882:	81 bd       	out	0x21, r24	; 33
 884:	f8 9a       	sbi	0x1f, 0	; 31
 886:	99 27       	eor	r25, r25
 888:	80 b5       	in	r24, 0x20	; 32
 88a:	08 95       	ret

0000088c <_exit>:
 88c:	f8 94       	cli

0000088e <__stop_program>:
 88e:	ff cf       	rjmp	.-2      	; 0x88e <__stop_program>

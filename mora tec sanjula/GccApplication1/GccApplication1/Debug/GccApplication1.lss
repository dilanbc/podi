
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000700  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000832  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000667  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000360  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003de  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c9  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  74:	0c 94 44 03 	jmp	0x688	; 0x688 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z12MotorControlb>:
    }
}

void MotorControl(bool dir){
	
	if (dir)
  7c:	88 23       	and	r24, r24
  7e:	39 f0       	breq	.+14     	; 0x8e <_Z12MotorControlb+0x12>
	{PORTC|=(1<<MotorCCW);//2 on
  80:	85 b3       	in	r24, 0x15	; 21
  82:	84 60       	ori	r24, 0x04	; 4
  84:	85 bb       	out	0x15, r24	; 21
		PORTC&=~(1<<MotorCw);//3 off
  86:	85 b3       	in	r24, 0x15	; 21
  88:	87 7f       	andi	r24, 0xF7	; 247
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	08 95       	ret
		
	} 
	else
	{PORTC|=(1<<MotorCw);//3 on
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	88 60       	ori	r24, 0x08	; 8
  92:	85 bb       	out	0x15, r24	; 21
		PORTC&=~(1<<MotorCCW);//2 off
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	85 bb       	out	0x15, r24	; 21
  9a:	08 95       	ret

0000009c <_Z12loadCellReadv>:
	}
}

float loadCellRead(){
  9c:	cf 92       	push	r12
  9e:	df 92       	push	r13
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
	hx711H=0;hx711L=0;  //clear variables
  a4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <hx711H>
  a8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <hx711L+0x1>
  ac:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <hx711L>
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	88 30       	cpi	r24, 0x08	; 8
  b4:	a0 f5       	brcc	.+104    	; 0x11e <_Z12loadCellReadv+0x82>
		PORTD|=(1<<Load_clk); //Clock pin high
  b6:	92 b3       	in	r25, 0x12	; 18
  b8:	98 60       	ori	r25, 0x08	; 8
  ba:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	9a e1       	ldi	r25, 0x1A	; 26
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <_Z12loadCellReadv+0x22>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_Z12loadCellReadv+0x28>
		_delay_us(10);
		if ((PIND&(1<<Load_data))>>Load_data)  //read data pin
  c4:	82 9b       	sbis	0x10, 2	; 16
  c6:	11 c0       	rjmp	.+34     	; 0xea <_Z12loadCellReadv+0x4e>
		{hx711H|=(1<<(7-i));//set hx 711 varible
  c8:	47 e0       	ldi	r20, 0x07	; 7
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	48 1b       	sub	r20, r24
  ce:	51 09       	sbc	r21, r1
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <_Z12loadCellReadv+0x3e>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	4a 95       	dec	r20
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <_Z12loadCellReadv+0x3a>
  de:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <hx711H>
  e2:	29 2b       	or	r18, r25
  e4:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <hx711H>
  e8:	11 c0       	rjmp	.+34     	; 0x10c <_Z12loadCellReadv+0x70>
		}
		else
		{hx711H&=~(1<<(7-i));
  ea:	47 e0       	ldi	r20, 0x07	; 7
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	48 1b       	sub	r20, r24
  f0:	51 09       	sbc	r21, r1
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <_Z12loadCellReadv+0x60>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	4a 95       	dec	r20
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <_Z12loadCellReadv+0x5c>
 100:	20 95       	com	r18
 102:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <hx711H>
 106:	29 23       	and	r18, r25
 108:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <hx711H>
		}
		PORTD&=~(1<<Load_clk); //Clock pin low
 10c:	92 b3       	in	r25, 0x12	; 18
 10e:	97 7f       	andi	r25, 0xF7	; 247
 110:	92 bb       	out	0x12, r25	; 18
 112:	9d e0       	ldi	r25, 0x0D	; 13
 114:	9a 95       	dec	r25
 116:	f1 f7       	brne	.-4      	; 0x114 <_Z12loadCellReadv+0x78>
 118:	00 00       	nop
	}
}

float loadCellRead(){
	hx711H=0;hx711L=0;  //clear variables
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	ca cf       	rjmp	.-108    	; 0xb2 <_Z12loadCellReadv+0x16>
 11e:	80 e0       	ldi	r24, 0x00	; 0
		PORTD&=~(1<<Load_clk); //Clock pin low
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
 120:	80 31       	cpi	r24, 0x10	; 16
 122:	08 f0       	brcs	.+2      	; 0x126 <_Z12loadCellReadv+0x8a>
 124:	3f c0       	rjmp	.+126    	; 0x1a4 <_Z12loadCellReadv+0x108>
		PORTD|=(1<<Load_clk); //Clock pin high
 126:	92 b3       	in	r25, 0x12	; 18
 128:	98 60       	ori	r25, 0x08	; 8
 12a:	92 bb       	out	0x12, r25	; 18
 12c:	9a e1       	ldi	r25, 0x1A	; 26
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <_Z12loadCellReadv+0x92>
 132:	00 c0       	rjmp	.+0      	; 0x134 <_Z12loadCellReadv+0x98>
		_delay_us(10);
		if ((PIND&(1<<Load_data))>>Load_data) //read data pin
 134:	82 9b       	sbis	0x10, 2	; 16
 136:	16 c0       	rjmp	.+44     	; 0x164 <_Z12loadCellReadv+0xc8>
		{hx711L|=(1<<(15-i));
 138:	4f e0       	ldi	r20, 0x0F	; 15
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	48 1b       	sub	r20, r24
 13e:	51 09       	sbc	r21, r1
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <_Z12loadCellReadv+0xae>
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	4a 95       	dec	r20
 14c:	e2 f7       	brpl	.-8      	; 0x146 <_Z12loadCellReadv+0xaa>
 14e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <hx711L>
 152:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <hx711L+0x1>
 156:	24 2b       	or	r18, r20
 158:	35 2b       	or	r19, r21
 15a:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <hx711L+0x1>
 15e:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <hx711L>
 162:	17 c0       	rjmp	.+46     	; 0x192 <_Z12loadCellReadv+0xf6>
		}
		else
		{hx711L&=~(1<<(15-i));
 164:	4f e0       	ldi	r20, 0x0F	; 15
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	48 1b       	sub	r20, r24
 16a:	51 09       	sbc	r21, r1
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <_Z12loadCellReadv+0xda>
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	4a 95       	dec	r20
 178:	e2 f7       	brpl	.-8      	; 0x172 <_Z12loadCellReadv+0xd6>
 17a:	20 95       	com	r18
 17c:	30 95       	com	r19
 17e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <hx711L>
 182:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <hx711L+0x1>
 186:	24 23       	and	r18, r20
 188:	35 23       	and	r19, r21
 18a:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <hx711L+0x1>
 18e:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <hx711L>
		}
		PORTD&=~(1<<Load_clk); //Clock pin low
 192:	92 b3       	in	r25, 0x12	; 18
 194:	97 7f       	andi	r25, 0xF7	; 247
 196:	92 bb       	out	0x12, r25	; 18
 198:	9d e0       	ldi	r25, 0x0D	; 13
 19a:	9a 95       	dec	r25
 19c:	f1 f7       	brne	.-4      	; 0x19a <_Z12loadCellReadv+0xfe>
 19e:	00 00       	nop
		PORTD&=~(1<<Load_clk); //Clock pin low
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	be cf       	rjmp	.-132    	; 0x120 <_Z12loadCellReadv+0x84>
		}
		PORTD&=~(1<<Load_clk); //Clock pin low
		_delay_us(5);
	}
	
	hx711L=hx711L>>1; //shift bits
 1a4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <hx711L>
 1a8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <hx711L+0x1>
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <hx711L+0x1>
 1b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <hx711L>
	
	if (hx711H&1)  //bit setup
 1b8:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <hx711H>
 1bc:	60 ff       	sbrs	r22, 0
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <_Z12loadCellReadv+0x12e>
	{hx711L|=(1<<15);
 1c0:	90 68       	ori	r25, 0x80	; 128
 1c2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <hx711L+0x1>
 1c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <hx711L>
	}
	else
	{hx711L&=~(1<<15);
	}
	hx711H=hx711H>>1;
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	75 95       	asr	r23
 1ce:	67 95       	ror	r22
 1d0:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <hx711H>
	
	return (hx711H*(65536/18029.6))+hx711L/18029.6; //load cell calibration
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 22 02 	call	0x444	; 0x444 <__floatsisf>
 1dc:	24 e6       	ldi	r18, 0x64	; 100
 1de:	32 ea       	ldi	r19, 0xA2	; 162
 1e0:	48 e6       	ldi	r20, 0x68	; 104
 1e2:	50 e4       	ldi	r21, 0x40	; 64
 1e4:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 1e8:	6b 01       	movw	r12, r22
 1ea:	7c 01       	movw	r14, r24
 1ec:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <hx711L>
 1f0:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <hx711L+0x1>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 20 02 	call	0x440	; 0x440 <__floatunsisf>
 1fc:	23 e3       	ldi	r18, 0x33	; 51
 1fe:	3b ed       	ldi	r19, 0xDB	; 219
 200:	4c e8       	ldi	r20, 0x8C	; 140
 202:	56 e4       	ldi	r21, 0x46	; 70
 204:	0e 94 ae 01 	call	0x35c	; 0x35c <__divsf3>
 208:	9b 01       	movw	r18, r22
 20a:	ac 01       	movw	r20, r24
 20c:	c7 01       	movw	r24, r14
 20e:	b6 01       	movw	r22, r12
 210:	0e 94 42 01 	call	0x284	; 0x284 <__addsf3>
}
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	cf 90       	pop	r12
 21c:	08 95       	ret

0000021e <main>:
void MotorControl(bool dir);
float hx=0;

int main(void)
{
    DDRD|=(1<<Load_clk); //Load cell clock pin
 21e:	81 b3       	in	r24, 0x11	; 17
 220:	88 60       	ori	r24, 0x08	; 8
 222:	81 bb       	out	0x11, r24	; 17
    PORTD&=~(1<<Load_clk);//Clock pin low
 224:	82 b3       	in	r24, 0x12	; 18
 226:	87 7f       	andi	r24, 0xF7	; 247
 228:	82 bb       	out	0x12, r24	; 18
	DDRC|=(1<<5)|(1<<MotorCw)|(1<<MotorCCW);//buzzer & motor
 22a:	84 b3       	in	r24, 0x14	; 20
 22c:	8c 62       	ori	r24, 0x2C	; 44
 22e:	84 bb       	out	0x14, r24	; 20
	
    while (1) 
    {
		hx=loadCellRead();
 230:	0e 94 4e 00 	call	0x9c	; 0x9c <_Z12loadCellReadv>
 234:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 238:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 240:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		if (hx>15)
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	40 e7       	ldi	r20, 0x70	; 112
 24a:	51 e4       	ldi	r21, 0x41	; 65
 24c:	0e 94 ae 02 	call	0x55c	; 0x55c <__gesf2>
 250:	18 16       	cp	r1, r24
 252:	3c f4       	brge	.+14     	; 0x262 <main+0x44>
		{PORTC|=(1<<5);MotorControl(1);
 254:	85 b3       	in	r24, 0x15	; 21
 256:	80 62       	ori	r24, 0x20	; 32
 258:	85 bb       	out	0x15, r24	; 21
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z12MotorControlb>
 260:	06 c0       	rjmp	.+12     	; 0x26e <main+0x50>
		} 
		else
		{PORTC&=~(1<<5);MotorControl(0);
 262:	85 b3       	in	r24, 0x15	; 21
 264:	8f 7d       	andi	r24, 0xDF	; 223
 266:	85 bb       	out	0x15, r24	; 21
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z12MotorControlb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	80 e7       	ldi	r24, 0x70	; 112
 272:	92 e0       	ldi	r25, 0x02	; 2
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x56>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x60>
 27e:	00 00       	nop
 280:	d7 cf       	rjmp	.-82     	; 0x230 <main+0x12>

00000282 <__subsf3>:
 282:	50 58       	subi	r21, 0x80	; 128

00000284 <__addsf3>:
 284:	bb 27       	eor	r27, r27
 286:	aa 27       	eor	r26, r26
 288:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__addsf3x>
 28c:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_round>
 290:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_pscA>
 294:	38 f0       	brcs	.+14     	; 0x2a4 <__addsf3+0x20>
 296:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_pscB>
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <__addsf3+0x20>
 29c:	39 f4       	brne	.+14     	; 0x2ac <__addsf3+0x28>
 29e:	9f 3f       	cpi	r25, 0xFF	; 255
 2a0:	19 f4       	brne	.+6      	; 0x2a8 <__addsf3+0x24>
 2a2:	26 f4       	brtc	.+8      	; 0x2ac <__addsf3+0x28>
 2a4:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_nan>
 2a8:	0e f4       	brtc	.+2      	; 0x2ac <__addsf3+0x28>
 2aa:	e0 95       	com	r30
 2ac:	e7 fb       	bst	r30, 7
 2ae:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_inf>

000002b2 <__addsf3x>:
 2b2:	e9 2f       	mov	r30, r25
 2b4:	0e 94 85 02 	call	0x50a	; 0x50a <__fp_split3>
 2b8:	58 f3       	brcs	.-42     	; 0x290 <__addsf3+0xc>
 2ba:	ba 17       	cp	r27, r26
 2bc:	62 07       	cpc	r22, r18
 2be:	73 07       	cpc	r23, r19
 2c0:	84 07       	cpc	r24, r20
 2c2:	95 07       	cpc	r25, r21
 2c4:	20 f0       	brcs	.+8      	; 0x2ce <__addsf3x+0x1c>
 2c6:	79 f4       	brne	.+30     	; 0x2e6 <__addsf3x+0x34>
 2c8:	a6 f5       	brtc	.+104    	; 0x332 <__addsf3x+0x80>
 2ca:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_zero>
 2ce:	0e f4       	brtc	.+2      	; 0x2d2 <__addsf3x+0x20>
 2d0:	e0 95       	com	r30
 2d2:	0b 2e       	mov	r0, r27
 2d4:	ba 2f       	mov	r27, r26
 2d6:	a0 2d       	mov	r26, r0
 2d8:	0b 01       	movw	r0, r22
 2da:	b9 01       	movw	r22, r18
 2dc:	90 01       	movw	r18, r0
 2de:	0c 01       	movw	r0, r24
 2e0:	ca 01       	movw	r24, r20
 2e2:	a0 01       	movw	r20, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	ff 27       	eor	r31, r31
 2e8:	59 1b       	sub	r21, r25
 2ea:	99 f0       	breq	.+38     	; 0x312 <__addsf3x+0x60>
 2ec:	59 3f       	cpi	r21, 0xF9	; 249
 2ee:	50 f4       	brcc	.+20     	; 0x304 <__addsf3x+0x52>
 2f0:	50 3e       	cpi	r21, 0xE0	; 224
 2f2:	68 f1       	brcs	.+90     	; 0x34e <__addsf3x+0x9c>
 2f4:	1a 16       	cp	r1, r26
 2f6:	f0 40       	sbci	r31, 0x00	; 0
 2f8:	a2 2f       	mov	r26, r18
 2fa:	23 2f       	mov	r18, r19
 2fc:	34 2f       	mov	r19, r20
 2fe:	44 27       	eor	r20, r20
 300:	58 5f       	subi	r21, 0xF8	; 248
 302:	f3 cf       	rjmp	.-26     	; 0x2ea <__addsf3x+0x38>
 304:	46 95       	lsr	r20
 306:	37 95       	ror	r19
 308:	27 95       	ror	r18
 30a:	a7 95       	ror	r26
 30c:	f0 40       	sbci	r31, 0x00	; 0
 30e:	53 95       	inc	r21
 310:	c9 f7       	brne	.-14     	; 0x304 <__addsf3x+0x52>
 312:	7e f4       	brtc	.+30     	; 0x332 <__addsf3x+0x80>
 314:	1f 16       	cp	r1, r31
 316:	ba 0b       	sbc	r27, r26
 318:	62 0b       	sbc	r22, r18
 31a:	73 0b       	sbc	r23, r19
 31c:	84 0b       	sbc	r24, r20
 31e:	ba f0       	brmi	.+46     	; 0x34e <__addsf3x+0x9c>
 320:	91 50       	subi	r25, 0x01	; 1
 322:	a1 f0       	breq	.+40     	; 0x34c <__addsf3x+0x9a>
 324:	ff 0f       	add	r31, r31
 326:	bb 1f       	adc	r27, r27
 328:	66 1f       	adc	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	88 1f       	adc	r24, r24
 32e:	c2 f7       	brpl	.-16     	; 0x320 <__addsf3x+0x6e>
 330:	0e c0       	rjmp	.+28     	; 0x34e <__addsf3x+0x9c>
 332:	ba 0f       	add	r27, r26
 334:	62 1f       	adc	r22, r18
 336:	73 1f       	adc	r23, r19
 338:	84 1f       	adc	r24, r20
 33a:	48 f4       	brcc	.+18     	; 0x34e <__addsf3x+0x9c>
 33c:	87 95       	ror	r24
 33e:	77 95       	ror	r23
 340:	67 95       	ror	r22
 342:	b7 95       	ror	r27
 344:	f7 95       	ror	r31
 346:	9e 3f       	cpi	r25, 0xFE	; 254
 348:	08 f0       	brcs	.+2      	; 0x34c <__addsf3x+0x9a>
 34a:	b0 cf       	rjmp	.-160    	; 0x2ac <__addsf3+0x28>
 34c:	93 95       	inc	r25
 34e:	88 0f       	add	r24, r24
 350:	08 f0       	brcs	.+2      	; 0x354 <__addsf3x+0xa2>
 352:	99 27       	eor	r25, r25
 354:	ee 0f       	add	r30, r30
 356:	97 95       	ror	r25
 358:	87 95       	ror	r24
 35a:	08 95       	ret

0000035c <__divsf3>:
 35c:	0e 94 c2 01 	call	0x384	; 0x384 <__divsf3x>
 360:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_round>
 364:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_pscB>
 368:	58 f0       	brcs	.+22     	; 0x380 <__divsf3+0x24>
 36a:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_pscA>
 36e:	40 f0       	brcs	.+16     	; 0x380 <__divsf3+0x24>
 370:	29 f4       	brne	.+10     	; 0x37c <__divsf3+0x20>
 372:	5f 3f       	cpi	r21, 0xFF	; 255
 374:	29 f0       	breq	.+10     	; 0x380 <__divsf3+0x24>
 376:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_inf>
 37a:	51 11       	cpse	r21, r1
 37c:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>
 380:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_nan>

00000384 <__divsf3x>:
 384:	0e 94 85 02 	call	0x50a	; 0x50a <__fp_split3>
 388:	68 f3       	brcs	.-38     	; 0x364 <__divsf3+0x8>

0000038a <__divsf3_pse>:
 38a:	99 23       	and	r25, r25
 38c:	b1 f3       	breq	.-20     	; 0x37a <__divsf3+0x1e>
 38e:	55 23       	and	r21, r21
 390:	91 f3       	breq	.-28     	; 0x376 <__divsf3+0x1a>
 392:	95 1b       	sub	r25, r21
 394:	55 0b       	sbc	r21, r21
 396:	bb 27       	eor	r27, r27
 398:	aa 27       	eor	r26, r26
 39a:	62 17       	cp	r22, r18
 39c:	73 07       	cpc	r23, r19
 39e:	84 07       	cpc	r24, r20
 3a0:	38 f0       	brcs	.+14     	; 0x3b0 <__divsf3_pse+0x26>
 3a2:	9f 5f       	subi	r25, 0xFF	; 255
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	22 0f       	add	r18, r18
 3a8:	33 1f       	adc	r19, r19
 3aa:	44 1f       	adc	r20, r20
 3ac:	aa 1f       	adc	r26, r26
 3ae:	a9 f3       	breq	.-22     	; 0x39a <__divsf3_pse+0x10>
 3b0:	35 d0       	rcall	.+106    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3b2:	0e 2e       	mov	r0, r30
 3b4:	3a f0       	brmi	.+14     	; 0x3c4 <__divsf3_pse+0x3a>
 3b6:	e0 e8       	ldi	r30, 0x80	; 128
 3b8:	32 d0       	rcall	.+100    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3ba:	91 50       	subi	r25, 0x01	; 1
 3bc:	50 40       	sbci	r21, 0x00	; 0
 3be:	e6 95       	lsr	r30
 3c0:	00 1c       	adc	r0, r0
 3c2:	ca f7       	brpl	.-14     	; 0x3b6 <__divsf3_pse+0x2c>
 3c4:	2b d0       	rcall	.+86     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3c6:	fe 2f       	mov	r31, r30
 3c8:	29 d0       	rcall	.+82     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	88 1f       	adc	r24, r24
 3d0:	bb 1f       	adc	r27, r27
 3d2:	26 17       	cp	r18, r22
 3d4:	37 07       	cpc	r19, r23
 3d6:	48 07       	cpc	r20, r24
 3d8:	ab 07       	cpc	r26, r27
 3da:	b0 e8       	ldi	r27, 0x80	; 128
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <__divsf3_pse+0x56>
 3de:	bb 0b       	sbc	r27, r27
 3e0:	80 2d       	mov	r24, r0
 3e2:	bf 01       	movw	r22, r30
 3e4:	ff 27       	eor	r31, r31
 3e6:	93 58       	subi	r25, 0x83	; 131
 3e8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ea:	3a f0       	brmi	.+14     	; 0x3fa <__divsf3_pse+0x70>
 3ec:	9e 3f       	cpi	r25, 0xFE	; 254
 3ee:	51 05       	cpc	r21, r1
 3f0:	78 f0       	brcs	.+30     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3f2:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_inf>
 3f6:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>
 3fa:	5f 3f       	cpi	r21, 0xFF	; 255
 3fc:	e4 f3       	brlt	.-8      	; 0x3f6 <__divsf3_pse+0x6c>
 3fe:	98 3e       	cpi	r25, 0xE8	; 232
 400:	d4 f3       	brlt	.-12     	; 0x3f6 <__divsf3_pse+0x6c>
 402:	86 95       	lsr	r24
 404:	77 95       	ror	r23
 406:	67 95       	ror	r22
 408:	b7 95       	ror	r27
 40a:	f7 95       	ror	r31
 40c:	9f 5f       	subi	r25, 0xFF	; 255
 40e:	c9 f7       	brne	.-14     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 410:	88 0f       	add	r24, r24
 412:	91 1d       	adc	r25, r1
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	97 f9       	bld	r25, 7
 41a:	08 95       	ret
 41c:	e1 e0       	ldi	r30, 0x01	; 1
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	88 1f       	adc	r24, r24
 424:	bb 1f       	adc	r27, r27
 426:	62 17       	cp	r22, r18
 428:	73 07       	cpc	r23, r19
 42a:	84 07       	cpc	r24, r20
 42c:	ba 07       	cpc	r27, r26
 42e:	20 f0       	brcs	.+8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 430:	62 1b       	sub	r22, r18
 432:	73 0b       	sbc	r23, r19
 434:	84 0b       	sbc	r24, r20
 436:	ba 0b       	sbc	r27, r26
 438:	ee 1f       	adc	r30, r30
 43a:	88 f7       	brcc	.-30     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 43c:	e0 95       	com	r30
 43e:	08 95       	ret

00000440 <__floatunsisf>:
 440:	e8 94       	clt
 442:	09 c0       	rjmp	.+18     	; 0x456 <__floatsisf+0x12>

00000444 <__floatsisf>:
 444:	97 fb       	bst	r25, 7
 446:	3e f4       	brtc	.+14     	; 0x456 <__floatsisf+0x12>
 448:	90 95       	com	r25
 44a:	80 95       	com	r24
 44c:	70 95       	com	r23
 44e:	61 95       	neg	r22
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f 4f       	sbci	r24, 0xFF	; 255
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	99 23       	and	r25, r25
 458:	a9 f0       	breq	.+42     	; 0x484 <__floatsisf+0x40>
 45a:	f9 2f       	mov	r31, r25
 45c:	96 e9       	ldi	r25, 0x96	; 150
 45e:	bb 27       	eor	r27, r27
 460:	93 95       	inc	r25
 462:	f6 95       	lsr	r31
 464:	87 95       	ror	r24
 466:	77 95       	ror	r23
 468:	67 95       	ror	r22
 46a:	b7 95       	ror	r27
 46c:	f1 11       	cpse	r31, r1
 46e:	f8 cf       	rjmp	.-16     	; 0x460 <__floatsisf+0x1c>
 470:	fa f4       	brpl	.+62     	; 0x4b0 <__floatsisf+0x6c>
 472:	bb 0f       	add	r27, r27
 474:	11 f4       	brne	.+4      	; 0x47a <__floatsisf+0x36>
 476:	60 ff       	sbrs	r22, 0
 478:	1b c0       	rjmp	.+54     	; 0x4b0 <__floatsisf+0x6c>
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	8f 4f       	sbci	r24, 0xFF	; 255
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	16 c0       	rjmp	.+44     	; 0x4b0 <__floatsisf+0x6c>
 484:	88 23       	and	r24, r24
 486:	11 f0       	breq	.+4      	; 0x48c <__floatsisf+0x48>
 488:	96 e9       	ldi	r25, 0x96	; 150
 48a:	11 c0       	rjmp	.+34     	; 0x4ae <__floatsisf+0x6a>
 48c:	77 23       	and	r23, r23
 48e:	21 f0       	breq	.+8      	; 0x498 <__floatsisf+0x54>
 490:	9e e8       	ldi	r25, 0x8E	; 142
 492:	87 2f       	mov	r24, r23
 494:	76 2f       	mov	r23, r22
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__floatsisf+0x5e>
 498:	66 23       	and	r22, r22
 49a:	71 f0       	breq	.+28     	; 0x4b8 <__floatsisf+0x74>
 49c:	96 e8       	ldi	r25, 0x86	; 134
 49e:	86 2f       	mov	r24, r22
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	2a f0       	brmi	.+10     	; 0x4b0 <__floatsisf+0x6c>
 4a6:	9a 95       	dec	r25
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	da f7       	brpl	.-10     	; 0x4a6 <__floatsisf+0x62>
 4b0:	88 0f       	add	r24, r24
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 4b6:	97 f9       	bld	r25, 7
 4b8:	08 95       	ret

000004ba <__fp_inf>:
 4ba:	97 f9       	bld	r25, 7
 4bc:	9f 67       	ori	r25, 0x7F	; 127
 4be:	80 e8       	ldi	r24, 0x80	; 128
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	08 95       	ret

000004c6 <__fp_nan>:
 4c6:	9f ef       	ldi	r25, 0xFF	; 255
 4c8:	80 ec       	ldi	r24, 0xC0	; 192
 4ca:	08 95       	ret

000004cc <__fp_pscA>:
 4cc:	00 24       	eor	r0, r0
 4ce:	0a 94       	dec	r0
 4d0:	16 16       	cp	r1, r22
 4d2:	17 06       	cpc	r1, r23
 4d4:	18 06       	cpc	r1, r24
 4d6:	09 06       	cpc	r0, r25
 4d8:	08 95       	ret

000004da <__fp_pscB>:
 4da:	00 24       	eor	r0, r0
 4dc:	0a 94       	dec	r0
 4de:	12 16       	cp	r1, r18
 4e0:	13 06       	cpc	r1, r19
 4e2:	14 06       	cpc	r1, r20
 4e4:	05 06       	cpc	r0, r21
 4e6:	08 95       	ret

000004e8 <__fp_round>:
 4e8:	09 2e       	mov	r0, r25
 4ea:	03 94       	inc	r0
 4ec:	00 0c       	add	r0, r0
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <__fp_round+0xc>
 4f0:	88 23       	and	r24, r24
 4f2:	52 f0       	brmi	.+20     	; 0x508 <__fp_round+0x20>
 4f4:	bb 0f       	add	r27, r27
 4f6:	40 f4       	brcc	.+16     	; 0x508 <__fp_round+0x20>
 4f8:	bf 2b       	or	r27, r31
 4fa:	11 f4       	brne	.+4      	; 0x500 <__fp_round+0x18>
 4fc:	60 ff       	sbrs	r22, 0
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <__fp_round+0x20>
 500:	6f 5f       	subi	r22, 0xFF	; 255
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	08 95       	ret

0000050a <__fp_split3>:
 50a:	57 fd       	sbrc	r21, 7
 50c:	90 58       	subi	r25, 0x80	; 128
 50e:	44 0f       	add	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	59 f0       	breq	.+22     	; 0x52a <__fp_splitA+0x10>
 514:	5f 3f       	cpi	r21, 0xFF	; 255
 516:	71 f0       	breq	.+28     	; 0x534 <__fp_splitA+0x1a>
 518:	47 95       	ror	r20

0000051a <__fp_splitA>:
 51a:	88 0f       	add	r24, r24
 51c:	97 fb       	bst	r25, 7
 51e:	99 1f       	adc	r25, r25
 520:	61 f0       	breq	.+24     	; 0x53a <__fp_splitA+0x20>
 522:	9f 3f       	cpi	r25, 0xFF	; 255
 524:	79 f0       	breq	.+30     	; 0x544 <__fp_splitA+0x2a>
 526:	87 95       	ror	r24
 528:	08 95       	ret
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	14 06       	cpc	r1, r20
 530:	55 1f       	adc	r21, r21
 532:	f2 cf       	rjmp	.-28     	; 0x518 <__fp_split3+0xe>
 534:	46 95       	lsr	r20
 536:	f1 df       	rcall	.-30     	; 0x51a <__fp_splitA>
 538:	08 c0       	rjmp	.+16     	; 0x54a <__fp_splitA+0x30>
 53a:	16 16       	cp	r1, r22
 53c:	17 06       	cpc	r1, r23
 53e:	18 06       	cpc	r1, r24
 540:	99 1f       	adc	r25, r25
 542:	f1 cf       	rjmp	.-30     	; 0x526 <__fp_splitA+0xc>
 544:	86 95       	lsr	r24
 546:	71 05       	cpc	r23, r1
 548:	61 05       	cpc	r22, r1
 54a:	08 94       	sec
 54c:	08 95       	ret

0000054e <__fp_zero>:
 54e:	e8 94       	clt

00000550 <__fp_szero>:
 550:	bb 27       	eor	r27, r27
 552:	66 27       	eor	r22, r22
 554:	77 27       	eor	r23, r23
 556:	cb 01       	movw	r24, r22
 558:	97 f9       	bld	r25, 7
 55a:	08 95       	ret

0000055c <__gesf2>:
 55c:	0e 94 20 03 	call	0x640	; 0x640 <__fp_cmp>
 560:	08 f4       	brcc	.+2      	; 0x564 <__gesf2+0x8>
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	08 95       	ret

00000566 <__mulsf3>:
 566:	0e 94 c6 02 	call	0x58c	; 0x58c <__mulsf3x>
 56a:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_round>
 56e:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_pscA>
 572:	38 f0       	brcs	.+14     	; 0x582 <__mulsf3+0x1c>
 574:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_pscB>
 578:	20 f0       	brcs	.+8      	; 0x582 <__mulsf3+0x1c>
 57a:	95 23       	and	r25, r21
 57c:	11 f0       	breq	.+4      	; 0x582 <__mulsf3+0x1c>
 57e:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_inf>
 582:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_nan>
 586:	11 24       	eor	r1, r1
 588:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>

0000058c <__mulsf3x>:
 58c:	0e 94 85 02 	call	0x50a	; 0x50a <__fp_split3>
 590:	70 f3       	brcs	.-36     	; 0x56e <__mulsf3+0x8>

00000592 <__mulsf3_pse>:
 592:	95 9f       	mul	r25, r21
 594:	c1 f3       	breq	.-16     	; 0x586 <__mulsf3+0x20>
 596:	95 0f       	add	r25, r21
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	55 1f       	adc	r21, r21
 59c:	62 9f       	mul	r22, r18
 59e:	f0 01       	movw	r30, r0
 5a0:	72 9f       	mul	r23, r18
 5a2:	bb 27       	eor	r27, r27
 5a4:	f0 0d       	add	r31, r0
 5a6:	b1 1d       	adc	r27, r1
 5a8:	63 9f       	mul	r22, r19
 5aa:	aa 27       	eor	r26, r26
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	aa 1f       	adc	r26, r26
 5b2:	64 9f       	mul	r22, r20
 5b4:	66 27       	eor	r22, r22
 5b6:	b0 0d       	add	r27, r0
 5b8:	a1 1d       	adc	r26, r1
 5ba:	66 1f       	adc	r22, r22
 5bc:	82 9f       	mul	r24, r18
 5be:	22 27       	eor	r18, r18
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	62 1f       	adc	r22, r18
 5c6:	73 9f       	mul	r23, r19
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	83 9f       	mul	r24, r19
 5d0:	a0 0d       	add	r26, r0
 5d2:	61 1d       	adc	r22, r1
 5d4:	22 1f       	adc	r18, r18
 5d6:	74 9f       	mul	r23, r20
 5d8:	33 27       	eor	r19, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	23 1f       	adc	r18, r19
 5e0:	84 9f       	mul	r24, r20
 5e2:	60 0d       	add	r22, r0
 5e4:	21 1d       	adc	r18, r1
 5e6:	82 2f       	mov	r24, r18
 5e8:	76 2f       	mov	r23, r22
 5ea:	6a 2f       	mov	r22, r26
 5ec:	11 24       	eor	r1, r1
 5ee:	9f 57       	subi	r25, 0x7F	; 127
 5f0:	50 40       	sbci	r21, 0x00	; 0
 5f2:	9a f0       	brmi	.+38     	; 0x61a <__mulsf3_pse+0x88>
 5f4:	f1 f0       	breq	.+60     	; 0x632 <__mulsf3_pse+0xa0>
 5f6:	88 23       	and	r24, r24
 5f8:	4a f0       	brmi	.+18     	; 0x60c <__mulsf3_pse+0x7a>
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	bb 1f       	adc	r27, r27
 600:	66 1f       	adc	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	88 1f       	adc	r24, r24
 606:	91 50       	subi	r25, 0x01	; 1
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	a9 f7       	brne	.-22     	; 0x5f6 <__mulsf3_pse+0x64>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	80 f0       	brcs	.+32     	; 0x632 <__mulsf3_pse+0xa0>
 612:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_inf>
 616:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	e4 f3       	brlt	.-8      	; 0x616 <__mulsf3_pse+0x84>
 61e:	98 3e       	cpi	r25, 0xE8	; 232
 620:	d4 f3       	brlt	.-12     	; 0x616 <__mulsf3_pse+0x84>
 622:	86 95       	lsr	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	f7 95       	ror	r31
 62c:	e7 95       	ror	r30
 62e:	9f 5f       	subi	r25, 0xFF	; 255
 630:	c1 f7       	brne	.-16     	; 0x622 <__mulsf3_pse+0x90>
 632:	fe 2b       	or	r31, r30
 634:	88 0f       	add	r24, r24
 636:	91 1d       	adc	r25, r1
 638:	96 95       	lsr	r25
 63a:	87 95       	ror	r24
 63c:	97 f9       	bld	r25, 7
 63e:	08 95       	ret

00000640 <__fp_cmp>:
 640:	99 0f       	add	r25, r25
 642:	00 08       	sbc	r0, r0
 644:	55 0f       	add	r21, r21
 646:	aa 0b       	sbc	r26, r26
 648:	e0 e8       	ldi	r30, 0x80	; 128
 64a:	fe ef       	ldi	r31, 0xFE	; 254
 64c:	16 16       	cp	r1, r22
 64e:	17 06       	cpc	r1, r23
 650:	e8 07       	cpc	r30, r24
 652:	f9 07       	cpc	r31, r25
 654:	c0 f0       	brcs	.+48     	; 0x686 <__fp_cmp+0x46>
 656:	12 16       	cp	r1, r18
 658:	13 06       	cpc	r1, r19
 65a:	e4 07       	cpc	r30, r20
 65c:	f5 07       	cpc	r31, r21
 65e:	98 f0       	brcs	.+38     	; 0x686 <__fp_cmp+0x46>
 660:	62 1b       	sub	r22, r18
 662:	73 0b       	sbc	r23, r19
 664:	84 0b       	sbc	r24, r20
 666:	95 0b       	sbc	r25, r21
 668:	39 f4       	brne	.+14     	; 0x678 <__fp_cmp+0x38>
 66a:	0a 26       	eor	r0, r26
 66c:	61 f0       	breq	.+24     	; 0x686 <__fp_cmp+0x46>
 66e:	23 2b       	or	r18, r19
 670:	24 2b       	or	r18, r20
 672:	25 2b       	or	r18, r21
 674:	21 f4       	brne	.+8      	; 0x67e <__fp_cmp+0x3e>
 676:	08 95       	ret
 678:	0a 26       	eor	r0, r26
 67a:	09 f4       	brne	.+2      	; 0x67e <__fp_cmp+0x3e>
 67c:	a1 40       	sbci	r26, 0x01	; 1
 67e:	a6 95       	lsr	r26
 680:	8f ef       	ldi	r24, 0xFF	; 255
 682:	81 1d       	adc	r24, r1
 684:	81 1d       	adc	r24, r1
 686:	08 95       	ret

00000688 <_exit>:
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>

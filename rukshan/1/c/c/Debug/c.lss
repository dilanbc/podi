
c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d8  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000269  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000379  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  000015c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/interrupt.h>

volatile uint8_t i=0;
volatile bool dir=0;
int main(void)
{	DDRB=0b11111111;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTD|=(0b11);
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	83 60       	ori	r24, 0x03	; 3
  98:	8b b9       	out	0x0b, r24	; 11
	TCCR1B|=(1<<WGM12);//ctc
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	80 83       	st	Z, r24
	TCCR1B|=(1<<CS12); //prescaler=256
  a4:	80 81       	ld	r24, Z
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	80 83       	st	Z, r24
	TCNT1=0;
  aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A=31250;
  b2:	82 e1       	ldi	r24, 0x12	; 18
  b4:	9a e7       	ldi	r25, 0x7A	; 122
  b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//
	PCICR|=(1<<PCIE2);
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	80 83       	st	Z, r24
	PCMSK2|=(0b11);
  c8:	ed e6       	ldi	r30, 0x6D	; 109
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24
	sei();
  d2:	78 94       	sei
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x44>

000000d6 <__vector_11>:
	while (1)
	{
	}
}

ISR(TIMER1_COMPA_vect){
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
	TCNT1=0;
  e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	if (!dir)
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	81 11       	cpse	r24, r1
  f0:	06 c0       	rjmp	.+12     	; 0xfe <__vector_11+0x28>
	{i++;
  f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i>
  fc:	05 c0       	rjmp	.+10     	; 0x108 <__vector_11+0x32>
	} 
	else
	{i--;
  fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i>
 102:	81 50       	subi	r24, 0x01	; 1
 104:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i>
	}
	
	PORTB=i;
 108:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i>
 10c:	85 b9       	out	0x05, r24	; 5
}
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_5>:

ISR(PCINT2_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	if (!(PIND&0b1))
 12c:	48 99       	sbic	0x09, 0	; 9
 12e:	06 c0       	rjmp	.+12     	; 0x13c <__vector_5+0x22>
	{TIMSK1^=(1<<OCIE1A);
 130:	ef e6       	ldi	r30, 0x6F	; 111
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	89 27       	eor	r24, r25
 13a:	80 83       	st	Z, r24
	}
	if (!(PIND&0b10))
 13c:	49 99       	sbic	0x09, 1	; 9
 13e:	05 c0       	rjmp	.+10     	; 0x14a <__vector_5+0x30>
	{dir=~dir;
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>

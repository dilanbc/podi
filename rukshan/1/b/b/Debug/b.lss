
b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e7  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000635  00000000  00000000  0000095f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a3  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000379  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001631  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile bool dir=0;
volatile bool mainb=0;
volatile bool dirb=0;

int main(void)
{	DDRB=0b11111111;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTD|=(0b11);
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	83 60       	ori	r24, 0x03	; 3
  98:	8b b9       	out	0x0b, r24	; 11
	TCCR1B|=(1<<WGM12);//ctc
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	80 83       	st	Z, r24
	TCCR1B|=(1<<CS12); //prescaler=256
  a4:	80 81       	ld	r24, Z
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	80 83       	st	Z, r24
	TCNT1=0;
  aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	OCR1A=31250;
  b2:	82 e1       	ldi	r24, 0x12	; 18
  b4:	9a e7       	ldi	r25, 0x7A	; 122
  b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	sei();
  be:	78 94       	sei
	
	
	while (1)
	{
		if ((!(PIND&0b1))&&(!mainb))
  c0:	48 99       	sbic	0x09, 0	; 9
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <main+0x40>
  c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mainb>
  c8:	88 23       	and	r24, r24
  ca:	21 f0       	breq	.+8      	; 0xd4 <main+0x44>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <main+0x46>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x46>
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	88 23       	and	r24, r24
  d8:	49 f0       	breq	.+18     	; 0xec <main+0x5c>
		{TIMSK1^=(1<<OCIE1A);
  da:	ef e6       	ldi	r30, 0x6F	; 111
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	89 27       	eor	r24, r25
  e4:	80 83       	st	Z, r24
		mainb=1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mainb>
		}
		if (PIND&0b1)
  ec:	48 99       	sbic	0x09, 0	; 9
		{mainb=0;
  ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <mainb>
		}
		
		 if ((!(PIND&0b10))&&(!dirb))
  f2:	49 99       	sbic	0x09, 1	; 9
  f4:	06 c0       	rjmp	.+12     	; 0x102 <main+0x72>
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	88 23       	and	r24, r24
  fc:	21 f0       	breq	.+8      	; 0x106 <main+0x76>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	03 c0       	rjmp	.+6      	; 0x108 <main+0x78>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	01 c0       	rjmp	.+2      	; 0x108 <main+0x78>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	88 23       	and	r24, r24
 10a:	39 f0       	breq	.+14     	; 0x11a <main+0x8a>
		{dir=~dir;
 10c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dir>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dir>
		dirb=1;
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if (PIND&0b10)
 11a:	49 9b       	sbis	0x09, 1	; 9
 11c:	d1 cf       	rjmp	.-94     	; 0xc0 <main+0x30>
		{dirb=0;
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	ce cf       	rjmp	.-100    	; 0xc0 <main+0x30>

00000124 <__vector_11>:
		
		
	}
}

ISR(TIMER1_COMPA_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
	TCNT1=0;
 130:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 134:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	if (!dir)
 138:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dir>
 13c:	81 11       	cpse	r24, r1
 13e:	06 c0       	rjmp	.+12     	; 0x14c <__vector_11+0x28>
	{i++;
 140:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i>
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <i>
 14a:	05 c0       	rjmp	.+10     	; 0x156 <__vector_11+0x32>
	} 
	else
	{i--;
 14c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i>
 150:	81 50       	subi	r24, 0x01	; 1
 152:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <i>
	}
	
	PORTB=i;
 156:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i>
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>

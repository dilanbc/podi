
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ba  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005db  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000297  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001599  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z12stepperMotorhj>:
    }
}

void stepperMotor(uint8_t side,uint16_t cycle){

stepperPORT=(stepperPORT&0b11100111)|(side<<3);
  6c:	25 b3       	in	r18, 0x15	; 21
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	88 0f       	add	r24, r24
  76:	99 1f       	adc	r25, r25
  78:	88 0f       	add	r24, r24
  7a:	99 1f       	adc	r25, r25
  7c:	92 2f       	mov	r25, r18
  7e:	97 7e       	andi	r25, 0xE7	; 231
  80:	89 2b       	or	r24, r25
  82:	85 bb       	out	0x15, r24	; 21

for(uint16_t i=0;i<cycle;i++){
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	26 17       	cp	r18, r22
  8a:	37 07       	cpc	r19, r23
  8c:	a8 f4       	brcc	.+42     	; 0xb8 <_Z12stepperMotorhj+0x4c>
stepperPORT|=(1<<STEPL);
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	80 62       	ori	r24, 0x20	; 32
  92:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ec       	ldi	r24, 0xCF	; 207
  96:	97 e0       	ldi	r25, 0x07	; 7
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <_Z12stepperMotorhj+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_Z12stepperMotorhj+0x32>
  9e:	00 00       	nop
_delay_us(1000);
stepperPORT&=~(1<<STEPL);
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	8f ec       	ldi	r24, 0xCF	; 207
  a8:	97 e0       	ldi	r25, 0x07	; 7
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z12stepperMotorhj+0x3e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z12stepperMotorhj+0x44>
  b0:	00 00       	nop

void stepperMotor(uint8_t side,uint16_t cycle){

stepperPORT=(stepperPORT&0b11100111)|(side<<3);

for(uint16_t i=0;i<cycle;i++){
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	e8 cf       	rjmp	.-48     	; 0x88 <_Z12stepperMotorhj+0x1c>
  b8:	08 95       	ret

000000ba <main>:

void stepperMotor(uint8_t side,uint16_t cycle);

int main(void)
{
    stepperDDR|=(1<<DIRL)|(1<<STEPL);
  ba:	84 b3       	in	r24, 0x14	; 20
  bc:	80 63       	ori	r24, 0x30	; 48
  be:	84 bb       	out	0x14, r24	; 20
	DDRC|=(1<<6);
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	84 bb       	out	0x14, r24	; 20
	PORTC|=(1<<6);
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	85 bb       	out	0x15, r24	; 21
	 stepperMotor(1,500);
  cc:	64 ef       	ldi	r22, 0xF4	; 244
  ce:	71 e0       	ldi	r23, 0x01	; 1
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z12stepperMotorhj>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x1c>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>

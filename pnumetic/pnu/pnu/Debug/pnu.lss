
pnu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000030e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000380  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000807  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000478  00000000  00000000  00000c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056e  00000000  00000000  00001087  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034c  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f1  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001e41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	9d c0       	rjmp	.+314    	; 0x140 <__vector_2>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	db c0       	rjmp	.+438    	; 0x1ca <__vector_9>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a1 36       	cpi	r26, 0x61	; 97
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	20 d0       	rcall	.+64     	; 0x6e <main>
  2e:	33 c1       	rjmp	.+614    	; 0x296 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <_Z9inputReadv>:

volatile uint8_t State =0;


bool inputRead() {return PINB&(1<<input);}
bool powerDowntRead() {return PINB&(1<<powerdown);}
  32:	86 b3       	in	r24, 0x16	; 22
  34:	83 fb       	bst	r24, 3
  36:	88 27       	eor	r24, r24
  38:	80 f9       	bld	r24, 0
  3a:	08 95       	ret

0000003c <_Z8setStatev>:
		
		
    }
}
void setState(){
	if (State==0)
  3c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  40:	81 11       	cpse	r24, r1
  42:	02 c0       	rjmp	.+4      	; 0x48 <__SREG__+0x9>
	{PORTB&=~(1<<r0);
  44:	c0 98       	cbi	0x18, 0	; 24
		PORTB&=~(1<<r1);
  46:	c1 98       	cbi	0x18, 1	; 24
	}
	if (State==1)
  48:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  4c:	81 30       	cpi	r24, 0x01	; 1
  4e:	11 f4       	brne	.+4      	; 0x54 <__SREG__+0x15>
	{PORTB|=(1<<r0);
  50:	c0 9a       	sbi	0x18, 0	; 24
		PORTB&=~(1<<r1);
  52:	c1 98       	cbi	0x18, 1	; 24
	}
	if (State==2)
  54:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  58:	82 30       	cpi	r24, 0x02	; 2
  5a:	11 f4       	brne	.+4      	; 0x60 <__SREG__+0x21>
	{PORTB&=~(1<<r0);
  5c:	c0 98       	cbi	0x18, 0	; 24
		PORTB&=~(1<<r1);
  5e:	c1 98       	cbi	0x18, 1	; 24
	}
	if (State==3)
  60:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  64:	83 30       	cpi	r24, 0x03	; 3
  66:	11 f4       	brne	.+4      	; 0x6c <__SREG__+0x2d>
	{PORTB&=~(1<<r0);
  68:	c0 98       	cbi	0x18, 0	; 24
		PORTB|=(1<<r1);
  6a:	c1 9a       	sbi	0x18, 1	; 24
  6c:	08 95       	ret

0000006e <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	2f eb       	ldi	r18, 0xBF	; 191
  70:	84 ed       	ldi	r24, 0xD4	; 212
  72:	91 e0       	ldi	r25, 0x01	; 1
  74:	21 50       	subi	r18, 0x01	; 1
  76:	80 40       	sbci	r24, 0x00	; 0
  78:	90 40       	sbci	r25, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <main+0x6>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <main+0x10>
  7e:	00 00       	nop
int main(void)
{
	_delay_ms(500);
	
	
	State =eeprom_read_byte((uint8_t*)12);
  80:	8c e0       	ldi	r24, 0x0C	; 12
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	f4 d0       	rcall	.+488    	; 0x26e <eeprom_read_byte>
  86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	switch(State){
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	31 f0       	breq	.+12     	; 0x9e <main+0x30>
  92:	d0 f0       	brcs	.+52     	; 0xc8 <__stack+0x29>
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	f9 f0       	breq	.+62     	; 0xd6 <__stack+0x37>
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	61 f0       	breq	.+24     	; 0xb4 <__stack+0x15>
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__stack+0x43>
		case 1: if (inputRead())
  9e:	c9 df       	rcall	.-110    	; 0x32 <_Z9inputReadv>
  a0:	88 23       	and	r24, r24
  a2:	21 f0       	breq	.+8      	; 0xac <__stack+0xd>
		{ State=3;
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	1b c0       	rjmp	.+54     	; 0xe2 <__stack+0x43>
		}
		else{State=2;}
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	17 c0       	rjmp	.+46     	; 0xe2 <__stack+0x43>
		 break;
		 
		case 3: if (inputRead())
  b4:	be df       	rcall	.-132    	; 0x32 <_Z9inputReadv>
  b6:	88 23       	and	r24, r24
  b8:	21 f0       	breq	.+8      	; 0xc2 <__stack+0x23>
		{ State=1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  c0:	10 c0       	rjmp	.+32     	; 0xe2 <__stack+0x43>
		}
		else{State=0;}
  c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  c6:	0d c0       	rjmp	.+26     	; 0xe2 <__stack+0x43>
		break;
		
		case 0:if (inputRead())
  c8:	b4 df       	rcall	.-152    	; 0x32 <_Z9inputReadv>
  ca:	88 23       	and	r24, r24
  cc:	51 f0       	breq	.+20     	; 0xe2 <__stack+0x43>
		{State=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <__stack+0x43>
		}
		break;
		
		case 2:if (inputRead())
  d6:	ad df       	rcall	.-166    	; 0x32 <_Z9inputReadv>
  d8:	88 23       	and	r24, r24
  da:	19 f0       	breq	.+6      	; 0xe2 <__stack+0x43>
		{State=3;
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		 
	}
	
	DDRB|=(1<<show)|(1<<r1)|(1<<r0);
  e2:	87 b3       	in	r24, 0x17	; 23
  e4:	83 61       	ori	r24, 0x13	; 19
  e6:	87 bb       	out	0x17, r24	; 23
	for(uint8_t i=0;i<State+1;i++){
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	20 e0       	ldi	r18, 0x00	; 0
		PORTB|=(1<<show);
  ee:	c4 9a       	sbi	0x18, 4	; 24
  f0:	8f e2       	ldi	r24, 0x2F	; 47
  f2:	95 e7       	ldi	r25, 0x75	; 117
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <__stack+0x55>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <__stack+0x5b>
  fa:	00 00       	nop
		_delay_ms(100);
		PORTB&=~(1<<show);
  fc:	c4 98       	cbi	0x18, 4	; 24
  fe:	8f e2       	ldi	r24, 0x2F	; 47
 100:	95 e7       	ldi	r25, 0x75	; 117
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <__stack+0x63>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__stack+0x69>
 108:	00 00       	nop
		}
		 
	}
	
	DDRB|=(1<<show)|(1<<r1)|(1<<r0);
	for(uint8_t i=0;i<State+1;i++){
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 110:	42 2f       	mov	r20, r18
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	48 17       	cp	r20, r24
 11a:	59 07       	cpc	r21, r25
 11c:	44 f3       	brlt	.-48     	; 0xee <__stack+0x4f>
		_delay_ms(100);
		
	}
	
	
	GIMSK|=(1<<PCIE); //pin change inttupet enable
 11e:	8b b7       	in	r24, 0x3b	; 59
 120:	80 62       	ori	r24, 0x20	; 32
 122:	8b bf       	out	0x3b, r24	; 59
	DDRB&=~(1<<input);//define input pin
 124:	bb 98       	cbi	0x17, 3	; 23
	PCMSK|=(1<<input);  // select input pin as pin change
 126:	ab 9a       	sbi	0x15, 3	; 21
    if (inputRead())
 128:	84 df       	rcall	.-248    	; 0x32 <_Z9inputReadv>
 12a:	81 11       	cpse	r24, r1
    {setState();
 12c:	87 df       	rcall	.-242    	; 0x3c <_Z8setStatev>
    }
	
	DDRB&=~(1<<powerdown); //define power down
 12e:	ba 98       	cbi	0x17, 2	; 23
	ADMUX&=~(1<<REFS0);
 130:	3e 98       	cbi	0x07, 6	; 7
	ADMUX|=(1<<MUX0);
 132:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE);
 134:	86 b1       	in	r24, 0x06	; 6
 136:	8f 68       	ori	r24, 0x8F	; 143
 138:	86 b9       	out	0x06, r24	; 6

	
	ADCSRA |= (1<<ADSC); //start
 13a:	36 9a       	sbi	0x06, 6	; 6
	
	
	
	
   
   sei();
 13c:	78 94       	sei
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stack+0x9f>

00000140 <__vector_2>:
	}
	
}


ISR (PCINT0_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	if (inputRead()!=State%2)
 166:	65 df       	rcall	.-310    	; 0x32 <_Z9inputReadv>
 168:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	21 70       	andi	r18, 0x01	; 1
 170:	c2 2f       	mov	r28, r18
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	d2 2f       	mov	r29, r18
 176:	8c 17       	cp	r24, r28
 178:	9d 07       	cpc	r25, r29
 17a:	a1 f0       	breq	.+40     	; 0x1a4 <__vector_2+0x64>
	{PORTB|=(1<<show);
 17c:	c4 9a       	sbi	0x18, 4	; 24
		State++;
 17e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (State>3)
 188:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	10 f0       	brcs	.+4      	; 0x194 <__vector_2+0x54>
		{State=0;
 190:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		setState();
 194:	53 df       	rcall	.-346    	; 0x3c <_Z8setStatev>
 196:	8f e2       	ldi	r24, 0x2F	; 47
 198:	95 e7       	ldi	r25, 0x75	; 117
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <__vector_2+0x5a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <__vector_2+0x60>
 1a0:	00 00       	nop
		_delay_ms(100);
		
		PORTB&=~(1<<show);
 1a2:	c4 98       	cbi	0x18, 4	; 24
		
	}
	
	
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <__vector_9>:

ISR(ADC_vect){
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	if (ADC<500){
 1ec:	84 b1       	in	r24, 0x04	; 4
 1ee:	95 b1       	in	r25, 0x05	; 5
 1f0:	84 3f       	cpi	r24, 0xF4	; 244
 1f2:	91 40       	sbci	r25, 0x01	; 1
 1f4:	50 f5       	brcc	.+84     	; 0x24a <__vector_9+0x80>
		
		eeprom_write_byte((uint8_t*)12,State);
 1f6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fa:	8c e0       	ldi	r24, 0x0C	; 12
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	3e d0       	rcall	.+124    	; 0x27c <eeprom_write_byte>
		for(uint8_t i=0;i<State+1;i++){
 200:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 204:	20 e0       	ldi	r18, 0x00	; 0
			PORTB|=(1<<show);
 206:	c4 9a       	sbi	0x18, 4	; 24
 208:	8f e2       	ldi	r24, 0x2F	; 47
 20a:	95 e7       	ldi	r25, 0x75	; 117
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <__vector_9+0x42>
 210:	00 c0       	rjmp	.+0      	; 0x212 <__vector_9+0x48>
 212:	00 00       	nop
			_delay_ms(100);
			PORTB&=~(1<<show);
 214:	c4 98       	cbi	0x18, 4	; 24
 216:	8f e2       	ldi	r24, 0x2F	; 47
 218:	95 e7       	ldi	r25, 0x75	; 117
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <__vector_9+0x50>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <__vector_9+0x56>
 220:	00 00       	nop

ISR(ADC_vect){
	if (ADC<500){
		
		eeprom_write_byte((uint8_t*)12,State);
		for(uint8_t i=0;i<State+1;i++){
 222:	2f 5f       	subi	r18, 0xFF	; 255
 224:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 228:	42 2f       	mov	r20, r18
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	48 17       	cp	r20, r24
 232:	59 07       	cpc	r21, r25
 234:	44 f3       	brlt	.-48     	; 0x206 <__vector_9+0x3c>
			PORTB|=(1<<show);
			_delay_ms(100);
			PORTB&=~(1<<show);
			_delay_ms(100);
			
		}PORTB|=(1<<show);
 236:	c4 9a       	sbi	0x18, 4	; 24
 238:	9f ef       	ldi	r25, 0xFF	; 255
 23a:	22 e5       	ldi	r18, 0x52	; 82
 23c:	87 e0       	ldi	r24, 0x07	; 7
 23e:	91 50       	subi	r25, 0x01	; 1
 240:	20 40       	sbci	r18, 0x00	; 0
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <__vector_9+0x74>
 246:	00 c0       	rjmp	.+0      	; 0x248 <__vector_9+0x7e>
 248:	00 00       	nop
		_delay_ms(2000);
		
	}
	
	ADCSRA |= (1<<ADSC); //start
 24a:	36 9a       	sbi	0x06, 6	; 6
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <eeprom_read_byte>:
 26e:	e1 99       	sbic	0x1c, 1	; 28
 270:	fe cf       	rjmp	.-4      	; 0x26e <eeprom_read_byte>
 272:	8e bb       	out	0x1e, r24	; 30
 274:	e0 9a       	sbi	0x1c, 0	; 28
 276:	99 27       	eor	r25, r25
 278:	8d b3       	in	r24, 0x1d	; 29
 27a:	08 95       	ret

0000027c <eeprom_write_byte>:
 27c:	26 2f       	mov	r18, r22

0000027e <eeprom_write_r18>:
 27e:	e1 99       	sbic	0x1c, 1	; 28
 280:	fe cf       	rjmp	.-4      	; 0x27e <eeprom_write_r18>
 282:	1c ba       	out	0x1c, r1	; 28
 284:	8e bb       	out	0x1e, r24	; 30
 286:	2d bb       	out	0x1d, r18	; 29
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	e2 9a       	sbi	0x1c, 2	; 28
 28e:	e1 9a       	sbi	0x1c, 1	; 28
 290:	0f be       	out	0x3f, r0	; 63
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	08 95       	ret

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>

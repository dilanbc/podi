
upgrade.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000406  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000406  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080011c  0080011c  000004b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e20  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082d  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050b  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000020e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c3  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ae  00000000  00000000  000027ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002f9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  9e:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
	
	char fString[10];
	dtostrf(number,length,deciP,fString);
	USART_TxString(fString);
	
}
  a6:	9c 01       	movw	r18, r24
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e2       	ldi	r22, 0x20	; 32
  ae:	71 ea       	ldi	r23, 0xA1	; 161
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodsi4>
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
  bc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  c0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c4:	88 e9       	ldi	r24, 0x98	; 152
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <_Z14USART_Transmith>:
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	95 ff       	sbrs	r25, 5
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <_Z14USART_Transmith+0x4>
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e2:	08 95       	ret

000000e4 <_Z14USART_TxStringPc>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <_Z14USART_TxStringPc+0x18>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
  f6:	89 91       	ld	r24, Y+
  f8:	81 11       	cpse	r24, r1
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <_Z14USART_TxStringPc+0xe>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <_Z16USART_TxStringlnPc>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	31 f0       	breq	.+12     	; 0x11a <_Z16USART_TxStringlnPc+0x18>
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 114:	89 91       	ld	r24, Y+
 116:	81 11       	cpse	r24, r1
 118:	fb cf       	rjmp	.-10     	; 0x110 <_Z16USART_TxStringlnPc+0xe>
 11a:	8d e0       	ldi	r24, 0x0D	; 13
 11c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <__vector_18>:


ISR(USART_RX_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	3f 93       	push	r19
 13a:	4f 93       	push	r20
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	//PORTB^=1<<0;
	char rchar=UDR0;
 148:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 14c:	ec e1       	ldi	r30, 0x1C	; 28
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	df 01       	movw	r26, r30
	
	uint8_t i=0;
 152:	80 e0       	ldi	r24, 0x00	; 0
	
	while(rxvalue[i]){
 154:	9d 91       	ld	r25, X+
 156:	99 23       	and	r25, r25
 158:	a1 f0       	breq	.+40     	; 0x182 <__vector_18+0x56>
	i++;
 15a:	8f 5f       	subi	r24, 0xFF	; 255
	if (i==rxshiftNum)
 15c:	84 31       	cpi	r24, 0x14	; 20
 15e:	d1 f7       	brne	.-12     	; 0x154 <__vector_18+0x28>
 160:	06 c0       	rjmp	.+12     	; 0x16e <__vector_18+0x42>
	{break;
	}
	}
	if (i<rxshiftNum)
	{rxvalue[i]=rchar;
 162:	e8 2f       	mov	r30, r24
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e4 5e       	subi	r30, 0xE4	; 228
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	40 83       	st	Z, r20
 16c:	0d c0       	rjmp	.+26     	; 0x188 <__vector_18+0x5c>
 16e:	2f e2       	ldi	r18, 0x2F	; 47
 170:	31 e0       	ldi	r19, 0x01	; 1
	} 
	else
	{
		for(uint8_t i=0;i<rxshiftNum-1;i++){
		rxvalue[i]=rxvalue[i+1];
 172:	81 81       	ldd	r24, Z+1	; 0x01
 174:	81 93       	st	Z+, r24
	if (i<rxshiftNum)
	{rxvalue[i]=rchar;
	} 
	else
	{
		for(uint8_t i=0;i<rxshiftNum-1;i++){
 176:	e2 17       	cp	r30, r18
 178:	f3 07       	cpc	r31, r19
 17a:	d9 f7       	brne	.-10     	; 0x172 <__vector_18+0x46>
		rxvalue[i]=rxvalue[i+1];
	}
	rxvalue[rxshiftNum-1]=rchar;
 17c:	40 93 2f 01 	sts	0x012F, r20	; 0x80012f <__data_end+0x13>
		
	}
	
		
}
 180:	03 c0       	rjmp	.+6      	; 0x188 <__vector_18+0x5c>
	i++;
	if (i==rxshiftNum)
	{break;
	}
	}
	if (i<rxshiftNum)
 182:	84 31       	cpi	r24, 0x14	; 20
 184:	70 f3       	brcs	.-36     	; 0x162 <__vector_18+0x36>
 186:	f3 cf       	rjmp	.-26     	; 0x16e <__vector_18+0x42>
	rxvalue[rxshiftNum-1]=rchar;
		
	}
	
		
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_Z16USART_ReciveWaitPcib>:



bool USART_ReciveWait(char*wait=0,int16_t timeout=0,bool deleteWait=0){
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
	bool waitbool=0;
	timeout/=100;
	uint8_t temptimeOut=0;
	if (wait!=0)
 1b2:	00 97       	sbiw	r24, 0x00	; 0
 1b4:	c1 f1       	breq	.+112    	; 0x226 <_Z16USART_ReciveWaitPcib+0x82>
 1b6:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	80 e7       	ldi	r24, 0x70	; 112
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <_Z16USART_ReciveWaitPcib+0x1a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <_Z16USART_ReciveWaitPcib+0x24>
 1c8:	00 00       	nop



bool USART_ReciveWait(char*wait=0,int16_t timeout=0,bool deleteWait=0){
	bool waitbool=0;
	timeout/=100;
 1ca:	cb 01       	movw	r24, r22
 1cc:	64 e6       	ldi	r22, 0x64	; 100
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0e 94 9d 01 	call	0x33a	; 0x33a <__divmodhi4>
 1d4:	8b 01       	movw	r16, r22
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
			//SoftUSART_tx_strln(".");
			//SoftUSART_tx_strln(rxvalue);
			
			_delay_ms(100);
			temptimeOut++;
			if ((temptimeOut>timeout)&(timeout!=0))
 1d8:	d1 e0       	ldi	r29, 0x01	; 1
 1da:	d1 2c       	mov	r13, r1
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <_Z16USART_ReciveWaitPcib+0x3e>
	timeout/=100;
	uint8_t temptimeOut=0;
	if (wait!=0)
	{  _delay_ms(100);
		char*tempwait;
		while(tempwait==0){
 1de:	45 2b       	or	r20, r21
 1e0:	21 f5       	brne	.+72     	; 0x22a <_Z16USART_ReciveWaitPcib+0x86>
			tempwait =strstr(rxvalue,wait);
 1e2:	b7 01       	movw	r22, r14
 1e4:	8c e1       	ldi	r24, 0x1C	; 28
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <strstr>
 1ec:	ac 01       	movw	r20, r24
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	80 e7       	ldi	r24, 0x70	; 112
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <_Z16USART_ReciveWaitPcib+0x50>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_Z16USART_ReciveWaitPcib+0x5a>
 1fe:	00 00       	nop
			//SoftUSART_tx_strln(".");
			//SoftUSART_tx_strln(rxvalue);
			
			_delay_ms(100);
			temptimeOut++;
 200:	cf 5f       	subi	r28, 0xFF	; 255
			if ((temptimeOut>timeout)&(timeout!=0))
 202:	2c 2f       	mov	r18, r28
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	9d 2f       	mov	r25, r29
 208:	02 17       	cp	r16, r18
 20a:	13 07       	cpc	r17, r19
 20c:	0c f0       	brlt	.+2      	; 0x210 <_Z16USART_ReciveWaitPcib+0x6c>
 20e:	9d 2d       	mov	r25, r13
 210:	99 23       	and	r25, r25
 212:	29 f3       	breq	.-54     	; 0x1de <_Z16USART_ReciveWaitPcib+0x3a>
 214:	8d 2f       	mov	r24, r29
 216:	01 15       	cp	r16, r1
 218:	11 05       	cpc	r17, r1
 21a:	09 f4       	brne	.+2      	; 0x21e <_Z16USART_ReciveWaitPcib+0x7a>
 21c:	8d 2d       	mov	r24, r13
 21e:	88 23       	and	r24, r24
 220:	f1 f2       	breq	.-68     	; 0x1de <_Z16USART_ReciveWaitPcib+0x3a>
			{waitbool=0;
				return waitbool;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	03 c0       	rjmp	.+6      	; 0x22c <_Z16USART_ReciveWaitPcib+0x88>
}



bool USART_ReciveWait(char*wait=0,int16_t timeout=0,bool deleteWait=0){
	bool waitbool=0;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	01 c0       	rjmp	.+2      	; 0x22c <_Z16USART_ReciveWaitPcib+0x88>
				return waitbool;
				
			}
			
		}
		waitbool=1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	return waitbool;
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	08 95       	ret

0000023c <_Z13USART_ClearRXv>:


void USART_ClearRX(){
 23c:	ec e1       	ldi	r30, 0x1C	; 28
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	80 e3       	ldi	r24, 0x30	; 48
 242:	91 e0       	ldi	r25, 0x01	; 1
	for(uint8_t i=0;i<rxshiftNum;i++){
		rxvalue[i]=NULL;
 244:	11 92       	st	Z+, r1
	return waitbool;
}


void USART_ClearRX(){
	for(uint8_t i=0;i<rxshiftNum;i++){
 246:	e8 17       	cp	r30, r24
 248:	f9 07       	cpc	r31, r25
 24a:	e1 f7       	brne	.-8      	; 0x244 <_Z13USART_ClearRXv+0x8>
		rxvalue[i]=NULL;
	}
	
 24c:	08 95       	ret

0000024e <main>:



int main(void)
{
    USART_Init(2400);
 24e:	80 e6       	ldi	r24, 0x60	; 96
 250:	99 e0       	ldi	r25, 0x09	; 9
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
	
	/*set pin*/
	DDRC|=(1<<5);
 256:	3d 9a       	sbi	0x07, 5	; 7
	PORTC&=~(1<<5);
 258:	45 98       	cbi	0x08, 5	; 8
	
	/*led*/
	DDRC|=(1<<0)|(1<<1)|(1<<2);
 25a:	87 b1       	in	r24, 0x07	; 7
 25c:	87 60       	ori	r24, 0x07	; 7
 25e:	87 b9       	out	0x07, r24	; 7
	PORTC|=(1<<BLUL);
 260:	42 9a       	sbi	0x08, 2	; 8
	
	/*stereo*/
	DDRD&=~(1<<2);
 262:	52 98       	cbi	0x0a, 2	; 10
	DDRD&=~(1<<3);
 264:	53 98       	cbi	0x0a, 3	; 10
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	84 e3       	ldi	r24, 0x34	; 52
 26a:	9c e0       	ldi	r25, 0x0C	; 12
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x1e>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x28>
 276:	00 00       	nop
	
	_delay_ms(500);
	USART_ClearRX();
 278:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z13USART_ClearRXv>
	USART_TxStringln("AT");
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 81 00 	call	0x102	; 0x102 <_Z16USART_TxStringlnPc>
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	84 e3       	ldi	r24, 0x34	; 52
 288:	9c e0       	ldi	r25, 0x0C	; 12
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x3c>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x46>
 294:	00 00       	nop
	_delay_ms(500);
	
	USART_ClearRX();
 296:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z13USART_ClearRXv>
	USART_TxStringln("AT");
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 81 00 	call	0x102	; 0x102 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",500);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	64 ef       	ldi	r22, 0xF4	; 244
 2a6:	71 e0       	ldi	r23, 0x01	; 1
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z16USART_ReciveWaitPcib>
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	84 e3       	ldi	r24, 0x34	; 52
 2b4:	9c e0       	ldi	r25, 0x0C	; 12
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x68>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x72>
 2c0:	00 00       	nop
	_delay_ms(500);*/

	
	/*end setting*/
	
	USART_ClearRX();
 2c2:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z13USART_ClearRXv>
	USART_TxStringln("AT+P8");
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 81 00 	call	0x102	; 0x102 <_Z16USART_TxStringlnPc>
	USART_ReciveWait("OK",500);
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	64 ef       	ldi	r22, 0xF4	; 244
 2d2:	71 e0       	ldi	r23, 0x01	; 1
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z16USART_ReciveWaitPcib>
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	84 e3       	ldi	r24, 0x34	; 52
 2e0:	9c e0       	ldi	r25, 0x0C	; 12
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x94>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x9e>
 2ec:	00 00       	nop
	_delay_ms(500);
	
	
	PORTC|=(1<<5);
 2ee:	45 9a       	sbi	0x08, 5	; 8
	
    while (1) 
    {	
		
		
		if (PIND&(1<<2))
 2f0:	4a 9b       	sbis	0x09, 2	; 9
 2f2:	08 c0       	rjmp	.+16     	; 0x304 <main+0xb6>
		{PORTC|=(1<<GRNL); PORTC&=~(1<<BLUL);PORTC&=~(1<<REDL);
 2f4:	41 9a       	sbi	0x08, 1	; 8
 2f6:	42 98       	cbi	0x08, 2	; 8
 2f8:	40 98       	cbi	0x08, 0	; 8
		USART_TxString("T4GE");	
 2fa:	8c e0       	ldi	r24, 0x0C	; 12
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z14USART_TxStringPc>
 302:	11 c0       	rjmp	.+34     	; 0x326 <main+0xd8>
		}

		else if (PIND&(1<<3))
 304:	4b 9b       	sbis	0x09, 3	; 9
 306:	08 c0       	rjmp	.+16     	; 0x318 <main+0xca>
		{PORTC|=(1<<REDL); PORTC&=~(1<<BLUL);PORTC&=~(1<<GRNL);
 308:	40 9a       	sbi	0x08, 0	; 8
 30a:	42 98       	cbi	0x08, 2	; 8
 30c:	41 98       	cbi	0x08, 1	; 8
			USART_TxString("T4RE");
 30e:	81 e1       	ldi	r24, 0x11	; 17
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z14USART_TxStringPc>
 316:	07 c0       	rjmp	.+14     	; 0x326 <main+0xd8>
		}
		else
		{PORTC|=(1<<BLUL); PORTC&=~(1<<GRNL);PORTC&=~(1<<REDL);
 318:	42 9a       	sbi	0x08, 2	; 8
 31a:	41 98       	cbi	0x08, 1	; 8
 31c:	40 98       	cbi	0x08, 0	; 8
			USART_TxString("T4BE");
 31e:	86 e1       	ldi	r24, 0x16	; 22
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z14USART_TxStringPc>
 326:	2f e7       	ldi	r18, 0x7F	; 127
 328:	88 e3       	ldi	r24, 0x38	; 56
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0xde>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0xe8>
 336:	00 00       	nop
 338:	db cf       	rjmp	.-74     	; 0x2f0 <main+0xa2>

0000033a <__divmodhi4>:
 33a:	97 fb       	bst	r25, 7
 33c:	07 2e       	mov	r0, r23
 33e:	16 f4       	brtc	.+4      	; 0x344 <__divmodhi4+0xa>
 340:	00 94       	com	r0
 342:	07 d0       	rcall	.+14     	; 0x352 <__divmodhi4_neg1>
 344:	77 fd       	sbrc	r23, 7
 346:	09 d0       	rcall	.+18     	; 0x35a <__divmodhi4_neg2>
 348:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__udivmodhi4>
 34c:	07 fc       	sbrc	r0, 7
 34e:	05 d0       	rcall	.+10     	; 0x35a <__divmodhi4_neg2>
 350:	3e f4       	brtc	.+14     	; 0x360 <__divmodhi4_exit>

00000352 <__divmodhi4_neg1>:
 352:	90 95       	com	r25
 354:	81 95       	neg	r24
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	08 95       	ret

0000035a <__divmodhi4_neg2>:
 35a:	70 95       	com	r23
 35c:	61 95       	neg	r22
 35e:	7f 4f       	sbci	r23, 0xFF	; 255

00000360 <__divmodhi4_exit>:
 360:	08 95       	ret

00000362 <__udivmodsi4>:
 362:	a1 e2       	ldi	r26, 0x21	; 33
 364:	1a 2e       	mov	r1, r26
 366:	aa 1b       	sub	r26, r26
 368:	bb 1b       	sub	r27, r27
 36a:	fd 01       	movw	r30, r26
 36c:	0d c0       	rjmp	.+26     	; 0x388 <__udivmodsi4_ep>

0000036e <__udivmodsi4_loop>:
 36e:	aa 1f       	adc	r26, r26
 370:	bb 1f       	adc	r27, r27
 372:	ee 1f       	adc	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	a2 17       	cp	r26, r18
 378:	b3 07       	cpc	r27, r19
 37a:	e4 07       	cpc	r30, r20
 37c:	f5 07       	cpc	r31, r21
 37e:	20 f0       	brcs	.+8      	; 0x388 <__udivmodsi4_ep>
 380:	a2 1b       	sub	r26, r18
 382:	b3 0b       	sbc	r27, r19
 384:	e4 0b       	sbc	r30, r20
 386:	f5 0b       	sbc	r31, r21

00000388 <__udivmodsi4_ep>:
 388:	66 1f       	adc	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	88 1f       	adc	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	1a 94       	dec	r1
 392:	69 f7       	brne	.-38     	; 0x36e <__udivmodsi4_loop>
 394:	60 95       	com	r22
 396:	70 95       	com	r23
 398:	80 95       	com	r24
 39a:	90 95       	com	r25
 39c:	9b 01       	movw	r18, r22
 39e:	ac 01       	movw	r20, r24
 3a0:	bd 01       	movw	r22, r26
 3a2:	cf 01       	movw	r24, r30
 3a4:	08 95       	ret

000003a6 <__udivmodhi4>:
 3a6:	aa 1b       	sub	r26, r26
 3a8:	bb 1b       	sub	r27, r27
 3aa:	51 e1       	ldi	r21, 0x11	; 17
 3ac:	07 c0       	rjmp	.+14     	; 0x3bc <__udivmodhi4_ep>

000003ae <__udivmodhi4_loop>:
 3ae:	aa 1f       	adc	r26, r26
 3b0:	bb 1f       	adc	r27, r27
 3b2:	a6 17       	cp	r26, r22
 3b4:	b7 07       	cpc	r27, r23
 3b6:	10 f0       	brcs	.+4      	; 0x3bc <__udivmodhi4_ep>
 3b8:	a6 1b       	sub	r26, r22
 3ba:	b7 0b       	sbc	r27, r23

000003bc <__udivmodhi4_ep>:
 3bc:	88 1f       	adc	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	5a 95       	dec	r21
 3c2:	a9 f7       	brne	.-22     	; 0x3ae <__udivmodhi4_loop>
 3c4:	80 95       	com	r24
 3c6:	90 95       	com	r25
 3c8:	bc 01       	movw	r22, r24
 3ca:	cd 01       	movw	r24, r26
 3cc:	08 95       	ret

000003ce <strstr>:
 3ce:	fb 01       	movw	r30, r22
 3d0:	51 91       	ld	r21, Z+
 3d2:	55 23       	and	r21, r21
 3d4:	a9 f0       	breq	.+42     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d6:	bf 01       	movw	r22, r30
 3d8:	dc 01       	movw	r26, r24
 3da:	4d 91       	ld	r20, X+
 3dc:	45 17       	cp	r20, r21
 3de:	41 11       	cpse	r20, r1
 3e0:	e1 f7       	brne	.-8      	; 0x3da <strstr+0xc>
 3e2:	59 f4       	brne	.+22     	; 0x3fa <strstr+0x2c>
 3e4:	cd 01       	movw	r24, r26
 3e6:	01 90       	ld	r0, Z+
 3e8:	00 20       	and	r0, r0
 3ea:	49 f0       	breq	.+18     	; 0x3fe <strstr+0x30>
 3ec:	4d 91       	ld	r20, X+
 3ee:	40 15       	cp	r20, r0
 3f0:	41 11       	cpse	r20, r1
 3f2:	c9 f3       	breq	.-14     	; 0x3e6 <strstr+0x18>
 3f4:	fb 01       	movw	r30, r22
 3f6:	41 11       	cpse	r20, r1
 3f8:	ef cf       	rjmp	.-34     	; 0x3d8 <strstr+0xa>
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>

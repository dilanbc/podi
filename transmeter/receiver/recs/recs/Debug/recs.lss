
recs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000055c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800074  00800074  00000604  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f10  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000724  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073e  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061d  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a00  00000000  00000000  00002c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003661  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	1c c1       	rjmp	.+568    	; 0x240 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	4b c0       	rjmp	.+150    	; 0xae <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e5       	ldi	r30, 0x5C	; 92
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 38       	cpi	r26, 0x8B	; 139
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	42 d1       	rcall	.+644    	; 0x2de <main>
  5a:	7e c2       	rjmp	.+1276   	; 0x558 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z10USART_Initj>:
}

void SoftUSART_TxNumber(int32_t number,uint8_t dtype=10){
	
	itoa(number,Softnum,dtype);
	SoftUSART_tx_str(Softnum);
  5e:	9c 01       	movw	r18, r24
  60:	40 e0       	ldi	r20, 0x00	; 0
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	60 e9       	ldi	r22, 0x90	; 144
  66:	70 ed       	ldi	r23, 0xD0	; 208
  68:	83 e0       	ldi	r24, 0x03	; 3
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	02 d2       	rcall	.+1028   	; 0x472 <__udivmodsi4>
  6e:	83 2f       	mov	r24, r19
  70:	99 27       	eor	r25, r25
  72:	80 bd       	out	0x20, r24	; 32
  74:	29 b9       	out	0x09, r18	; 9
  76:	88 e9       	ldi	r24, 0x98	; 152
  78:	8a b9       	out	0x0a, r24	; 10
  7a:	8e e8       	ldi	r24, 0x8E	; 142
  7c:	80 bd       	out	0x20, r24	; 32
  7e:	78 94       	sei
  80:	08 95       	ret

00000082 <_Z14USART_Transmith>:
  82:	5d 9b       	sbis	0x0b, 5	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <_Z14USART_Transmith>
  86:	8c b9       	out	0x0c, r24	; 12
  88:	08 95       	ret

0000008a <_Z16USART_TxStringlnPc>:
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	ec 01       	movw	r28, r24
  90:	88 81       	ld	r24, Y
  92:	88 23       	and	r24, r24
  94:	29 f0       	breq	.+10     	; 0xa0 <_Z16USART_TxStringlnPc+0x16>
  96:	21 96       	adiw	r28, 0x01	; 1
  98:	f4 df       	rcall	.-24     	; 0x82 <_Z14USART_Transmith>
  9a:	89 91       	ld	r24, Y+
  9c:	81 11       	cpse	r24, r1
  9e:	fc cf       	rjmp	.-8      	; 0x98 <_Z16USART_TxStringlnPc+0xe>
  a0:	8d e0       	ldi	r24, 0x0D	; 13
  a2:	ef df       	rcall	.-34     	; 0x82 <_Z14USART_Transmith>
  a4:	8a e0       	ldi	r24, 0x0A	; 10
  a6:	ed df       	rcall	.-38     	; 0x82 <_Z14USART_Transmith>
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <__vector_11>:
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
  c6:	4c b1       	in	r20, 0x0c	; 12
  c8:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <rxvalue>
  cc:	88 23       	and	r24, r24
  ce:	69 f0       	breq	.+26     	; 0xea <__vector_11+0x3c>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	e9 58       	subi	r30, 0x89	; 137
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	90 81       	ld	r25, Z
  e0:	91 11       	cpse	r25, r1
  e2:	f7 cf       	rjmp	.-18     	; 0xd2 <__vector_11+0x24>
  e4:	84 31       	cpi	r24, 0x14	; 20
  e6:	40 f4       	brcc	.+16     	; 0xf8 <__vector_11+0x4a>
  e8:	02 c0       	rjmp	.+4      	; 0xee <__vector_11+0x40>
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	f9 01       	movw	r30, r18
  f0:	e9 58       	subi	r30, 0x89	; 137
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	40 83       	st	Z, r20
  f6:	0b c0       	rjmp	.+22     	; 0x10e <__vector_11+0x60>
  f8:	e7 e7       	ldi	r30, 0x77	; 119
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	2a e8       	ldi	r18, 0x8A	; 138
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	81 93       	st	Z+, r24
 104:	2e 17       	cp	r18, r30
 106:	3f 07       	cpc	r19, r31
 108:	d9 f7       	brne	.-10     	; 0x100 <__vector_11+0x52>
 10a:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <rxvalue+0x13>
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <_Z13USART_ClearRXv>:
 126:	e7 e7       	ldi	r30, 0x77	; 119
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8b e8       	ldi	r24, 0x8B	; 139
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	11 92       	st	Z+, r1
 130:	e8 17       	cp	r30, r24
 132:	f9 07       	cpc	r31, r25
 134:	e1 f7       	brne	.-8      	; 0x12e <_Z13USART_ClearRXv+0x8>
 136:	08 95       	ret

00000138 <_Z16USART_ReciveWaitPcib>:
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	7c 01       	movw	r14, r24
 14a:	c4 2e       	mov	r12, r20
 14c:	89 2b       	or	r24, r25
 14e:	71 f1       	breq	.+92     	; 0x1ac <_Z16USART_ReciveWaitPcib+0x74>
 150:	8f e0       	ldi	r24, 0x0F	; 15
 152:	97 e2       	ldi	r25, 0x27	; 39
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <_Z16USART_ReciveWaitPcib+0x1c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <_Z16USART_ReciveWaitPcib+0x22>
 15a:	00 00       	nop
 15c:	cb 01       	movw	r24, r22
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	74 d1       	rcall	.+744    	; 0x44c <__divmodhi4>
 164:	8b 01       	movw	r16, r22
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d1 e0       	ldi	r29, 0x01	; 1
 16a:	d1 2c       	mov	r13, r1
 16c:	02 c0       	rjmp	.+4      	; 0x172 <_Z16USART_ReciveWaitPcib+0x3a>
 16e:	45 2b       	or	r20, r21
 170:	f9 f4       	brne	.+62     	; 0x1b0 <_Z16USART_ReciveWaitPcib+0x78>
 172:	b7 01       	movw	r22, r14
 174:	87 e7       	ldi	r24, 0x77	; 119
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	d5 d1       	rcall	.+938    	; 0x524 <strstr>
 17a:	ac 01       	movw	r20, r24
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	97 e2       	ldi	r25, 0x27	; 39
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <_Z16USART_ReciveWaitPcib+0x48>
 184:	00 c0       	rjmp	.+0      	; 0x186 <_Z16USART_ReciveWaitPcib+0x4e>
 186:	00 00       	nop
 188:	cf 5f       	subi	r28, 0xFF	; 255
 18a:	2c 2f       	mov	r18, r28
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	9d 2f       	mov	r25, r29
 190:	02 17       	cp	r16, r18
 192:	13 07       	cpc	r17, r19
 194:	0c f0       	brlt	.+2      	; 0x198 <_Z16USART_ReciveWaitPcib+0x60>
 196:	9d 2d       	mov	r25, r13
 198:	99 23       	and	r25, r25
 19a:	49 f3       	breq	.-46     	; 0x16e <_Z16USART_ReciveWaitPcib+0x36>
 19c:	8d 2f       	mov	r24, r29
 19e:	01 15       	cp	r16, r1
 1a0:	11 05       	cpc	r17, r1
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <_Z16USART_ReciveWaitPcib+0x6e>
 1a4:	8d 2d       	mov	r24, r13
 1a6:	88 23       	and	r24, r24
 1a8:	11 f3       	breq	.-60     	; 0x16e <_Z16USART_ReciveWaitPcib+0x36>
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <_Z16USART_ReciveWaitPcib+0x84>
 1ac:	c0 e0       	ldi	r28, 0x00	; 0
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <_Z16USART_ReciveWaitPcib+0x7a>
 1b0:	c1 e0       	ldi	r28, 0x01	; 1
 1b2:	cc 20       	and	r12, r12
 1b4:	29 f0       	breq	.+10     	; 0x1c0 <_Z16USART_ReciveWaitPcib+0x88>
 1b6:	b7 df       	rcall	.-146    	; 0x126 <_Z13USART_ClearRXv>
 1b8:	8c 2f       	mov	r24, r28
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <_Z16USART_ReciveWaitPcib+0x8a>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <_Z16USART_ReciveWaitPcib+0x8a>
 1c0:	8c 2f       	mov	r24, r28
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	cf 90       	pop	r12
 1d2:	08 95       	ret

000001d4 <_Z13SoftUART_Initv>:
 1d4:	a4 9a       	sbi	0x14, 4	; 20
 1d6:	ac 9a       	sbi	0x15, 4	; 21
 1d8:	85 b5       	in	r24, 0x25	; 37
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	85 bd       	out	0x25, r24	; 37
 1de:	89 b7       	in	r24, 0x39	; 57
 1e0:	80 68       	ori	r24, 0x80	; 128
 1e2:	89 bf       	out	0x39, r24	; 57
 1e4:	83 e3       	ldi	r24, 0x33	; 51
 1e6:	83 bd       	out	0x23, r24	; 35
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <_Z11SoftUART_txc>:
 1ec:	ac 9a       	sbi	0x15, 4	; 21
 1ee:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <tx_shift_reg>
 1f2:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <tx_shift_reg+0x1>
 1f6:	23 2b       	or	r18, r19
 1f8:	11 f5       	brne	.+68     	; 0x23e <_Z11SoftUART_txc+0x52>
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <tx_shift_reg+0x1>
 204:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <tx_shift_reg>
 208:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <tx_shift_reg>
 20c:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <tx_shift_reg+0x1>
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <tx_shift_reg+0x1>
 216:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <tx_shift_reg>
 21a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <tx_shift_reg>
 21e:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <tx_shift_reg+0x1>
 222:	92 60       	ori	r25, 0x02	; 2
 224:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <tx_shift_reg+0x1>
 228:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <tx_shift_reg>
 22c:	85 b5       	in	r24, 0x25	; 37
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	85 bd       	out	0x25, r24	; 37
 232:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <tx_shift_reg>
 236:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <tx_shift_reg+0x1>
 23a:	89 2b       	or	r24, r25
 23c:	d1 f7       	brne	.-12     	; 0x232 <_Z11SoftUART_txc+0x46>
 23e:	08 95       	ret

00000240 <__vector_3>:
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <tx_shift_reg>
 252:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <tx_shift_reg+0x1>
 256:	80 ff       	sbrs	r24, 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <__vector_3+0x1e>
 25a:	ac 9a       	sbi	0x15, 4	; 21
 25c:	01 c0       	rjmp	.+2      	; 0x260 <__vector_3+0x20>
 25e:	ac 98       	cbi	0x15, 4	; 21
 260:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <tx_shift_reg>
 264:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <tx_shift_reg+0x1>
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <tx_shift_reg+0x1>
 270:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <tx_shift_reg>
 274:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <tx_shift_reg>
 278:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <tx_shift_reg+0x1>
 27c:	89 2b       	or	r24, r25
 27e:	21 f4       	brne	.+8      	; 0x288 <__vector_3+0x48>
 280:	85 b5       	in	r24, 0x25	; 37
 282:	88 7f       	andi	r24, 0xF8	; 248
 284:	85 bd       	out	0x25, r24	; 37
 286:	14 bc       	out	0x24, r1	; 36
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <_Z18SoftUSART_tx_strlnPc>:
	
}

void SoftUSART_tx_strln(char* st){
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
		 
	while( *st ){
 29c:	88 81       	ld	r24, Y
 29e:	88 23       	and	r24, r24
 2a0:	29 f0       	breq	.+10     	; 0x2ac <_Z18SoftUSART_tx_strlnPc+0x16>
 2a2:	21 96       	adiw	r28, 0x01	; 1
		SoftUART_tx( *st++ );
 2a4:	a3 df       	rcall	.-186    	; 0x1ec <_Z11SoftUART_txc>
	
}

void SoftUSART_tx_strln(char* st){
		 
	while( *st ){
 2a6:	89 91       	ld	r24, Y+
 2a8:	81 11       	cpse	r24, r1
 2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <_Z18SoftUSART_tx_strlnPc+0xe>
		SoftUART_tx( *st++ );
		//wait until transmission is finished
		
	}
	SoftUART_tx(13);
 2ac:	8d e0       	ldi	r24, 0x0D	; 13
 2ae:	9e df       	rcall	.-196    	; 0x1ec <_Z11SoftUART_txc>
	
	SoftUART_tx(10);
 2b0:	8a e0       	ldi	r24, 0x0A	; 10
 2b2:	9c df       	rcall	.-200    	; 0x1ec <_Z11SoftUART_txc>
	
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <_Z7InitADCv>:
uint8_t waittemp=0;

void InitADC()
{
	// Select 2.56
	ADMUX |= (1<<REFS0)|(1<<REFS1);
 2ba:	87 b1       	in	r24, 0x07	; 7
 2bc:	80 6c       	ori	r24, 0xC0	; 192
 2be:	87 b9       	out	0x07, r24	; 7
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 2c0:	86 b1       	in	r24, 0x06	; 6
 2c2:	87 68       	ori	r24, 0x87	; 135
 2c4:	86 b9       	out	0x06, r24	; 6
 2c6:	08 95       	ret

000002c8 <_Z7ReadADCh>:
}
uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 2c8:	97 b1       	in	r25, 0x07	; 7
 2ca:	90 7f       	andi	r25, 0xF0	; 240
 2cc:	8f 70       	andi	r24, 0x0F	; 15
 2ce:	89 2b       	or	r24, r25
 2d0:	87 b9       	out	0x07, r24	; 7
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 2d2:	36 9a       	sbi	0x06, 6	; 6
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 2d4:	36 99       	sbic	0x06, 6	; 6
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <_Z7ReadADCh+0xc>
	return ADC;
 2d8:	84 b1       	in	r24, 0x04	; 4
 2da:	95 b1       	in	r25, 0x05	; 5
}
 2dc:	08 95       	ret

000002de <main>:

int main(void)
{
	/*set pin*/
	DDRC|=(1<<5);
 2de:	a5 9a       	sbi	0x14, 5	; 20
	PORTC&=~(1<<5);
 2e0:	ad 98       	cbi	0x15, 5	; 21
	
	/*largeLed*/
	DDRC|=(1<<0)|(1<<1)|(1<<2);
 2e2:	84 b3       	in	r24, 0x14	; 20
 2e4:	87 60       	ori	r24, 0x07	; 7
 2e6:	84 bb       	out	0x14, r24	; 20
		
	/*smallLed*/
	DDRD|=(1<<SRED)|(1<<SGRN);
 2e8:	81 b3       	in	r24, 0x11	; 17
 2ea:	80 66       	ori	r24, 0x60	; 96
 2ec:	81 bb       	out	0x11, r24	; 17
	USART_Init(2400);
 2ee:	80 e6       	ldi	r24, 0x60	; 96
 2f0:	99 e0       	ldi	r25, 0x09	; 9
 2f2:	b5 de       	rcall	.-662    	; 0x5e <_Z10USART_Initj>
	SoftUART_Init();
 2f4:	6f df       	rcall	.-290    	; 0x1d4 <_Z13SoftUART_Initv>
	SoftUSART_tx_strln("started");
 2f6:	80 e6       	ldi	r24, 0x60	; 96
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	cd df       	rcall	.-102    	; 0x296 <_Z18SoftUSART_tx_strlnPc>
	SLEDPORT|=(1<<SRED);
 2fc:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	2f e7       	ldi	r18, 0x7F	; 127
 300:	88 e3       	ldi	r24, 0x38	; 56
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x26>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x30>
 30e:	00 00       	nop
	_delay_ms(100);
	SLEDPORT|=(1<<SGRN);
 310:	95 9a       	sbi	0x12, 5	; 18
 312:	2f e7       	ldi	r18, 0x7F	; 127
 314:	89 ea       	ldi	r24, 0xA9	; 169
 316:	93 e0       	ldi	r25, 0x03	; 3
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x3a>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x44>
 322:	00 00       	nop
	_delay_ms(300);
	SLEDPORT&=~(1<<SRED);
 324:	96 98       	cbi	0x12, 6	; 18
	
	
	USART_ClearRX();
 326:	ff de       	rcall	.-514    	; 0x126 <_Z13USART_ClearRXv>
	USART_TxStringln("AT");
 328:	88 e6       	ldi	r24, 0x68	; 104
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	ae de       	rcall	.-676    	; 0x8a <_Z16USART_TxStringlnPc>
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	80 e7       	ldi	r24, 0x70	; 112
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x56>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x60>
 33e:	00 00       	nop
	_delay_ms(200);
	USART_TxStringln("AT");
 340:	88 e6       	ldi	r24, 0x68	; 104
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	a2 de       	rcall	.-700    	; 0x8a <_Z16USART_TxStringlnPc>
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	80 e7       	ldi	r24, 0x70	; 112
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x6e>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x78>
 356:	00 00       	nop
	USART_ReciveWait("OK",500);
	_delay_ms(100);
	SoftUSART_tx_strln(rxvalue);
	_delay_ms(500);*/
	/*end setting*/
	SoftUSART_tx_strln(rxvalue);
 358:	87 e7       	ldi	r24, 0x77	; 119
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	9c df       	rcall	.-200    	; 0x296 <_Z18SoftUSART_tx_strlnPc>
	if (USART_ReciveWait("OK",1000,1))
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	68 ee       	ldi	r22, 0xE8	; 232
 362:	73 e0       	ldi	r23, 0x03	; 3
 364:	8b e6       	ldi	r24, 0x6B	; 107
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	e7 de       	rcall	.-562    	; 0x138 <_Z16USART_ReciveWaitPcib>
 36a:	81 11       	cpse	r24, r1
 36c:	0b c0       	rjmp	.+22     	; 0x384 <main+0xa6>
	{
	} 
	else
	{SLEDPORT&=~(1<<SGRN);
 36e:	95 98       	cbi	0x12, 5	; 18
 370:	2f e7       	ldi	r18, 0x7F	; 127
 372:	8a e1       	ldi	r24, 0x1A	; 26
 374:	96 e0       	ldi	r25, 0x06	; 6
 376:	21 50       	subi	r18, 0x01	; 1
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x98>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0xa2>
 380:	00 00       	nop
		_delay_ms(500);
	SLEDPORT|=(1<<SGRN);	
 382:	95 9a       	sbi	0x12, 5	; 18
	}
	
	PORTC|=(1<<5);
 384:	ad 9a       	sbi	0x15, 5	; 21
	DDRB&=~(1<<5); // off ligh pin
 386:	bd 98       	cbi	0x17, 5	; 23
	PORTB|=(1<<5);
 388:	c5 9a       	sbi	0x18, 5	; 24
    InitADC();
 38a:	97 df       	rcall	.-210    	; 0x2ba <_Z7InitADCv>
		{LLEDPORT&=~(1<<LGRN);
		LLEDPORT&=~(1<<LBLU);
		LLEDPORT&=~(1<<LRED);
		}
		if (waittemp>3)
		{waittemp=3;
 38c:	13 e0       	ldi	r17, 0x03	; 3
	DDRB&=~(1<<5); // off ligh pin
	PORTB|=(1<<5);
    InitADC();
    while (1) 
    {
		if (USART_ReciveWait("T2",100))
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	64 e6       	ldi	r22, 0x64	; 100
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	8e e6       	ldi	r24, 0x6E	; 110
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	cf de       	rcall	.-610    	; 0x138 <_Z16USART_ReciveWaitPcib>
 39a:	88 23       	and	r24, r24
 39c:	99 f1       	breq	.+102    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 39e:	87 e8       	ldi	r24, 0x87	; 135
 3a0:	93 e1       	ldi	r25, 0x13	; 19
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <main+0xc4>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0xca>
 3a8:	00 00       	nop
		{	_delay_ms(5);
			SoftUSART_tx_strln(rxvalue);/////////////////////////
 3aa:	87 e7       	ldi	r24, 0x77	; 119
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	73 df       	rcall	.-282    	; 0x296 <_Z18SoftUSART_tx_strlnPc>
			char*filtereN;
			strncpy(filtereN,strstr(rxvalue,"T")+2,1);
 3b0:	64 e5       	ldi	r22, 0x54	; 84
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	87 e7       	ldi	r24, 0x77	; 119
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	92 d0       	rcall	.+292    	; 0x4de <strchr>
 3ba:	bc 01       	movw	r22, r24
 3bc:	6e 5f       	subi	r22, 0xFE	; 254
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
 3c8:	ce 01       	movw	r24, r28
 3ca:	9d d0       	rcall	.+314    	; 0x506 <strncpy>
			int num= strcmp(filtereN,"B");
 3cc:	61 e7       	ldi	r22, 0x71	; 113
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	ce 01       	movw	r24, r28
 3d2:	90 d0       	rcall	.+288    	; 0x4f4 <strcmp>
			if ((num==0)&&(((PINB&(1<<5))==0)))
 3d4:	00 97       	sbiw	r24, 0x00	; 0
 3d6:	31 f4       	brne	.+12     	; 0x3e4 <main+0x106>
 3d8:	b5 9b       	sbis	0x16, 5	; 22
 3da:	34 c0       	rjmp	.+104    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			{LLEDPORT|=(1<<LBLU);
			LLEDPORT&=~(1<<LRED);
			LLEDPORT&=~(1<<LGRN);
			}
			else if (num==0)
			{LLEDPORT&=~(1<<LGRN);
 3dc:	a9 98       	cbi	0x15, 1	; 21
			LLEDPORT&=~(1<<LBLU);
 3de:	aa 98       	cbi	0x15, 2	; 21
			LLEDPORT&=~(1<<LRED);
 3e0:	a8 98       	cbi	0x15, 0	; 21
 3e2:	0c c0       	rjmp	.+24     	; 0x3fc <main+0x11e>
			}
			
			if (num==5)
 3e4:	85 30       	cpi	r24, 0x05	; 5
 3e6:	91 05       	cpc	r25, r1
 3e8:	21 f4       	brne	.+8      	; 0x3f2 <main+0x114>
			{LLEDPORT|=(1<<LGRN);
 3ea:	a9 9a       	sbi	0x15, 1	; 21
			LLEDPORT&=~(1<<LRED);
 3ec:	a8 98       	cbi	0x15, 0	; 21
			LLEDPORT&=~(1<<LBLU);
 3ee:	aa 98       	cbi	0x15, 2	; 21
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <main+0x11e>
			}
			if (num==16)
 3f2:	40 97       	sbiw	r24, 0x10	; 16
 3f4:	19 f4       	brne	.+6      	; 0x3fc <main+0x11e>
			{LLEDPORT|=(1<<LRED);
 3f6:	a8 9a       	sbi	0x15, 0	; 21
			LLEDPORT&=~(1<<LGRN);
 3f8:	a9 98       	cbi	0x15, 1	; 21
			LLEDPORT&=~(1<<LBLU);
 3fa:	aa 98       	cbi	0x15, 2	; 21
			}
			
			USART_ClearRX();
 3fc:	94 de       	rcall	.-728    	; 0x126 <_Z13USART_ClearRXv>
			waittemp=0;	
 3fe:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
 402:	10 c0       	rjmp	.+32     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		
		}
		else{
		waittemp++;
 404:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		if (waittemp==3)
 40e:	83 30       	cpi	r24, 0x03	; 3
 410:	19 f4       	brne	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		{LLEDPORT&=~(1<<LGRN);
 412:	a9 98       	cbi	0x15, 1	; 21
		LLEDPORT&=~(1<<LBLU);
 414:	aa 98       	cbi	0x15, 2	; 21
		LLEDPORT&=~(1<<LRED);
 416:	a8 98       	cbi	0x15, 0	; 21
		}
		if (waittemp>3)
 418:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 41c:	84 30       	cpi	r24, 0x04	; 4
 41e:	10 f0       	brcs	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		{waittemp=3;
 420:	10 93 74 00 	sts	0x0074, r17	; 0x800074 <__data_end>
		}
		}
		
		if (((PINB&(1<<5))==0))
 424:	b5 99       	sbic	0x16, 5	; 22
 426:	0b c0       	rjmp	.+22     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			if (ReadADC(5)>750)
 428:	85 e0       	ldi	r24, 0x05	; 5
 42a:	4e df       	rcall	.-356    	; 0x2c8 <_Z7ReadADCh>
 42c:	8f 3e       	cpi	r24, 0xEF	; 239
 42e:	92 40       	sbci	r25, 0x02	; 2
 430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			{SLEDPORT|=(1<<SGRN);SLEDPORT&=~(1<<SRED);
 432:	95 9a       	sbi	0x12, 5	; 18
 434:	96 98       	cbi	0x12, 6	; 18
 436:	ab cf       	rjmp	.-170    	; 0x38e <main+0xb0>
			}
			else
			{SLEDPORT|=(1<<SRED);SLEDPORT&=~(1<<SGRN);
 438:	96 9a       	sbi	0x12, 6	; 18
 43a:	95 98       	cbi	0x12, 5	; 18
 43c:	a8 cf       	rjmp	.-176    	; 0x38e <main+0xb0>
			}
		} 
		else
		{SLEDPORT&=~(1<<SRED);SLEDPORT&=~(1<<SGRN);
 43e:	96 98       	cbi	0x12, 6	; 18
 440:	95 98       	cbi	0x12, 5	; 18
 442:	a5 cf       	rjmp	.-182    	; 0x38e <main+0xb0>
			SoftUSART_tx_strln(rxvalue);/////////////////////////
			char*filtereN;
			strncpy(filtereN,strstr(rxvalue,"T")+2,1);
			int num= strcmp(filtereN,"B");
			if ((num==0)&&(((PINB&(1<<5))==0)))
			{LLEDPORT|=(1<<LBLU);
 444:	aa 9a       	sbi	0x15, 2	; 21
			LLEDPORT&=~(1<<LRED);
 446:	a8 98       	cbi	0x15, 0	; 21
			LLEDPORT&=~(1<<LGRN);
 448:	a9 98       	cbi	0x15, 1	; 21
 44a:	d3 cf       	rjmp	.-90     	; 0x3f2 <main+0x114>

0000044c <__divmodhi4>:
 44c:	97 fb       	bst	r25, 7
 44e:	07 2e       	mov	r0, r23
 450:	16 f4       	brtc	.+4      	; 0x456 <__divmodhi4+0xa>
 452:	00 94       	com	r0
 454:	06 d0       	rcall	.+12     	; 0x462 <__divmodhi4_neg1>
 456:	77 fd       	sbrc	r23, 7
 458:	08 d0       	rcall	.+16     	; 0x46a <__divmodhi4_neg2>
 45a:	2d d0       	rcall	.+90     	; 0x4b6 <__udivmodhi4>
 45c:	07 fc       	sbrc	r0, 7
 45e:	05 d0       	rcall	.+10     	; 0x46a <__divmodhi4_neg2>
 460:	3e f4       	brtc	.+14     	; 0x470 <__divmodhi4_exit>

00000462 <__divmodhi4_neg1>:
 462:	90 95       	com	r25
 464:	81 95       	neg	r24
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__divmodhi4_neg2>:
 46a:	70 95       	com	r23
 46c:	61 95       	neg	r22
 46e:	7f 4f       	sbci	r23, 0xFF	; 255

00000470 <__divmodhi4_exit>:
 470:	08 95       	ret

00000472 <__udivmodsi4>:
 472:	a1 e2       	ldi	r26, 0x21	; 33
 474:	1a 2e       	mov	r1, r26
 476:	aa 1b       	sub	r26, r26
 478:	bb 1b       	sub	r27, r27
 47a:	fd 01       	movw	r30, r26
 47c:	0d c0       	rjmp	.+26     	; 0x498 <__udivmodsi4_ep>

0000047e <__udivmodsi4_loop>:
 47e:	aa 1f       	adc	r26, r26
 480:	bb 1f       	adc	r27, r27
 482:	ee 1f       	adc	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	a2 17       	cp	r26, r18
 488:	b3 07       	cpc	r27, r19
 48a:	e4 07       	cpc	r30, r20
 48c:	f5 07       	cpc	r31, r21
 48e:	20 f0       	brcs	.+8      	; 0x498 <__udivmodsi4_ep>
 490:	a2 1b       	sub	r26, r18
 492:	b3 0b       	sbc	r27, r19
 494:	e4 0b       	sbc	r30, r20
 496:	f5 0b       	sbc	r31, r21

00000498 <__udivmodsi4_ep>:
 498:	66 1f       	adc	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	1a 94       	dec	r1
 4a2:	69 f7       	brne	.-38     	; 0x47e <__udivmodsi4_loop>
 4a4:	60 95       	com	r22
 4a6:	70 95       	com	r23
 4a8:	80 95       	com	r24
 4aa:	90 95       	com	r25
 4ac:	9b 01       	movw	r18, r22
 4ae:	ac 01       	movw	r20, r24
 4b0:	bd 01       	movw	r22, r26
 4b2:	cf 01       	movw	r24, r30
 4b4:	08 95       	ret

000004b6 <__udivmodhi4>:
 4b6:	aa 1b       	sub	r26, r26
 4b8:	bb 1b       	sub	r27, r27
 4ba:	51 e1       	ldi	r21, 0x11	; 17
 4bc:	07 c0       	rjmp	.+14     	; 0x4cc <__udivmodhi4_ep>

000004be <__udivmodhi4_loop>:
 4be:	aa 1f       	adc	r26, r26
 4c0:	bb 1f       	adc	r27, r27
 4c2:	a6 17       	cp	r26, r22
 4c4:	b7 07       	cpc	r27, r23
 4c6:	10 f0       	brcs	.+4      	; 0x4cc <__udivmodhi4_ep>
 4c8:	a6 1b       	sub	r26, r22
 4ca:	b7 0b       	sbc	r27, r23

000004cc <__udivmodhi4_ep>:
 4cc:	88 1f       	adc	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	5a 95       	dec	r21
 4d2:	a9 f7       	brne	.-22     	; 0x4be <__udivmodhi4_loop>
 4d4:	80 95       	com	r24
 4d6:	90 95       	com	r25
 4d8:	bc 01       	movw	r22, r24
 4da:	cd 01       	movw	r24, r26
 4dc:	08 95       	ret

000004de <strchr>:
 4de:	fc 01       	movw	r30, r24
 4e0:	81 91       	ld	r24, Z+
 4e2:	86 17       	cp	r24, r22
 4e4:	21 f0       	breq	.+8      	; 0x4ee <strchr+0x10>
 4e6:	88 23       	and	r24, r24
 4e8:	d9 f7       	brne	.-10     	; 0x4e0 <strchr+0x2>
 4ea:	99 27       	eor	r25, r25
 4ec:	08 95       	ret
 4ee:	31 97       	sbiw	r30, 0x01	; 1
 4f0:	cf 01       	movw	r24, r30
 4f2:	08 95       	ret

000004f4 <strcmp>:
 4f4:	fb 01       	movw	r30, r22
 4f6:	dc 01       	movw	r26, r24
 4f8:	8d 91       	ld	r24, X+
 4fa:	01 90       	ld	r0, Z+
 4fc:	80 19       	sub	r24, r0
 4fe:	01 10       	cpse	r0, r1
 500:	d9 f3       	breq	.-10     	; 0x4f8 <strcmp+0x4>
 502:	99 0b       	sbc	r25, r25
 504:	08 95       	ret

00000506 <strncpy>:
 506:	fb 01       	movw	r30, r22
 508:	dc 01       	movw	r26, r24
 50a:	41 50       	subi	r20, 0x01	; 1
 50c:	50 40       	sbci	r21, 0x00	; 0
 50e:	48 f0       	brcs	.+18     	; 0x522 <strncpy+0x1c>
 510:	01 90       	ld	r0, Z+
 512:	0d 92       	st	X+, r0
 514:	00 20       	and	r0, r0
 516:	c9 f7       	brne	.-14     	; 0x50a <strncpy+0x4>
 518:	01 c0       	rjmp	.+2      	; 0x51c <strncpy+0x16>
 51a:	1d 92       	st	X+, r1
 51c:	41 50       	subi	r20, 0x01	; 1
 51e:	50 40       	sbci	r21, 0x00	; 0
 520:	e0 f7       	brcc	.-8      	; 0x51a <strncpy+0x14>
 522:	08 95       	ret

00000524 <strstr>:
 524:	fb 01       	movw	r30, r22
 526:	51 91       	ld	r21, Z+
 528:	55 23       	and	r21, r21
 52a:	a9 f0       	breq	.+42     	; 0x556 <strstr+0x32>
 52c:	bf 01       	movw	r22, r30
 52e:	dc 01       	movw	r26, r24
 530:	4d 91       	ld	r20, X+
 532:	45 17       	cp	r20, r21
 534:	41 11       	cpse	r20, r1
 536:	e1 f7       	brne	.-8      	; 0x530 <strstr+0xc>
 538:	59 f4       	brne	.+22     	; 0x550 <strstr+0x2c>
 53a:	cd 01       	movw	r24, r26
 53c:	01 90       	ld	r0, Z+
 53e:	00 20       	and	r0, r0
 540:	49 f0       	breq	.+18     	; 0x554 <strstr+0x30>
 542:	4d 91       	ld	r20, X+
 544:	40 15       	cp	r20, r0
 546:	41 11       	cpse	r20, r1
 548:	c9 f3       	breq	.-14     	; 0x53c <strstr+0x18>
 54a:	fb 01       	movw	r30, r22
 54c:	41 11       	cpse	r20, r1
 54e:	ef cf       	rjmp	.-34     	; 0x52e <strstr+0xa>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>

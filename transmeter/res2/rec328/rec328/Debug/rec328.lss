
rec328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000502  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080010c  0080010c  000005a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f4e  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000862  00000000  00000000  000015da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000616  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000617  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000877  00000000  00000000  00002bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000343e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 34       	cpi	r26, 0x41	; 65
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 38 01 	call	0x270	; 0x270 <main>
  9e:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
	
	char fString[10];
	dtostrf(number,length,deciP,fString);
	USART_TxString(fString);
	
}
  a6:	9c 01       	movw	r18, r24
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e2       	ldi	r22, 0x20	; 32
  ae:	71 ea       	ldi	r23, 0xA1	; 161
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 0c 02 	call	0x418	; 0x418 <__udivmodsi4>
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
  bc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  c0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c4:	88 e9       	ldi	r24, 0x98	; 152
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <_Z14USART_Transmith>:
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	95 ff       	sbrs	r25, 5
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <_Z14USART_Transmith+0x4>
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e2:	08 95       	ret

000000e4 <_Z16USART_TxStringlnPc>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <_Z16USART_TxStringlnPc+0x18>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
  f6:	89 91       	ld	r24, Y+
  f8:	81 11       	cpse	r24, r1
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <_Z16USART_TxStringlnPc+0xe>
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <__vector_18>:


ISR(USART_RX_vect){
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	//PORTB^=1<<0;
	char rchar=UDR0;
 126:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
	uint8_t i=0;
	while(rxvalue[i]){
 12a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rxvalue>
 12e:	88 23       	and	r24, r24
 130:	69 f0       	breq	.+26     	; 0x14c <__vector_18+0x3e>
 132:	80 e0       	ldi	r24, 0x00	; 0
	i++;
 134:	8f 5f       	subi	r24, 0xFF	; 255
ISR(USART_RX_vect){
	//PORTB^=1<<0;
	char rchar=UDR0;
	
	uint8_t i=0;
	while(rxvalue[i]){
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	e1 5f       	subi	r30, 0xF1	; 241
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	90 81       	ld	r25, Z
 142:	91 11       	cpse	r25, r1
 144:	f7 cf       	rjmp	.-18     	; 0x134 <__vector_18+0x26>
	i++;
	}
	if (i<rxshiftNum)
 146:	82 33       	cpi	r24, 0x32	; 50
 148:	40 f4       	brcc	.+16     	; 0x15a <__vector_18+0x4c>
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__vector_18+0x42>
ISR(USART_RX_vect){
	//PORTB^=1<<0;
	char rchar=UDR0;
	
	uint8_t i=0;
	while(rxvalue[i]){
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
	i++;
	}
	if (i<rxshiftNum)
	{rxvalue[i]=rchar;
 150:	f9 01       	movw	r30, r18
 152:	e1 5f       	subi	r30, 0xF1	; 241
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	40 83       	st	Z, r20
 158:	0b c0       	rjmp	.+22     	; 0x170 <__vector_18+0x62>
 15a:	ef e0       	ldi	r30, 0x0F	; 15
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	20 e4       	ldi	r18, 0x40	; 64
 160:	31 e0       	ldi	r19, 0x01	; 1
	} 
	else
	{
		for(uint8_t i=0;i<rxshiftNum-1;i++){
		rxvalue[i]=rxvalue[i+1];
 162:	81 81       	ldd	r24, Z+1	; 0x01
 164:	81 93       	st	Z+, r24
	if (i<rxshiftNum)
	{rxvalue[i]=rchar;
	} 
	else
	{
		for(uint8_t i=0;i<rxshiftNum-1;i++){
 166:	2e 17       	cp	r18, r30
 168:	3f 07       	cpc	r19, r31
 16a:	d9 f7       	brne	.-10     	; 0x162 <__vector_18+0x54>
		rxvalue[i]=rxvalue[i+1];
	}
	rxvalue[rxshiftNum-1]=rchar;
 16c:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <rxvalue+0x31>
		
	}
	
		
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <_Z16USART_ReciveWaitPcib>:



bool USART_ReciveWait(char*wait=0,int16_t timeout=0,bool deleteWait=0){
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
	bool waitbool=0;
	timeout/=100;
	uint8_t temptimeOut=0;
	if (wait!=0)
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	c1 f1       	breq	.+112    	; 0x20a <_Z16USART_ReciveWaitPcib+0x82>
 19a:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	80 e7       	ldi	r24, 0x70	; 112
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <_Z16USART_ReciveWaitPcib+0x1a>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <_Z16USART_ReciveWaitPcib+0x24>
 1ac:	00 00       	nop



bool USART_ReciveWait(char*wait=0,int16_t timeout=0,bool deleteWait=0){
	bool waitbool=0;
	timeout/=100;
 1ae:	cb 01       	movw	r24, r22
 1b0:	64 e6       	ldi	r22, 0x64	; 100
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 1b8:	8b 01       	movw	r16, r22
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
			//SoftUSART_tx_strln(".");
			//SoftUSART_tx_strln(rxvalue);
			
			_delay_ms(100);
			temptimeOut++;
			if ((temptimeOut>timeout)&(timeout!=0))
 1bc:	d1 e0       	ldi	r29, 0x01	; 1
 1be:	d1 2c       	mov	r13, r1
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <_Z16USART_ReciveWaitPcib+0x3e>
	timeout/=100;
	uint8_t temptimeOut=0;
	if (wait!=0)
	{  _delay_ms(100);
		char*tempwait;
		while(tempwait==0){
 1c2:	45 2b       	or	r20, r21
 1c4:	21 f5       	brne	.+72     	; 0x20e <_Z16USART_ReciveWaitPcib+0x86>
			tempwait =strstr(rxvalue,wait);
 1c6:	b7 01       	movw	r22, r14
 1c8:	8f e0       	ldi	r24, 0x0F	; 15
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 65 02 	call	0x4ca	; 0x4ca <strstr>
 1d0:	ac 01       	movw	r20, r24
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	80 e7       	ldi	r24, 0x70	; 112
 1d6:	92 e0       	ldi	r25, 0x02	; 2
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <_Z16USART_ReciveWaitPcib+0x50>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <_Z16USART_ReciveWaitPcib+0x5a>
 1e2:	00 00       	nop
			//SoftUSART_tx_strln(".");
			//SoftUSART_tx_strln(rxvalue);
			
			_delay_ms(100);
			temptimeOut++;
 1e4:	cf 5f       	subi	r28, 0xFF	; 255
			if ((temptimeOut>timeout)&(timeout!=0))
 1e6:	2c 2f       	mov	r18, r28
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	9d 2f       	mov	r25, r29
 1ec:	02 17       	cp	r16, r18
 1ee:	13 07       	cpc	r17, r19
 1f0:	0c f0       	brlt	.+2      	; 0x1f4 <_Z16USART_ReciveWaitPcib+0x6c>
 1f2:	9d 2d       	mov	r25, r13
 1f4:	99 23       	and	r25, r25
 1f6:	29 f3       	breq	.-54     	; 0x1c2 <_Z16USART_ReciveWaitPcib+0x3a>
 1f8:	8d 2f       	mov	r24, r29
 1fa:	01 15       	cp	r16, r1
 1fc:	11 05       	cpc	r17, r1
 1fe:	09 f4       	brne	.+2      	; 0x202 <_Z16USART_ReciveWaitPcib+0x7a>
 200:	8d 2d       	mov	r24, r13
 202:	88 23       	and	r24, r24
 204:	f1 f2       	breq	.-68     	; 0x1c2 <_Z16USART_ReciveWaitPcib+0x3a>
			{waitbool=0;
				return waitbool;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	03 c0       	rjmp	.+6      	; 0x210 <_Z16USART_ReciveWaitPcib+0x88>
}



bool USART_ReciveWait(char*wait=0,int16_t timeout=0,bool deleteWait=0){
	bool waitbool=0;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	01 c0       	rjmp	.+2      	; 0x210 <_Z16USART_ReciveWaitPcib+0x88>
				return waitbool;
				
			}
			
		}
		waitbool=1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	return waitbool;
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	df 90       	pop	r13
 21e:	08 95       	ret

00000220 <_Z13USART_ClearRXv>:


void USART_ClearRX(){
 220:	ef e0       	ldi	r30, 0x0F	; 15
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	81 e4       	ldi	r24, 0x41	; 65
 226:	91 e0       	ldi	r25, 0x01	; 1
	for(uint8_t i=0;i<rxshiftNum;i++){
		rxvalue[i]=NULL;
 228:	11 92       	st	Z+, r1
	return waitbool;
}


void USART_ClearRX(){
	for(uint8_t i=0;i<rxshiftNum;i++){
 22a:	e8 17       	cp	r30, r24
 22c:	f9 07       	cpc	r31, r25
 22e:	e1 f7       	brne	.-8      	; 0x228 <_Z13USART_ClearRXv+0x8>
		rxvalue[i]=NULL;
	}
	
 230:	08 95       	ret

00000232 <_Z7InitADCv>:
uint16_t btry;

void InitADC()
{
	// Select 2.56
	ADMUX |= (1<<REFS0)|(1<<REFS1);
 232:	ec e7       	ldi	r30, 0x7C	; 124
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 6c       	ori	r24, 0xC0	; 192
 23a:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 23c:	ea e7       	ldi	r30, 0x7A	; 122
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	87 68       	ori	r24, 0x87	; 135
 244:	80 83       	st	Z, r24
 246:	08 95       	ret

00000248 <_Z7ReadADCh>:
}
uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 248:	ec e7       	ldi	r30, 0x7C	; 124
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	90 81       	ld	r25, Z
 24e:	90 7f       	andi	r25, 0xF0	; 240
 250:	8f 70       	andi	r24, 0x0F	; 15
 252:	89 2b       	or	r24, r25
 254:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 256:	ea e7       	ldi	r30, 0x7A	; 122
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 260:	80 81       	ld	r24, Z
 262:	86 fd       	sbrc	r24, 6
 264:	fd cf       	rjmp	.-6      	; 0x260 <_Z7ReadADCh+0x18>
	return ADC;
 266:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 26a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 26e:	08 95       	ret

00000270 <main>:

int main(void)
{
	/*set pin*/
	DDRC|=(1<<5);
 270:	3d 9a       	sbi	0x07, 5	; 7
	PORTC&=~(1<<5);
 272:	45 98       	cbi	0x08, 5	; 8
	
	/*largeLed*/
	DDRC|=(1<<0)|(1<<1)|(1<<2);
 274:	87 b1       	in	r24, 0x07	; 7
 276:	87 60       	ori	r24, 0x07	; 7
 278:	87 b9       	out	0x07, r24	; 7
		
	/*smallLed*/
	DDRD|=(1<<SRED)|(1<<SGRN);
 27a:	8a b1       	in	r24, 0x0a	; 10
 27c:	80 66       	ori	r24, 0x60	; 96
 27e:	8a b9       	out	0x0a, r24	; 10
	USART_Init(2400);
 280:	80 e6       	ldi	r24, 0x60	; 96
 282:	99 e0       	ldi	r25, 0x09	; 9
 284:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
	
	SLEDPORT|=(1<<SRED);
 288:	5e 9a       	sbi	0x0b, 6	; 11
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	80 e7       	ldi	r24, 0x70	; 112
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x20>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x2a>
 29a:	00 00       	nop
	_delay_ms(100);
	SLEDPORT|=(1<<SGRN);
 29c:	5d 9a       	sbi	0x0b, 5	; 11
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	82 e5       	ldi	r24, 0x52	; 82
 2a2:	97 e0       	ldi	r25, 0x07	; 7
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x34>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x3e>
 2ae:	00 00       	nop
	_delay_ms(300);
	SLEDPORT&=~(1<<SRED);
 2b0:	5e 98       	cbi	0x0b, 6	; 11
	
	
	USART_ClearRX();
 2b2:	0e 94 10 01 	call	0x220	; 0x220 <_Z13USART_ClearRXv>
	USART_TxStringln("AT");
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z16USART_TxStringlnPc>
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	81 ee       	ldi	r24, 0xE1	; 225
 2c2:	94 e0       	ldi	r25, 0x04	; 4
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <main+0x54>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0x5e>
 2ce:	00 00       	nop
	
	
	
	/*end setting*/
	
	USART_TxStringln("AT");
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z16USART_TxStringlnPc>
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	81 ee       	ldi	r24, 0xE1	; 225
 2dc:	94 e0       	ldi	r25, 0x04	; 4
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0x6e>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x78>
 2e8:	00 00       	nop
	_delay_ms(200);
	if (USART_ReciveWait("OK",1000,1))
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	68 ee       	ldi	r22, 0xE8	; 232
 2ee:	73 e0       	ldi	r23, 0x03	; 3
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 c4 00 	call	0x188	; 0x188 <_Z16USART_ReciveWaitPcib>
 2f8:	81 11       	cpse	r24, r1
 2fa:	0b c0       	rjmp	.+22     	; 0x312 <main+0xa2>
	{
	}
	else
	{SLEDPORT&=~(1<<SGRN);
 2fc:	5d 98       	cbi	0x0b, 5	; 11
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	84 e3       	ldi	r24, 0x34	; 52
 302:	9c e0       	ldi	r25, 0x0C	; 12
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x94>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x9e>
 30e:	00 00       	nop
		_delay_ms(500);
		SLEDPORT|=(1<<SGRN);
 310:	5d 9a       	sbi	0x0b, 5	; 11
	}
	
	
	
	
	PORTC|=(1<<5);
 312:	45 9a       	sbi	0x08, 5	; 8
	DDRB&=~(1<<5); // off ligh pin
 314:	25 98       	cbi	0x04, 5	; 4
	PORTB|=(1<<5);
 316:	2d 9a       	sbi	0x05, 5	; 5
    InitADC();
 318:	0e 94 19 01 	call	0x232	; 0x232 <_Z7InitADCv>
		{LLEDPORT&=~(1<<LGRN);
		LLEDPORT&=~(1<<LBLU);
		LLEDPORT&=~(1<<LRED);
		}
		if (waittemp>3)
		{waittemp=3;
 31c:	c3 e0       	ldi	r28, 0x03	; 3
	DDRB&=~(1<<5); // off ligh pin
	PORTB|=(1<<5);
    InitADC();
    while (1) 
    {
		if (USART_ReciveWait("T3",100))
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	64 e6       	ldi	r22, 0x64	; 100
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	86 e0       	ldi	r24, 0x06	; 6
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 c4 00 	call	0x188	; 0x188 <_Z16USART_ReciveWaitPcib>
 32c:	88 23       	and	r24, r24
 32e:	a1 f1       	breq	.+104    	; 0x398 <main+0x128>
 330:	8f e0       	ldi	r24, 0x0F	; 15
 332:	97 e2       	ldi	r25, 0x27	; 39
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <main+0xc4>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0xca>
 33a:	00 00       	nop
		{	_delay_ms(5);
			char*filtereN;
			strncpy(filtereN,strstr(rxvalue,"T")+2,1);
 33c:	64 e5       	ldi	r22, 0x54	; 84
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 42 02 	call	0x484	; 0x484 <strchr>
 348:	bc 01       	movw	r22, r24
 34a:	6e 5f       	subi	r22, 0xFE	; 254
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	00 e0       	ldi	r16, 0x00	; 0
 354:	10 e0       	ldi	r17, 0x00	; 0
 356:	c8 01       	movw	r24, r16
 358:	0e 94 56 02 	call	0x4ac	; 0x4ac <strncpy>
			int num= strcmp(filtereN,"B");
 35c:	69 e0       	ldi	r22, 0x09	; 9
 35e:	71 e0       	ldi	r23, 0x01	; 1
 360:	c8 01       	movw	r24, r16
 362:	0e 94 4d 02 	call	0x49a	; 0x49a <strcmp>
			if ((num==0)&&(((PINB&(1<<5))==0)))
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	31 f4       	brne	.+12     	; 0x376 <main+0x106>
 36a:	1d 9b       	sbis	0x03, 5	; 3
 36c:	3d c0       	rjmp	.+122    	; 0x3e8 <main+0x178>
			{LLEDPORT|=(1<<LBLU);
			LLEDPORT&=~(1<<LRED);
			LLEDPORT&=~(1<<LGRN);
			}
			else if (num==0)
			{LLEDPORT&=~(1<<LGRN);
 36e:	41 98       	cbi	0x08, 1	; 8
			LLEDPORT&=~(1<<LBLU);
 370:	42 98       	cbi	0x08, 2	; 8
			LLEDPORT&=~(1<<LRED);
 372:	40 98       	cbi	0x08, 0	; 8
 374:	0c c0       	rjmp	.+24     	; 0x38e <main+0x11e>
			}
			
			if (num==5)
 376:	85 30       	cpi	r24, 0x05	; 5
 378:	91 05       	cpc	r25, r1
 37a:	21 f4       	brne	.+8      	; 0x384 <main+0x114>
			{LLEDPORT|=(1<<LGRN);
 37c:	41 9a       	sbi	0x08, 1	; 8
			LLEDPORT&=~(1<<LRED);
 37e:	40 98       	cbi	0x08, 0	; 8
			LLEDPORT&=~(1<<LBLU);
 380:	42 98       	cbi	0x08, 2	; 8
 382:	05 c0       	rjmp	.+10     	; 0x38e <main+0x11e>
			}
			if (num==16)
 384:	40 97       	sbiw	r24, 0x10	; 16
 386:	19 f4       	brne	.+6      	; 0x38e <main+0x11e>
			{LLEDPORT|=(1<<LRED);
 388:	40 9a       	sbi	0x08, 0	; 8
			LLEDPORT&=~(1<<LGRN);
 38a:	41 98       	cbi	0x08, 1	; 8
			LLEDPORT&=~(1<<LBLU);
 38c:	42 98       	cbi	0x08, 2	; 8
			}
			
			USART_ClearRX();
 38e:	0e 94 10 01 	call	0x220	; 0x220 <_Z13USART_ClearRXv>
			waittemp=0;	
 392:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <waittemp>
 396:	10 c0       	rjmp	.+32     	; 0x3b8 <main+0x148>
		
		}
		else{
		waittemp++;
 398:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <waittemp>
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <waittemp>
		if (waittemp==3)
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	19 f4       	brne	.+6      	; 0x3ac <main+0x13c>
		{LLEDPORT&=~(1<<LGRN);
 3a6:	41 98       	cbi	0x08, 1	; 8
		LLEDPORT&=~(1<<LBLU);
 3a8:	42 98       	cbi	0x08, 2	; 8
		LLEDPORT&=~(1<<LRED);
 3aa:	40 98       	cbi	0x08, 0	; 8
		}
		if (waittemp>3)
 3ac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <waittemp>
 3b0:	84 30       	cpi	r24, 0x04	; 4
 3b2:	10 f0       	brcs	.+4      	; 0x3b8 <main+0x148>
		{waittemp=3;
 3b4:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <waittemp>
		}
		}
		
		if (((PINB&(1<<5))==0))//if (((PINB&(1<<5))==0))
 3b8:	1d 99       	sbic	0x03, 5	; 3
 3ba:	13 c0       	rjmp	.+38     	; 0x3e2 <main+0x172>
		{
			
			
			btry=ReadADC(3);
 3bc:	8c 2f       	mov	r24, r28
 3be:	0e 94 24 01 	call	0x248	; 0x248 <_Z7ReadADCh>
 3c2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 3c6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
			
			if (ReadADC(3)>945)
 3ca:	8c 2f       	mov	r24, r28
 3cc:	0e 94 24 01 	call	0x248	; 0x248 <_Z7ReadADCh>
 3d0:	82 3b       	cpi	r24, 0xB2	; 178
 3d2:	93 40       	sbci	r25, 0x03	; 3
 3d4:	18 f0       	brcs	.+6      	; 0x3dc <main+0x16c>
			{SLEDPORT|=(1<<SGRN);SLEDPORT&=~(1<<SRED);
 3d6:	5d 9a       	sbi	0x0b, 5	; 11
 3d8:	5e 98       	cbi	0x0b, 6	; 11
 3da:	a1 cf       	rjmp	.-190    	; 0x31e <main+0xae>
			}
			else
			{SLEDPORT|=(1<<SRED);SLEDPORT&=~(1<<SGRN);
 3dc:	5e 9a       	sbi	0x0b, 6	; 11
 3de:	5d 98       	cbi	0x0b, 5	; 11
 3e0:	9e cf       	rjmp	.-196    	; 0x31e <main+0xae>
			}
		} 
		else
		{SLEDPORT&=~(1<<SRED);SLEDPORT&=~(1<<SGRN);
 3e2:	5e 98       	cbi	0x0b, 6	; 11
 3e4:	5d 98       	cbi	0x0b, 5	; 11
 3e6:	9b cf       	rjmp	.-202    	; 0x31e <main+0xae>
		{	_delay_ms(5);
			char*filtereN;
			strncpy(filtereN,strstr(rxvalue,"T")+2,1);
			int num= strcmp(filtereN,"B");
			if ((num==0)&&(((PINB&(1<<5))==0)))
			{LLEDPORT|=(1<<LBLU);
 3e8:	42 9a       	sbi	0x08, 2	; 8
			LLEDPORT&=~(1<<LRED);
 3ea:	40 98       	cbi	0x08, 0	; 8
			LLEDPORT&=~(1<<LGRN);
 3ec:	41 98       	cbi	0x08, 1	; 8
 3ee:	ca cf       	rjmp	.-108    	; 0x384 <main+0x114>

000003f0 <__divmodhi4>:
 3f0:	97 fb       	bst	r25, 7
 3f2:	07 2e       	mov	r0, r23
 3f4:	16 f4       	brtc	.+4      	; 0x3fa <__divmodhi4+0xa>
 3f6:	00 94       	com	r0
 3f8:	07 d0       	rcall	.+14     	; 0x408 <__divmodhi4_neg1>
 3fa:	77 fd       	sbrc	r23, 7
 3fc:	09 d0       	rcall	.+18     	; 0x410 <__divmodhi4_neg2>
 3fe:	0e 94 2e 02 	call	0x45c	; 0x45c <__udivmodhi4>
 402:	07 fc       	sbrc	r0, 7
 404:	05 d0       	rcall	.+10     	; 0x410 <__divmodhi4_neg2>
 406:	3e f4       	brtc	.+14     	; 0x416 <__divmodhi4_exit>

00000408 <__divmodhi4_neg1>:
 408:	90 95       	com	r25
 40a:	81 95       	neg	r24
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__divmodhi4_neg2>:
 410:	70 95       	com	r23
 412:	61 95       	neg	r22
 414:	7f 4f       	sbci	r23, 0xFF	; 255

00000416 <__divmodhi4_exit>:
 416:	08 95       	ret

00000418 <__udivmodsi4>:
 418:	a1 e2       	ldi	r26, 0x21	; 33
 41a:	1a 2e       	mov	r1, r26
 41c:	aa 1b       	sub	r26, r26
 41e:	bb 1b       	sub	r27, r27
 420:	fd 01       	movw	r30, r26
 422:	0d c0       	rjmp	.+26     	; 0x43e <__udivmodsi4_ep>

00000424 <__udivmodsi4_loop>:
 424:	aa 1f       	adc	r26, r26
 426:	bb 1f       	adc	r27, r27
 428:	ee 1f       	adc	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	a2 17       	cp	r26, r18
 42e:	b3 07       	cpc	r27, r19
 430:	e4 07       	cpc	r30, r20
 432:	f5 07       	cpc	r31, r21
 434:	20 f0       	brcs	.+8      	; 0x43e <__udivmodsi4_ep>
 436:	a2 1b       	sub	r26, r18
 438:	b3 0b       	sbc	r27, r19
 43a:	e4 0b       	sbc	r30, r20
 43c:	f5 0b       	sbc	r31, r21

0000043e <__udivmodsi4_ep>:
 43e:	66 1f       	adc	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	88 1f       	adc	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	1a 94       	dec	r1
 448:	69 f7       	brne	.-38     	; 0x424 <__udivmodsi4_loop>
 44a:	60 95       	com	r22
 44c:	70 95       	com	r23
 44e:	80 95       	com	r24
 450:	90 95       	com	r25
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	bd 01       	movw	r22, r26
 458:	cf 01       	movw	r24, r30
 45a:	08 95       	ret

0000045c <__udivmodhi4>:
 45c:	aa 1b       	sub	r26, r26
 45e:	bb 1b       	sub	r27, r27
 460:	51 e1       	ldi	r21, 0x11	; 17
 462:	07 c0       	rjmp	.+14     	; 0x472 <__udivmodhi4_ep>

00000464 <__udivmodhi4_loop>:
 464:	aa 1f       	adc	r26, r26
 466:	bb 1f       	adc	r27, r27
 468:	a6 17       	cp	r26, r22
 46a:	b7 07       	cpc	r27, r23
 46c:	10 f0       	brcs	.+4      	; 0x472 <__udivmodhi4_ep>
 46e:	a6 1b       	sub	r26, r22
 470:	b7 0b       	sbc	r27, r23

00000472 <__udivmodhi4_ep>:
 472:	88 1f       	adc	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	5a 95       	dec	r21
 478:	a9 f7       	brne	.-22     	; 0x464 <__udivmodhi4_loop>
 47a:	80 95       	com	r24
 47c:	90 95       	com	r25
 47e:	bc 01       	movw	r22, r24
 480:	cd 01       	movw	r24, r26
 482:	08 95       	ret

00000484 <strchr>:
 484:	fc 01       	movw	r30, r24
 486:	81 91       	ld	r24, Z+
 488:	86 17       	cp	r24, r22
 48a:	21 f0       	breq	.+8      	; 0x494 <strchr+0x10>
 48c:	88 23       	and	r24, r24
 48e:	d9 f7       	brne	.-10     	; 0x486 <strchr+0x2>
 490:	99 27       	eor	r25, r25
 492:	08 95       	ret
 494:	31 97       	sbiw	r30, 0x01	; 1
 496:	cf 01       	movw	r24, r30
 498:	08 95       	ret

0000049a <strcmp>:
 49a:	fb 01       	movw	r30, r22
 49c:	dc 01       	movw	r26, r24
 49e:	8d 91       	ld	r24, X+
 4a0:	01 90       	ld	r0, Z+
 4a2:	80 19       	sub	r24, r0
 4a4:	01 10       	cpse	r0, r1
 4a6:	d9 f3       	breq	.-10     	; 0x49e <strcmp+0x4>
 4a8:	99 0b       	sbc	r25, r25
 4aa:	08 95       	ret

000004ac <strncpy>:
 4ac:	fb 01       	movw	r30, r22
 4ae:	dc 01       	movw	r26, r24
 4b0:	41 50       	subi	r20, 0x01	; 1
 4b2:	50 40       	sbci	r21, 0x00	; 0
 4b4:	48 f0       	brcs	.+18     	; 0x4c8 <strncpy+0x1c>
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	00 20       	and	r0, r0
 4bc:	c9 f7       	brne	.-14     	; 0x4b0 <strncpy+0x4>
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <strncpy+0x16>
 4c0:	1d 92       	st	X+, r1
 4c2:	41 50       	subi	r20, 0x01	; 1
 4c4:	50 40       	sbci	r21, 0x00	; 0
 4c6:	e0 f7       	brcc	.-8      	; 0x4c0 <strncpy+0x14>
 4c8:	08 95       	ret

000004ca <strstr>:
 4ca:	fb 01       	movw	r30, r22
 4cc:	51 91       	ld	r21, Z+
 4ce:	55 23       	and	r21, r21
 4d0:	a9 f0       	breq	.+42     	; 0x4fc <strstr+0x32>
 4d2:	bf 01       	movw	r22, r30
 4d4:	dc 01       	movw	r26, r24
 4d6:	4d 91       	ld	r20, X+
 4d8:	45 17       	cp	r20, r21
 4da:	41 11       	cpse	r20, r1
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <strstr+0xc>
 4de:	59 f4       	brne	.+22     	; 0x4f6 <strstr+0x2c>
 4e0:	cd 01       	movw	r24, r26
 4e2:	01 90       	ld	r0, Z+
 4e4:	00 20       	and	r0, r0
 4e6:	49 f0       	breq	.+18     	; 0x4fa <strstr+0x30>
 4e8:	4d 91       	ld	r20, X+
 4ea:	40 15       	cp	r20, r0
 4ec:	41 11       	cpse	r20, r1
 4ee:	c9 f3       	breq	.-14     	; 0x4e2 <strstr+0x18>
 4f0:	fb 01       	movw	r30, r22
 4f2:	41 11       	cpse	r20, r1
 4f4:	ef cf       	rjmp	.-34     	; 0x4d4 <strstr+0xa>
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	08 95       	ret

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>

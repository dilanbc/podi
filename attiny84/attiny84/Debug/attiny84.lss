
attiny84.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005de  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000517  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cc  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	29 d0       	rcall	.+82     	; 0x7e <main>
  2c:	38 c0       	rjmp	.+112    	; 0x9e <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <_Z12USI_SPI_inith>:
uint8_t USI_SPI_receiver(void){
	USISR |= (1<<USIOIF);
	while(!(USISR & (1<<USIOIF)));
	// Return USI buffer reg. content
	return USIDR;
}
  30:	81 30       	cpi	r24, 0x01	; 1
  32:	81 f4       	brne	.+32     	; 0x54 <__SREG__+0x15>
  34:	87 b3       	in	r24, 0x17	; 23
  36:	85 61       	ori	r24, 0x15	; 21
  38:	87 bb       	out	0x17, r24	; 23
  3a:	88 b3       	in	r24, 0x18	; 24
  3c:	80 61       	ori	r24, 0x10	; 16
  3e:	88 bb       	out	0x18, r24	; 24
  40:	87 b3       	in	r24, 0x17	; 23
  42:	8d 7f       	andi	r24, 0xFD	; 253
  44:	87 bb       	out	0x17, r24	; 23
  46:	8e b1       	in	r24, 0x0e	; 14
  48:	80 64       	ori	r24, 0x40	; 64
  4a:	8e b9       	out	0x0e, r24	; 14
  4c:	8d b1       	in	r24, 0x0d	; 13
  4e:	8b 61       	ori	r24, 0x1B	; 27
  50:	8d b9       	out	0x0d, r24	; 13
  52:	08 95       	ret
  54:	81 11       	cpse	r24, r1
  56:	0c c0       	rjmp	.+24     	; 0x70 <__SREG__+0x31>
  58:	87 b3       	in	r24, 0x17	; 23
  5a:	8d 7f       	andi	r24, 0xFD	; 253
  5c:	87 bb       	out	0x17, r24	; 23
  5e:	87 b3       	in	r24, 0x17	; 23
  60:	81 60       	ori	r24, 0x01	; 1
  62:	87 bb       	out	0x17, r24	; 23
  64:	88 b3       	in	r24, 0x18	; 24
  66:	86 60       	ori	r24, 0x06	; 6
  68:	88 bb       	out	0x18, r24	; 24
  6a:	88 e5       	ldi	r24, 0x58	; 88
  6c:	8d b9       	out	0x0d, r24	; 13
  6e:	08 95       	ret
  70:	87 b3       	in	r24, 0x17	; 23
  72:	81 60       	ori	r24, 0x01	; 1
  74:	87 bb       	out	0x17, r24	; 23
  76:	88 b3       	in	r24, 0x18	; 24
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	88 bb       	out	0x18, r24	; 24
  7c:	08 95       	ret

0000007e <main>:

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<

int main(){
	DDRB &= ~(1<<PINB3);
  7e:	87 b3       	in	r24, 0x17	; 23
  80:	87 7f       	andi	r24, 0xF7	; 247
  82:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PINB3);
  84:	88 b3       	in	r24, 0x18	; 24
  86:	88 60       	ori	r24, 0x08	; 8
  88:	88 bb       	out	0x18, r24	; 24

	USI_SPI_init(1);
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	d1 df       	rcall	.-94     	; 0x30 <_Z12USI_SPI_inith>
	
	uint8_t count = 0;

	while(True){
		if (bit_is_clear(PINB, 3)){
  8e:	86 b3       	in	r24, 0x16	; 22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	87 ea       	ldi	r24, 0xA7	; 167
  92:	91 e6       	ldi	r25, 0x61	; 97
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x16>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x1c>
  9a:	00 00       	nop
  9c:	f8 cf       	rjmp	.-16     	; 0x8e <main+0x10>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>

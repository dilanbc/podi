
GccApplicationc5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a7  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ce  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c6  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000151d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <stepperM>:
	}
}

void stepperM(uint8_t side,uint16_t cycle){

	if (side)
  6c:	88 23       	and	r24, r24
  6e:	31 f0       	breq	.+12     	; 0x7c <stepperM+0x10>
	{stepPORT|=(1<<DIRL);
  70:	85 b3       	in	r24, 0x15	; 21
  72:	88 60       	ori	r24, 0x08	; 8
  74:	85 bb       	out	0x15, r24	; 21
	while (1)
	{
	}
}

void stepperM(uint8_t side,uint16_t cycle){
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	18 c0       	rjmp	.+48     	; 0xac <stepperM+0x40>

	if (side)
	{stepPORT|=(1<<DIRL);
	}
	else
	{stepPORT&=~(1<<DIRL);
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	87 7f       	andi	r24, 0xF7	; 247
  80:	85 bb       	out	0x15, r24	; 21
  82:	f9 cf       	rjmp	.-14     	; 0x76 <stepperM+0xa>
	}


	for(uint16_t i=0;i<cycle;i++){
		stepPORT|=(1<<STEPL);
  84:	85 b3       	in	r24, 0x15	; 21
  86:	80 62       	ori	r24, 0x20	; 32
  88:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f ec       	ldi	r24, 0xCF	; 207
  8c:	97 e0       	ldi	r25, 0x07	; 7
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <stepperM+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <stepperM+0x28>
  94:	00 00       	nop
		_delay_us(1000);
		stepPORT&=~(1<<STEPL);
  96:	85 b3       	in	r24, 0x15	; 21
  98:	8f 7d       	andi	r24, 0xDF	; 223
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	97 e0       	ldi	r25, 0x07	; 7
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <stepperM+0x34>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <stepperM+0x3a>
  a6:	00 00       	nop
	else
	{stepPORT&=~(1<<DIRL);
	}


	for(uint16_t i=0;i<cycle;i++){
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	3f 4f       	sbci	r19, 0xFF	; 255
  ac:	26 17       	cp	r18, r22
  ae:	37 07       	cpc	r19, r23
  b0:	48 f3       	brcs	.-46     	; 0x84 <stepperM+0x18>
		stepPORT|=(1<<STEPL);
		_delay_us(1000);
		stepPORT&=~(1<<STEPL);
		_delay_us(1000);
	}
}
  b2:	08 95       	ret

000000b4 <main>:

void stepperM(uint8_t side,uint16_t cycle);

int main(void)
{
	stepDDR|=(1<<DIRL)|(1<<STEPL);
  b4:	84 b3       	in	r24, 0x14	; 20
  b6:	88 62       	ori	r24, 0x28	; 40
  b8:	84 bb       	out	0x14, r24	; 20
	stepperM(0,5000);
  ba:	68 e8       	ldi	r22, 0x88	; 136
  bc:	73 e1       	ldi	r23, 0x13	; 19
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <stepperM>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x10>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>

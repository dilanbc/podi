
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060e  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	DDRD|=(0b11<<4);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 63       	ori	r24, 0x30	; 48
  70:	81 bb       	out	0x11, r24	; 17
	DDRA|=(1<<7);
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	80 68       	ori	r24, 0x80	; 128
  76:	8a bb       	out	0x1a, r24	; 26
	
	PORTD|=(1<<5);//heater on
  78:	82 b3       	in	r24, 0x12	; 18
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	82 bb       	out	0x12, r24	; 18
	uint8_t i=0; //counter
  7e:	90 e0       	ldi	r25, 0x00	; 0
	
	
    while (1) 
    {
		if (PIND&(1<<0))// if logic==1
  80:	80 9b       	sbis	0x10, 0	; 16
  82:	07 c0       	rjmp	.+14     	; 0x92 <main+0x26>
		{
			PORTD&=~(1<<5);//heater off
  84:	82 b3       	in	r24, 0x12	; 18
  86:	8f 7d       	andi	r24, 0xDF	; 223
  88:	82 bb       	out	0x12, r24	; 18
			PORTD|=(1<<4);//water in
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	80 61       	ori	r24, 0x10	; 16
  8e:	82 bb       	out	0x12, r24	; 18
  90:	09 c0       	rjmp	.+18     	; 0xa4 <main+0x38>
			
		}
		 
		else
		{PORTD&=~(1<<4);//water in off
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8f 7e       	andi	r24, 0xEF	; 239
  96:	82 bb       	out	0x12, r24	; 18
		PORTD|=(1<<5);//heater on
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	82 bb       	out	0x12, r24	; 18
			i++;
  9e:	9f 5f       	subi	r25, 0xFF	; 255
			if (i>20)
  a0:	95 31       	cpi	r25, 0x15	; 21
  a2:	50 f4       	brcc	.+20     	; 0xb8 <main+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	39 e6       	ldi	r19, 0x69	; 105
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
  b6:	e4 cf       	rjmp	.-56     	; 0x80 <main+0x14>
			}
		}
		_delay_ms(1000);
		
    }
	PORTD&=~(1<<5);//heater off
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	8f 7d       	andi	r24, 0xDF	; 223
  bc:	82 bb       	out	0x12, r24	; 18
	PORTD&=~(1<<4);//water in off
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8f 7e       	andi	r24, 0xEF	; 239
  c2:	82 bb       	out	0x12, r24	; 18
	PORTA|=(1<<7);//water out on
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	8b bb       	out	0x1b, r24	; 27
}
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	08 95       	ret

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

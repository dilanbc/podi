
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b9  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005db  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000299  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c6  00000000  00000000  000014af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8stepperMbj>:
    }
}

void stepperM(bool side,uint16_t cycle){

if (side)
  6c:	88 23       	and	r24, r24
  6e:	31 f0       	breq	.+12     	; 0x7c <_Z8stepperMbj+0x10>
{stepPORT|=(1<<DIRL);
  70:	85 b3       	in	r24, 0x15	; 21
  72:	88 60       	ori	r24, 0x08	; 8
  74:	85 bb       	out	0x15, r24	; 21
    while (1) 
    {
    }
}

void stepperM(bool side,uint16_t cycle){
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	04 c0       	rjmp	.+8      	; 0x84 <_Z8stepperMbj+0x18>

if (side)
{stepPORT|=(1<<DIRL);
} 
else
{stepPORT&=~(1<<DIRL);
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	87 7f       	andi	r24, 0xF7	; 247
  80:	85 bb       	out	0x15, r24	; 21
  82:	f9 cf       	rjmp	.-14     	; 0x76 <_Z8stepperMbj+0xa>
}


for(uint16_t i=0;i<cycle;i++){
  84:	26 17       	cp	r18, r22
  86:	37 07       	cpc	r19, r23
  88:	a8 f4       	brcc	.+42     	; 0xb4 <_Z8stepperMbj+0x48>
stepPORT|=(1<<STEPL);
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f ec       	ldi	r24, 0xCF	; 207
  92:	97 e0       	ldi	r25, 0x07	; 7
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <_Z8stepperMbj+0x28>
  98:	00 c0       	rjmp	.+0      	; 0x9a <_Z8stepperMbj+0x2e>
  9a:	00 00       	nop
_delay_us(1000);
stepPORT&=~(1<<STEPL);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8f 7d       	andi	r24, 0xDF	; 223
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	8f ec       	ldi	r24, 0xCF	; 207
  a4:	97 e0       	ldi	r25, 0x07	; 7
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <_Z8stepperMbj+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <_Z8stepperMbj+0x40>
  ac:	00 00       	nop
else
{stepPORT&=~(1<<DIRL);
}


for(uint16_t i=0;i<cycle;i++){
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	e8 cf       	rjmp	.-48     	; 0x84 <_Z8stepperMbj+0x18>
  b4:	08 95       	ret

000000b6 <main>:

void stepperM(bool side,uint16_t cycle);

int main(void)
{
    stepDDR|=(1<<DIRL)|(1<<STEPL);
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	88 62       	ori	r24, 0x28	; 40
  ba:	84 bb       	out	0x14, r24	; 20
	 stepperM(0,5000);
  bc:	68 e8       	ldi	r22, 0x88	; 136
  be:	73 e1       	ldi	r23, 0x13	; 19
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8stepperMbj>
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x10>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>


complete.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  000012dc  00001370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800190  00800190  000014a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001538  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d6e  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000848  00000000  00000000  000033f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c32  00000000  00000000  00003c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00004870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055e  00000000  00000000  00004af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f3e  00000000  00000000  00005052  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00005f90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 04 	call	0x912	; 0x912 <main>
      8a:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LcdBacklight>:
}

void USART_TxNumber(int32_t number,uint8_t dtype){
	
	itoa(number,num,dtype);
	USART_TxString(num);
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	21 f4       	brne	.+8      	; 0x9e <LcdBacklight+0xc>
      96:	88 e0       	ldi	r24, 0x08	; 8
      98:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Backlight>
      9c:	08 95       	ret
      9e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Backlight>
      a2:	08 95       	ret

000000a4 <Lcd4bitdata>:
      a4:	38 2f       	mov	r19, r24
      a6:	36 2b       	or	r19, r22
      a8:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Backlight>
      ac:	23 2b       	or	r18, r19
      ae:	28 bb       	out	0x18, r18	; 24
      b0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Backlight>
      b4:	93 2b       	or	r25, r19
      b6:	94 60       	ori	r25, 0x04	; 4
      b8:	98 bb       	out	0x18, r25	; 24
      ba:	ef e8       	ldi	r30, 0x8F	; 143
      bc:	f1 e0       	ldi	r31, 0x01	; 1
      be:	31 97       	sbiw	r30, 0x01	; 1
      c0:	f1 f7       	brne	.-4      	; 0xbe <Lcd4bitdata+0x1a>
      c2:	00 c0       	rjmp	.+0      	; 0xc4 <Lcd4bitdata+0x20>
      c4:	00 00       	nop
      c6:	8b 7f       	andi	r24, 0xFB	; 251
      c8:	68 2b       	or	r22, r24
      ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Backlight>
      ce:	68 2b       	or	r22, r24
      d0:	68 bb       	out	0x18, r22	; 24
      d2:	8f e9       	ldi	r24, 0x9F	; 159
      d4:	9f e0       	ldi	r25, 0x0F	; 15
      d6:	01 97       	sbiw	r24, 0x01	; 1
      d8:	f1 f7       	brne	.-4      	; 0xd6 <Lcd4bitdata+0x32>
      da:	00 c0       	rjmp	.+0      	; 0xdc <Lcd4bitdata+0x38>
      dc:	00 00       	nop
      de:	08 95       	ret

000000e0 <LcdCommand>:
      e0:	cf 93       	push	r28
      e2:	c8 2f       	mov	r28, r24
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 7f       	andi	r24, 0xF0	; 240
      e8:	0e 94 52 00 	call	0xa4	; 0xa4 <Lcd4bitdata>
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	8c 2f       	mov	r24, r28
      f0:	82 95       	swap	r24
      f2:	80 7f       	andi	r24, 0xF0	; 240
      f4:	0e 94 52 00 	call	0xa4	; 0xa4 <Lcd4bitdata>
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <LcdInit>:
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	0e 94 49 00 	call	0x92	; 0x92 <LcdBacklight>
     102:	8f e3       	ldi	r24, 0x3F	; 63
     104:	9c e9       	ldi	r25, 0x9C	; 156
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <LcdInit+0xa>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <LcdInit+0x10>
     10c:	00 00       	nop
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	87 bb       	out	0x17, r24	; 23
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
     118:	88 e2       	ldi	r24, 0x28	; 40
     11a:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
     11e:	8c e0       	ldi	r24, 0x0C	; 12
     120:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
     124:	86 e0       	ldi	r24, 0x06	; 6
     126:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
     130:	08 95       	ret

00000132 <LcdChar>:
     132:	cf 93       	push	r28
     134:	c8 2f       	mov	r28, r24
     136:	61 e0       	ldi	r22, 0x01	; 1
     138:	80 7f       	andi	r24, 0xF0	; 240
     13a:	0e 94 52 00 	call	0xa4	; 0xa4 <Lcd4bitdata>
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	8c 2f       	mov	r24, r28
     142:	82 95       	swap	r24
     144:	80 7f       	andi	r24, 0xF0	; 240
     146:	0e 94 52 00 	call	0xa4	; 0xa4 <Lcd4bitdata>
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <LcdString>:
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	8c 01       	movw	r16, r24
     158:	c0 e0       	ldi	r28, 0x00	; 0
     15a:	d0 e0       	ldi	r29, 0x00	; 0
     15c:	03 c0       	rjmp	.+6      	; 0x164 <LcdString+0x16>
     15e:	0e 94 99 00 	call	0x132	; 0x132 <LcdChar>
     162:	21 96       	adiw	r28, 0x01	; 1
     164:	f8 01       	movw	r30, r16
     166:	ec 0f       	add	r30, r28
     168:	fd 1f       	adc	r31, r29
     16a:	80 81       	ld	r24, Z
     16c:	81 11       	cpse	r24, r1
     16e:	f7 cf       	rjmp	.-18     	; 0x15e <LcdString+0x10>
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	1f 91       	pop	r17
     176:	0f 91       	pop	r16
     178:	08 95       	ret

0000017a <LcdSetCursor>:
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ea 01       	movw	r28, r20
     180:	61 30       	cpi	r22, 0x01	; 1
     182:	31 f0       	breq	.+12     	; 0x190 <LcdSetCursor+0x16>
     184:	58 f0       	brcs	.+22     	; 0x19c <LcdSetCursor+0x22>
     186:	62 30       	cpi	r22, 0x02	; 2
     188:	29 f0       	breq	.+10     	; 0x194 <LcdSetCursor+0x1a>
     18a:	63 30       	cpi	r22, 0x03	; 3
     18c:	29 f0       	breq	.+10     	; 0x198 <LcdSetCursor+0x1e>
     18e:	07 c0       	rjmp	.+14     	; 0x19e <LcdSetCursor+0x24>
     190:	90 ec       	ldi	r25, 0xC0	; 192
     192:	05 c0       	rjmp	.+10     	; 0x19e <LcdSetCursor+0x24>
     194:	94 e9       	ldi	r25, 0x94	; 148
     196:	03 c0       	rjmp	.+6      	; 0x19e <LcdSetCursor+0x24>
     198:	94 ed       	ldi	r25, 0xD4	; 212
     19a:	01 c0       	rjmp	.+2      	; 0x19e <LcdSetCursor+0x24>
     19c:	90 e8       	ldi	r25, 0x80	; 128
     19e:	8f 70       	andi	r24, 0x0F	; 15
     1a0:	89 2b       	or	r24, r25
     1a2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
     1a6:	ce 01       	movw	r24, r28
     1a8:	0e 94 a7 00 	call	0x14e	; 0x14e <LcdString>
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <USART_Init>:
     1b2:	9c 01       	movw	r18, r24
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	60 e2       	ldi	r22, 0x20	; 32
     1ba:	71 ea       	ldi	r23, 0xA1	; 161
     1bc:	87 e0       	ldi	r24, 0x07	; 7
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 11 06 	call	0xc22	; 0xc22 <__divmodsi4>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	31 09       	sbc	r19, r1
     1c8:	30 bd       	out	0x20, r19	; 32
     1ca:	29 b9       	out	0x09, r18	; 9
     1cc:	88 e9       	ldi	r24, 0x98	; 152
     1ce:	8a b9       	out	0x0a, r24	; 10
     1d0:	8e e8       	ldi	r24, 0x8E	; 142
     1d2:	80 bd       	out	0x20, r24	; 32
     1d4:	78 94       	sei
     1d6:	08 95       	ret

000001d8 <USART_Transmit>:
     1d8:	5d 9b       	sbis	0x0b, 5	; 11
     1da:	fe cf       	rjmp	.-4      	; 0x1d8 <USART_Transmit>
     1dc:	8c b9       	out	0x0c, r24	; 12
     1de:	08 95       	ret

000001e0 <USART_TxStringln>:
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
     1e6:	03 c0       	rjmp	.+6      	; 0x1ee <USART_TxStringln+0xe>
     1e8:	21 96       	adiw	r28, 0x01	; 1
     1ea:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Transmit>
     1ee:	88 81       	ld	r24, Y
     1f0:	81 11       	cpse	r24, r1
     1f2:	fa cf       	rjmp	.-12     	; 0x1e8 <USART_TxStringln+0x8>
     1f4:	8d e0       	ldi	r24, 0x0D	; 13
     1f6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Transmit>
     1fa:	8a e0       	ldi	r24, 0x0A	; 10
     1fc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Transmit>
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <__vector_13>:
	
}



ISR(USART_RXC_vect){//A,B,C,D ???
     206:	1f 92       	push	r1
     208:	0f 92       	push	r0
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	0f 92       	push	r0
     20e:	11 24       	eor	r1, r1
     210:	8f 93       	push	r24
	
 rchar=UDR;
     212:	8c b1       	in	r24, 0x0c	; 12
     214:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <rchar>
	

	
		
}
     218:	8f 91       	pop	r24
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <getkeyNum>:
	PORTD&=~(1<<5);
	
}

uint8_t getkeyNum(){
	DDRA=0b00001111;
     224:	8f e0       	ldi	r24, 0x0F	; 15
     226:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b11110000;
     228:	80 ef       	ldi	r24, 0xF0	; 240
     22a:	8b bb       	out	0x1b, r24	; 27
	uint8_t getx;
	uint8_t gety;
	while(1){
		
		uint8_t pin=(~(PINA|0x0F));
     22c:	89 b3       	in	r24, 0x19	; 25
     22e:	8f 60       	ori	r24, 0x0F	; 15
     230:	80 95       	com	r24
		if (pin)
     232:	e1 f3       	breq	.-8      	; 0x22c <getkeyNum+0x8>
		{
			
			
			switch(pin){
     234:	80 32       	cpi	r24, 0x20	; 32
     236:	49 f0       	breq	.+18     	; 0x24a <getkeyNum+0x26>
     238:	18 f4       	brcc	.+6      	; 0x240 <getkeyNum+0x1c>
     23a:	80 31       	cpi	r24, 0x10	; 16
     23c:	61 f0       	breq	.+24     	; 0x256 <getkeyNum+0x32>
     23e:	0c c0       	rjmp	.+24     	; 0x258 <getkeyNum+0x34>
     240:	80 34       	cpi	r24, 0x40	; 64
     242:	29 f0       	breq	.+10     	; 0x24e <getkeyNum+0x2a>
     244:	80 38       	cpi	r24, 0x80	; 128
     246:	29 f0       	breq	.+10     	; 0x252 <getkeyNum+0x2e>
     248:	07 c0       	rjmp	.+14     	; 0x258 <getkeyNum+0x34>
				
				
				case (1<<4) :getx=0; break;
				case (1<<5) :getx=1;break;
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	05 c0       	rjmp	.+10     	; 0x258 <getkeyNum+0x34>
				case (1<<6) :getx=2;break;
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	03 c0       	rjmp	.+6      	; 0x258 <getkeyNum+0x34>
				case (1<<7) :getx=3;break;
     252:	93 e0       	ldi	r25, 0x03	; 3
     254:	01 c0       	rjmp	.+2      	; 0x258 <getkeyNum+0x34>
			
			
			switch(pin){
				
				
				case (1<<4) :getx=0; break;
     256:	90 e0       	ldi	r25, 0x00	; 0
				case (1<<6) :getx=2;break;
				case (1<<7) :getx=3;break;
				
				
			} //switch
			DDRA=0b0;
     258:	1a ba       	out	0x1a, r1	; 26
			PORTA=0b0;
     25a:	1b ba       	out	0x1b, r1	; 27
			
			DDRA=0b11110000;
     25c:	80 ef       	ldi	r24, 0xF0	; 240
     25e:	8a bb       	out	0x1a, r24	; 26
			PORTA=0b00001111;
     260:	8f e0       	ldi	r24, 0x0F	; 15
     262:	8b bb       	out	0x1b, r24	; 27
			
			pin=~(PINA|0xF0);
     264:	89 b3       	in	r24, 0x19	; 25
     266:	80 6f       	ori	r24, 0xF0	; 240
     268:	80 95       	com	r24
			
			switch(pin){
     26a:	82 30       	cpi	r24, 0x02	; 2
     26c:	49 f0       	breq	.+18     	; 0x280 <getkeyNum+0x5c>
     26e:	18 f4       	brcc	.+6      	; 0x276 <getkeyNum+0x52>
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	61 f0       	breq	.+24     	; 0x28c <getkeyNum+0x68>
     274:	0c c0       	rjmp	.+24     	; 0x28e <getkeyNum+0x6a>
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	29 f0       	breq	.+10     	; 0x284 <getkeyNum+0x60>
     27a:	88 30       	cpi	r24, 0x08	; 8
     27c:	29 f0       	breq	.+10     	; 0x288 <getkeyNum+0x64>
     27e:	07 c0       	rjmp	.+14     	; 0x28e <getkeyNum+0x6a>
				case (1<<0) :gety=0;break;
				case (1<<1) :gety=1;break;
     280:	e1 e0       	ldi	r30, 0x01	; 1
     282:	05 c0       	rjmp	.+10     	; 0x28e <getkeyNum+0x6a>
				case (1<<2) :gety=2;break;
     284:	e2 e0       	ldi	r30, 0x02	; 2
     286:	03 c0       	rjmp	.+6      	; 0x28e <getkeyNum+0x6a>
				case (1<<3) :gety=3;break;
     288:	e3 e0       	ldi	r30, 0x03	; 3
     28a:	01 c0       	rjmp	.+2      	; 0x28e <getkeyNum+0x6a>
			PORTA=0b00001111;
			
			pin=~(PINA|0xF0);
			
			switch(pin){
				case (1<<0) :gety=0;break;
     28c:	e0 e0       	ldi	r30, 0x00	; 0
				case (1<<2) :gety=2;break;
				case (1<<3) :gety=3;break;
				
			} //switch
			
			DDRA=0b00001111;
     28e:	8f e0       	ldi	r24, 0x0F	; 15
     290:	8a bb       	out	0x1a, r24	; 26
			PORTA=0b11110000;
     292:	80 ef       	ldi	r24, 0xF0	; 240
     294:	8b bb       	out	0x1b, r24	; 27
			
			
			return kaypad[gety][getx];
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	ee 0f       	add	r30, r30
     29a:	ff 1f       	adc	r31, r31
     29c:	ee 0f       	add	r30, r30
     29e:	ff 1f       	adc	r31, r31
     2a0:	e0 58       	subi	r30, 0x80	; 128
     2a2:	fe 4f       	sbci	r31, 0xFE	; 254
     2a4:	e9 0f       	add	r30, r25
     2a6:	f1 1d       	adc	r31, r1
		}//if
		
		
		
	}//while 1
}
     2a8:	80 81       	ld	r24, Z
     2aa:	08 95       	ret

000002ac <EnterID>:


void EnterID(){
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	2c 97       	sbiw	r28, 0x0c	; 12
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
	LcdCommand(LCD_CLEARDISPLAY);
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
	LcdSetCursor(0,0,"Enter ID");
     2c8:	41 e8       	ldi	r20, 0x81	; 129
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
     2d6:	44 e3       	ldi	r20, 0x34	; 52
     2d8:	5c e0       	ldi	r21, 0x0C	; 12
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	40 40       	sbci	r20, 0x00	; 0
     2de:	50 40       	sbci	r21, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <EnterID+0x2e>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <EnterID+0x38>
     2e4:	00 00       	nop
	_delay_ms(500);
	uint8_t pos=0;
	uint8_t numbers[4]={0,0,0,0};
     2e6:	19 82       	std	Y+1, r1	; 0x01
     2e8:	1a 82       	std	Y+2, r1	; 0x02
     2ea:	1b 82       	std	Y+3, r1	; 0x03
     2ec:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t posData[4][2]={{0,9},{1,9},{2,9},{3,9}};
     2ee:	88 e0       	ldi	r24, 0x08	; 8
     2f0:	e3 e6       	ldi	r30, 0x63	; 99
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	de 01       	movw	r26, r28
     2f6:	15 96       	adiw	r26, 0x05	; 5
     2f8:	01 90       	ld	r0, Z+
     2fa:	0d 92       	st	X+, r0
     2fc:	8a 95       	dec	r24
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <EnterID+0x4c>


	sprintf(lcddata,"%u%u%u%u",numbers[0],numbers[1],numbers[2],numbers[3]);
     300:	1f 92       	push	r1
     302:	1f 92       	push	r1
     304:	1f 92       	push	r1
     306:	1f 92       	push	r1
     308:	1f 92       	push	r1
     30a:	1f 92       	push	r1
     30c:	1f 92       	push	r1
     30e:	1f 92       	push	r1
     310:	81 ec       	ldi	r24, 0xC1	; 193
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	9f 93       	push	r25
     316:	8f 93       	push	r24
     318:	8c e9       	ldi	r24, 0x9C	; 156
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	9f 93       	push	r25
     31e:	8f 93       	push	r24
     320:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
	LcdSetCursor(0,1,lcddata);
     324:	4c e9       	ldi	r20, 0x9C	; 156
     326:	51 e0       	ldi	r21, 0x01	; 1
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	LcdSetCursor(pos,1,"");
     330:	47 e2       	ldi	r20, 0x27	; 39
     332:	51 e0       	ldi	r21, 0x01	; 1
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
     33c:	8d e0       	ldi	r24, 0x0D	; 13
     33e:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61

void EnterID(){
	LcdCommand(LCD_CLEARDISPLAY);
	LcdSetCursor(0,0,"Enter ID");
	_delay_ms(500);
	uint8_t pos=0;
     34c:	10 e0       	ldi	r17, 0x00	; 0
	LcdSetCursor(0,1,lcddata);
	LcdSetCursor(pos,1,"");
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);

	while(1){
		uint8_t keyout=getkeyNum();
     34e:	0e 94 12 01 	call	0x224	; 0x224 <getkeyNum>
		
		if (keyout<=posData[pos][1])
     352:	21 2f       	mov	r18, r17
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	f9 01       	movw	r30, r18
     358:	ee 0f       	add	r30, r30
     35a:	ff 1f       	adc	r31, r31
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	4c 0f       	add	r20, r28
     362:	5d 1f       	adc	r21, r29
     364:	e4 0f       	add	r30, r20
     366:	f5 1f       	adc	r31, r21
     368:	95 81       	ldd	r25, Z+5	; 0x05
     36a:	98 17       	cp	r25, r24
     36c:	08 f4       	brcc	.+2      	; 0x370 <EnterID+0xc4>
     36e:	43 c0       	rjmp	.+134    	; 0x3f6 <EnterID+0x14a>
		{
			numbers[pos]=keyout;
     370:	fa 01       	movw	r30, r20
     372:	e2 0f       	add	r30, r18
     374:	f3 1f       	adc	r31, r19
     376:	80 83       	st	Z, r24
			sprintf(lcddata,"%u%u%u%u",numbers[0],numbers[1],numbers[2],numbers[3]);
     378:	3c 81       	ldd	r19, Y+4	; 0x04
     37a:	2b 81       	ldd	r18, Y+3	; 0x03
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	1f 92       	push	r1
     382:	3f 93       	push	r19
     384:	1f 92       	push	r1
     386:	2f 93       	push	r18
     388:	1f 92       	push	r1
     38a:	9f 93       	push	r25
     38c:	1f 92       	push	r1
     38e:	8f 93       	push	r24
     390:	81 ec       	ldi	r24, 0xC1	; 193
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	9f 93       	push	r25
     396:	8f 93       	push	r24
     398:	8c e9       	ldi	r24, 0x9C	; 156
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	9f 93       	push	r25
     39e:	8f 93       	push	r24
     3a0:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
			LcdSetCursor(0,1,lcddata);
     3a4:	4c e9       	ldi	r20, 0x9C	; 156
     3a6:	51 e0       	ldi	r21, 0x01	; 1
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
			pos++;
     3b0:	1f 5f       	subi	r17, 0xFF	; 255
			if (pos>3)
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	14 30       	cpi	r17, 0x04	; 4
     3be:	08 f0       	brcs	.+2      	; 0x3c2 <EnterID+0x116>
			{pos=0;
     3c0:	10 e0       	ldi	r17, 0x00	; 0
			}
			LcdSetCursor(posData[pos][0],1,"");
     3c2:	e1 2f       	mov	r30, r17
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	ee 0f       	add	r30, r30
     3c8:	ff 1f       	adc	r31, r31
     3ca:	41 e0       	ldi	r20, 0x01	; 1
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	4c 0f       	add	r20, r28
     3d0:	5d 1f       	adc	r21, r29
     3d2:	e4 0f       	add	r30, r20
     3d4:	f5 1f       	adc	r31, r21
     3d6:	47 e2       	ldi	r20, 0x27	; 39
     3d8:	51 e0       	ldi	r21, 0x01	; 1
     3da:	61 e0       	ldi	r22, 0x01	; 1
     3dc:	84 81       	ldd	r24, Z+4	; 0x04
     3de:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     3e2:	5f ef       	ldi	r21, 0xFF	; 255
     3e4:	81 ee       	ldi	r24, 0xE1	; 225
     3e6:	94 e0       	ldi	r25, 0x04	; 4
     3e8:	51 50       	subi	r21, 0x01	; 1
     3ea:	80 40       	sbci	r24, 0x00	; 0
     3ec:	90 40       	sbci	r25, 0x00	; 0
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <EnterID+0x13c>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <EnterID+0x146>
     3f2:	00 00       	nop
     3f4:	ac cf       	rjmp	.-168    	; 0x34e <EnterID+0xa2>
			_delay_ms(200);
		}
		
		else if (keyout==14)
     3f6:	8e 30       	cpi	r24, 0x0E	; 14
     3f8:	09 f0       	breq	.+2      	; 0x3fc <EnterID+0x150>
     3fa:	a9 cf       	rjmp	.-174    	; 0x34e <EnterID+0xa2>
		{
			LcdCommand(LCD_CLEARDISPLAY);
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
			LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKOFF);
     402:	8c e0       	ldi	r24, 0x0C	; 12
     404:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
			LcdSetCursor(0,0,"ID Added");
     408:	4a e8       	ldi	r20, 0x8A	; 138
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
			PatID=(numbers[0]*1000)+(numbers[1]*100)+(numbers[2]*10)+numbers[3];
     414:	29 81       	ldd	r18, Y+1	; 0x01
     416:	88 ee       	ldi	r24, 0xE8	; 232
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	28 9f       	mul	r18, r24
     41c:	b0 01       	movw	r22, r0
     41e:	29 9f       	mul	r18, r25
     420:	70 0d       	add	r23, r0
     422:	11 24       	eor	r1, r1
     424:	8a 81       	ldd	r24, Y+2	; 0x02
     426:	24 e6       	ldi	r18, 0x64	; 100
     428:	82 9f       	mul	r24, r18
     42a:	60 0d       	add	r22, r0
     42c:	71 1d       	adc	r23, r1
     42e:	11 24       	eor	r1, r1
     430:	8b 81       	ldd	r24, Y+3	; 0x03
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	9c 01       	movw	r18, r24
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	68 0f       	add	r22, r24
     44c:	79 1f       	adc	r23, r25
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	68 0f       	add	r22, r24
     452:	71 1d       	adc	r23, r1
     454:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <PatID+0x1>
     458:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <PatID>
			eeprom_write_word((uint16_t*)((user*9)+1),PatID);
     45c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	9c 01       	movw	r18, r24
     464:	22 0f       	add	r18, r18
     466:	33 1f       	adc	r19, r19
     468:	22 0f       	add	r18, r18
     46a:	33 1f       	adc	r19, r19
     46c:	22 0f       	add	r18, r18
     46e:	33 1f       	adc	r19, r19
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 20 09 	call	0x1240	; 0x1240 <eeprom_write_word>
     47a:	4f ef       	ldi	r20, 0xFF	; 255
     47c:	54 e3       	ldi	r21, 0x34	; 52
     47e:	8c e0       	ldi	r24, 0x0C	; 12
     480:	41 50       	subi	r20, 0x01	; 1
     482:	50 40       	sbci	r21, 0x00	; 0
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     48a:	00 00       	nop
			_delay_ms(500);
			break;
		}
	}
}
     48c:	2c 96       	adiw	r28, 0x0c	; 12
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	f8 94       	cli
     492:	de bf       	out	0x3e, r29	; 62
     494:	0f be       	out	0x3f, r0	; 63
     496:	cd bf       	out	0x3d, r28	; 61
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	08 95       	ret

000004a0 <EnterAge>:


void EnterAge(){
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	29 97       	sbiw	r28, 0x09	; 9
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
	LcdCommand(LCD_CLEARDISPLAY);
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
	LcdSetCursor(0,0,"Enter Age");
     4bc:	43 e9       	ldi	r20, 0x93	; 147
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     4c8:	2f ef       	ldi	r18, 0xFF	; 255
     4ca:	44 e3       	ldi	r20, 0x34	; 52
     4cc:	5c e0       	ldi	r21, 0x0C	; 12
     4ce:	21 50       	subi	r18, 0x01	; 1
     4d0:	40 40       	sbci	r20, 0x00	; 0
     4d2:	50 40       	sbci	r21, 0x00	; 0
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <EnterAge+0x2e>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <EnterAge+0x38>
     4d8:	00 00       	nop
	_delay_ms(500);
	uint8_t pos=0;
	uint8_t numbers[3]={0,0,0};
     4da:	19 82       	std	Y+1, r1	; 0x01
     4dc:	1a 82       	std	Y+2, r1	; 0x02
     4de:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t posData[3][2]={{0,9},{1,9},{2,9}};
     4e0:	86 e0       	ldi	r24, 0x06	; 6
     4e2:	eb e6       	ldi	r30, 0x6B	; 107
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	de 01       	movw	r26, r28
     4e8:	14 96       	adiw	r26, 0x04	; 4
     4ea:	01 90       	ld	r0, Z+
     4ec:	0d 92       	st	X+, r0
     4ee:	8a 95       	dec	r24
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <EnterAge+0x4a>


	sprintf(lcddata,"%u%u%u",numbers[0],numbers[1],numbers[2]);
     4f2:	1f 92       	push	r1
     4f4:	1f 92       	push	r1
     4f6:	1f 92       	push	r1
     4f8:	1f 92       	push	r1
     4fa:	1f 92       	push	r1
     4fc:	1f 92       	push	r1
     4fe:	83 ec       	ldi	r24, 0xC3	; 195
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	8c e9       	ldi	r24, 0x9C	; 156
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
	LcdSetCursor(0,1,lcddata);
     512:	4c e9       	ldi	r20, 0x9C	; 156
     514:	51 e0       	ldi	r21, 0x01	; 1
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	LcdSetCursor(pos,1,"");
     51e:	47 e2       	ldi	r20, 0x27	; 39
     520:	51 e0       	ldi	r21, 0x01	; 1
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
     52a:	8d e0       	ldi	r24, 0x0D	; 13
     52c:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61

void EnterAge(){
	LcdCommand(LCD_CLEARDISPLAY);
	LcdSetCursor(0,0,"Enter Age");
	_delay_ms(500);
	uint8_t pos=0;
     53a:	10 e0       	ldi	r17, 0x00	; 0
	LcdSetCursor(0,1,lcddata);
	LcdSetCursor(pos,1,"");
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);

	while(1){
		uint8_t keyout=getkeyNum();
     53c:	0e 94 12 01 	call	0x224	; 0x224 <getkeyNum>
		
		if (keyout<=posData[pos][1])
     540:	21 2f       	mov	r18, r17
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	f9 01       	movw	r30, r18
     546:	ee 0f       	add	r30, r30
     548:	ff 1f       	adc	r31, r31
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	4c 0f       	add	r20, r28
     550:	5d 1f       	adc	r21, r29
     552:	e4 0f       	add	r30, r20
     554:	f5 1f       	adc	r31, r21
     556:	94 81       	ldd	r25, Z+4	; 0x04
     558:	98 17       	cp	r25, r24
     55a:	08 f4       	brcc	.+2      	; 0x55e <EnterAge+0xbe>
     55c:	40 c0       	rjmp	.+128    	; 0x5de <EnterAge+0x13e>
		{
			numbers[pos]=keyout;
     55e:	fa 01       	movw	r30, r20
     560:	e2 0f       	add	r30, r18
     562:	f3 1f       	adc	r31, r19
     564:	80 83       	st	Z, r24
			sprintf(lcddata,"%u%u%u",numbers[0],numbers[1],numbers[2]);
     566:	2b 81       	ldd	r18, Y+3	; 0x03
     568:	9a 81       	ldd	r25, Y+2	; 0x02
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	1f 92       	push	r1
     56e:	2f 93       	push	r18
     570:	1f 92       	push	r1
     572:	9f 93       	push	r25
     574:	1f 92       	push	r1
     576:	8f 93       	push	r24
     578:	83 ec       	ldi	r24, 0xC3	; 195
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	8c e9       	ldi	r24, 0x9C	; 156
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
			LcdSetCursor(0,1,lcddata);
     58c:	4c e9       	ldi	r20, 0x9C	; 156
     58e:	51 e0       	ldi	r21, 0x01	; 1
     590:	61 e0       	ldi	r22, 0x01	; 1
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
			pos++;
     598:	1f 5f       	subi	r17, 0xFF	; 255
			if (pos>2)
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	13 30       	cpi	r17, 0x03	; 3
     5a6:	08 f0       	brcs	.+2      	; 0x5aa <EnterAge+0x10a>
			{pos=0;
     5a8:	10 e0       	ldi	r17, 0x00	; 0
			}
			LcdSetCursor(posData[pos][0],1,"");
     5aa:	e1 2f       	mov	r30, r17
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	4c 0f       	add	r20, r28
     5b8:	5d 1f       	adc	r21, r29
     5ba:	e4 0f       	add	r30, r20
     5bc:	f5 1f       	adc	r31, r21
     5be:	47 e2       	ldi	r20, 0x27	; 39
     5c0:	51 e0       	ldi	r21, 0x01	; 1
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	83 81       	ldd	r24, Z+3	; 0x03
     5c6:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     5ca:	5f ef       	ldi	r21, 0xFF	; 255
     5cc:	81 ee       	ldi	r24, 0xE1	; 225
     5ce:	94 e0       	ldi	r25, 0x04	; 4
     5d0:	51 50       	subi	r21, 0x01	; 1
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <EnterAge+0x130>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <EnterAge+0x13a>
     5da:	00 00       	nop
     5dc:	af cf       	rjmp	.-162    	; 0x53c <EnterAge+0x9c>
			_delay_ms(200);
		}
		
		else if (keyout==14)
     5de:	8e 30       	cpi	r24, 0x0E	; 14
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <EnterAge+0x144>
     5e2:	ac cf       	rjmp	.-168    	; 0x53c <EnterAge+0x9c>
		{
			LcdCommand(LCD_CLEARDISPLAY);
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
			LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKOFF);
     5ea:	8c e0       	ldi	r24, 0x0C	; 12
     5ec:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
			LcdSetCursor(0,0,"Age Added");
     5f0:	4d e9       	ldi	r20, 0x9D	; 157
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
			PatAge=(numbers[0]*100)+(numbers[1]*10)+numbers[2];
     5fc:	29 81       	ldd	r18, Y+1	; 0x01
     5fe:	8a 81       	ldd	r24, Y+2	; 0x02
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	bc 01       	movw	r22, r24
     604:	66 0f       	add	r22, r22
     606:	77 1f       	adc	r23, r23
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	68 0f       	add	r22, r24
     616:	79 1f       	adc	r23, r25
     618:	44 e6       	ldi	r20, 0x64	; 100
     61a:	24 9f       	mul	r18, r20
     61c:	60 0d       	add	r22, r0
     61e:	71 1d       	adc	r23, r1
     620:	11 24       	eor	r1, r1
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	68 0f       	add	r22, r24
     626:	71 1d       	adc	r23, r1
     628:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <PatAge+0x1>
     62c:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <PatAge>
			eeprom_write_word((uint16_t*)((user*9)+3),PatAge);
     630:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	9c 01       	movw	r18, r24
     638:	22 0f       	add	r18, r18
     63a:	33 1f       	adc	r19, r19
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	22 0f       	add	r18, r18
     642:	33 1f       	adc	r19, r19
     644:	82 0f       	add	r24, r18
     646:	93 1f       	adc	r25, r19
     648:	03 96       	adiw	r24, 0x03	; 3
     64a:	0e 94 20 09 	call	0x1240	; 0x1240 <eeprom_write_word>
     64e:	5f ef       	ldi	r21, 0xFF	; 255
     650:	84 e3       	ldi	r24, 0x34	; 52
     652:	9c e0       	ldi	r25, 0x0C	; 12
     654:	51 50       	subi	r21, 0x01	; 1
     656:	80 40       	sbci	r24, 0x00	; 0
     658:	90 40       	sbci	r25, 0x00	; 0
     65a:	e1 f7       	brne	.-8      	; 0x654 <EnterAge+0x1b4>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <EnterAge+0x1be>
     65e:	00 00       	nop
			_delay_ms(500);
			break;
		}
	}
}
     660:	29 96       	adiw	r28, 0x09	; 9
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	08 95       	ret

00000674 <EnterPhone>:

void EnterPhone(){
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	68 97       	sbiw	r28, 0x18	; 24
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	de bf       	out	0x3e, r29	; 62
     686:	0f be       	out	0x3f, r0	; 63
     688:	cd bf       	out	0x3d, r28	; 61
	LcdCommand(LCD_CLEARDISPLAY);
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
	LcdSetCursor(0,0,"Enter PhoneNum.");
     690:	47 ea       	ldi	r20, 0xA7	; 167
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     69c:	2f ef       	ldi	r18, 0xFF	; 255
     69e:	44 e3       	ldi	r20, 0x34	; 52
     6a0:	5c e0       	ldi	r21, 0x0C	; 12
     6a2:	21 50       	subi	r18, 0x01	; 1
     6a4:	40 40       	sbci	r20, 0x00	; 0
     6a6:	50 40       	sbci	r21, 0x00	; 0
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <EnterPhone+0x2e>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <EnterPhone+0x38>
     6ac:	00 00       	nop
	_delay_ms(500);
	uint8_t pos=0;
	uint8_t numbers[8]={0,0,0,0,0,0,0,0};
     6ae:	fe 01       	movw	r30, r28
     6b0:	31 96       	adiw	r30, 0x01	; 1
     6b2:	88 e0       	ldi	r24, 0x08	; 8
     6b4:	df 01       	movw	r26, r30
     6b6:	1d 92       	st	X+, r1
     6b8:	8a 95       	dec	r24
     6ba:	e9 f7       	brne	.-6      	; 0x6b6 <EnterPhone+0x42>
	uint8_t posData[8][2]={{2,9},{3,9},{4,9},{5,9},{6,9},{7,9},{8,9},{9,9}};
     6bc:	80 e1       	ldi	r24, 0x10	; 16
     6be:	e1 e7       	ldi	r30, 0x71	; 113
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	de 01       	movw	r26, r28
     6c4:	19 96       	adiw	r26, 0x09	; 9
     6c6:	01 90       	ld	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	8a 95       	dec	r24
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <EnterPhone+0x52>


	sprintf(lcddata,"07%u%u%u%u%u%u%u%u",numbers[0],numbers[1],numbers[2],numbers[3],numbers[4],numbers[5],numbers[6],numbers[7]);
     6ce:	1f 92       	push	r1
     6d0:	1f 92       	push	r1
     6d2:	1f 92       	push	r1
     6d4:	1f 92       	push	r1
     6d6:	1f 92       	push	r1
     6d8:	1f 92       	push	r1
     6da:	1f 92       	push	r1
     6dc:	1f 92       	push	r1
     6de:	1f 92       	push	r1
     6e0:	1f 92       	push	r1
     6e2:	1f 92       	push	r1
     6e4:	1f 92       	push	r1
     6e6:	1f 92       	push	r1
     6e8:	1f 92       	push	r1
     6ea:	1f 92       	push	r1
     6ec:	1f 92       	push	r1
     6ee:	87 eb       	ldi	r24, 0xB7	; 183
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	8c e9       	ldi	r24, 0x9C	; 156
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	9f 93       	push	r25
     6fc:	8f 93       	push	r24
     6fe:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
	LcdSetCursor(0,1,lcddata);
     702:	4c e9       	ldi	r20, 0x9C	; 156
     704:	51 e0       	ldi	r21, 0x01	; 1
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	LcdSetCursor(pos,1,"");
     70e:	47 e2       	ldi	r20, 0x27	; 39
     710:	51 e0       	ldi	r21, 0x01	; 1
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
     71a:	8d e0       	ldi	r24, 0x0D	; 13
     71c:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
	LcdSetCursor(posData[pos][0],1,"");
     720:	47 e2       	ldi	r20, 0x27	; 39
     722:	51 e0       	ldi	r21, 0x01	; 1
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61

void EnterPhone(){
	LcdCommand(LCD_CLEARDISPLAY);
	LcdSetCursor(0,0,"Enter PhoneNum.");
	_delay_ms(500);
	uint8_t pos=0;
     736:	10 e0       	ldi	r17, 0x00	; 0
	LcdSetCursor(pos,1,"");
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
	LcdSetCursor(posData[pos][0],1,"");

	while(1){
		uint8_t keyout=getkeyNum();
     738:	0e 94 12 01 	call	0x224	; 0x224 <getkeyNum>
		
		if (keyout<=posData[pos][1])
     73c:	21 2f       	mov	r18, r17
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	f9 01       	movw	r30, r18
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	4c 0f       	add	r20, r28
     74c:	5d 1f       	adc	r21, r29
     74e:	e4 0f       	add	r30, r20
     750:	f5 1f       	adc	r31, r21
     752:	91 85       	ldd	r25, Z+9	; 0x09
     754:	98 17       	cp	r25, r24
     756:	08 f4       	brcc	.+2      	; 0x75a <EnterPhone+0xe6>
     758:	4f c0       	rjmp	.+158    	; 0x7f8 <EnterPhone+0x184>
		{
			numbers[pos]=keyout;
     75a:	fa 01       	movw	r30, r20
     75c:	e2 0f       	add	r30, r18
     75e:	f3 1f       	adc	r31, r19
     760:	80 83       	st	Z, r24
			sprintf(lcddata,"07%u%u%u%u%u%u%u%u",numbers[0],numbers[1],numbers[2],numbers[3],numbers[4],numbers[5],numbers[6],numbers[7]);
     762:	78 85       	ldd	r23, Y+8	; 0x08
     764:	6f 81       	ldd	r22, Y+7	; 0x07
     766:	5e 81       	ldd	r21, Y+6	; 0x06
     768:	4d 81       	ldd	r20, Y+5	; 0x05
     76a:	3c 81       	ldd	r19, Y+4	; 0x04
     76c:	2b 81       	ldd	r18, Y+3	; 0x03
     76e:	9a 81       	ldd	r25, Y+2	; 0x02
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	1f 92       	push	r1
     774:	7f 93       	push	r23
     776:	1f 92       	push	r1
     778:	6f 93       	push	r22
     77a:	1f 92       	push	r1
     77c:	5f 93       	push	r21
     77e:	1f 92       	push	r1
     780:	4f 93       	push	r20
     782:	1f 92       	push	r1
     784:	3f 93       	push	r19
     786:	1f 92       	push	r1
     788:	2f 93       	push	r18
     78a:	1f 92       	push	r1
     78c:	9f 93       	push	r25
     78e:	1f 92       	push	r1
     790:	8f 93       	push	r24
     792:	87 eb       	ldi	r24, 0xB7	; 183
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	8c e9       	ldi	r24, 0x9C	; 156
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	9f 93       	push	r25
     7a0:	8f 93       	push	r24
     7a2:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
			LcdSetCursor(0,1,lcddata);
     7a6:	4c e9       	ldi	r20, 0x9C	; 156
     7a8:	51 e0       	ldi	r21, 0x01	; 1
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
			pos++;
     7b2:	1f 5f       	subi	r17, 0xFF	; 255
			if (pos>7)
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	18 30       	cpi	r17, 0x08	; 8
     7c0:	08 f0       	brcs	.+2      	; 0x7c4 <EnterPhone+0x150>
			{pos=0;
     7c2:	10 e0       	ldi	r17, 0x00	; 0
			}
			LcdSetCursor(posData[pos][0],1,"");
     7c4:	e1 2f       	mov	r30, r17
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	a1 e0       	ldi	r26, 0x01	; 1
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
     7d0:	ac 0f       	add	r26, r28
     7d2:	bd 1f       	adc	r27, r29
     7d4:	ea 0f       	add	r30, r26
     7d6:	fb 1f       	adc	r31, r27
     7d8:	47 e2       	ldi	r20, 0x27	; 39
     7da:	51 e0       	ldi	r21, 0x01	; 1
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	80 85       	ldd	r24, Z+8	; 0x08
     7e0:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     7e4:	bf ef       	ldi	r27, 0xFF	; 255
     7e6:	e1 ee       	ldi	r30, 0xE1	; 225
     7e8:	f4 e0       	ldi	r31, 0x04	; 4
     7ea:	b1 50       	subi	r27, 0x01	; 1
     7ec:	e0 40       	sbci	r30, 0x00	; 0
     7ee:	f0 40       	sbci	r31, 0x00	; 0
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <EnterPhone+0x176>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <EnterPhone+0x180>
     7f4:	00 00       	nop
     7f6:	a0 cf       	rjmp	.-192    	; 0x738 <EnterPhone+0xc4>
			_delay_ms(200);
		}
		
		else if (keyout==14)
     7f8:	8e 30       	cpi	r24, 0x0E	; 14
     7fa:	09 f0       	breq	.+2      	; 0x7fe <EnterPhone+0x18a>
     7fc:	9d cf       	rjmp	.-198    	; 0x738 <EnterPhone+0xc4>
		{
			LcdCommand(LCD_CLEARDISPLAY);
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
			LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKOFF);
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
			LcdSetCursor(0,0,"Phone Num. Added");
     80a:	4a ec       	ldi	r20, 0xCA	; 202
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
			PhoneH=(numbers[0]*1000)+(numbers[1]*100)+(numbers[2]*10)+numbers[3];
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	28 ee       	ldi	r18, 0xE8	; 232
     81a:	33 e0       	ldi	r19, 0x03	; 3
     81c:	82 9f       	mul	r24, r18
     81e:	b0 01       	movw	r22, r0
     820:	83 9f       	mul	r24, r19
     822:	70 0d       	add	r23, r0
     824:	11 24       	eor	r1, r1
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	44 e6       	ldi	r20, 0x64	; 100
     82a:	48 9f       	mul	r20, r24
     82c:	60 0d       	add	r22, r0
     82e:	71 1d       	adc	r23, r1
     830:	11 24       	eor	r1, r1
     832:	8b 81       	ldd	r24, Y+3	; 0x03
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	fc 01       	movw	r30, r24
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	8e 0f       	add	r24, r30
     84a:	9f 1f       	adc	r25, r31
     84c:	68 0f       	add	r22, r24
     84e:	79 1f       	adc	r23, r25
     850:	8c 81       	ldd	r24, Y+4	; 0x04
     852:	68 0f       	add	r22, r24
     854:	71 1d       	adc	r23, r1
     856:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <PhoneH+0x1>
     85a:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <PhoneH>
			PhoneL=(numbers[4]*1000)+(numbers[5]*100)+(numbers[6]*10)+numbers[7];
     85e:	5d 81       	ldd	r21, Y+5	; 0x05
     860:	52 9f       	mul	r21, r18
     862:	c0 01       	movw	r24, r0
     864:	53 9f       	mul	r21, r19
     866:	90 0d       	add	r25, r0
     868:	11 24       	eor	r1, r1
     86a:	2e 81       	ldd	r18, Y+6	; 0x06
     86c:	dc 01       	movw	r26, r24
     86e:	42 9f       	mul	r20, r18
     870:	a0 0d       	add	r26, r0
     872:	b1 1d       	adc	r27, r1
     874:	11 24       	eor	r1, r1
     876:	9f 81       	ldd	r25, Y+7	; 0x07
     878:	89 2f       	mov	r24, r25
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	fc 01       	movw	r30, r24
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	9c 01       	movw	r18, r24
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
     888:	22 0f       	add	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	22 0f       	add	r18, r18
     88e:	33 1f       	adc	r19, r19
     890:	cf 01       	movw	r24, r30
     892:	82 0f       	add	r24, r18
     894:	93 1f       	adc	r25, r19
     896:	8a 0f       	add	r24, r26
     898:	9b 1f       	adc	r25, r27
     89a:	28 85       	ldd	r18, Y+8	; 0x08
     89c:	82 0f       	add	r24, r18
     89e:	91 1d       	adc	r25, r1
     8a0:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <PhoneL+0x1>
     8a4:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <PhoneL>
			eeprom_write_word((uint16_t*)((user*9)+5),PhoneH);
     8a8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	9c 01       	movw	r18, r24
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	22 0f       	add	r18, r18
     8b6:	33 1f       	adc	r19, r19
     8b8:	22 0f       	add	r18, r18
     8ba:	33 1f       	adc	r19, r19
     8bc:	82 0f       	add	r24, r18
     8be:	93 1f       	adc	r25, r19
     8c0:	05 96       	adiw	r24, 0x05	; 5
     8c2:	0e 94 20 09 	call	0x1240	; 0x1240 <eeprom_write_word>
			eeprom_write_word((uint16_t*)((user*9)+7),PhoneL);
     8c6:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	9c 01       	movw	r18, r24
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	22 0f       	add	r18, r18
     8d4:	33 1f       	adc	r19, r19
     8d6:	22 0f       	add	r18, r18
     8d8:	33 1f       	adc	r19, r19
     8da:	82 0f       	add	r24, r18
     8dc:	93 1f       	adc	r25, r19
     8de:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <PhoneL>
     8e2:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <PhoneL+0x1>
     8e6:	07 96       	adiw	r24, 0x07	; 7
     8e8:	0e 94 20 09 	call	0x1240	; 0x1240 <eeprom_write_word>
     8ec:	bf ef       	ldi	r27, 0xFF	; 255
     8ee:	e4 e3       	ldi	r30, 0x34	; 52
     8f0:	fc e0       	ldi	r31, 0x0C	; 12
     8f2:	b1 50       	subi	r27, 0x01	; 1
     8f4:	e0 40       	sbci	r30, 0x00	; 0
     8f6:	f0 40       	sbci	r31, 0x00	; 0
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <__stack+0x93>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <__stack+0x9d>
     8fc:	00 00       	nop
			_delay_ms(500);
			break;
		}
	}
     8fe:	68 96       	adiw	r28, 0x18	; 24
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	08 95       	ret

00000912 <main>:
uint8_t user=0;



int main(void)
{
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
	LcdInit();
     91e:	0e 94 7e 00 	call	0xfc	; 0xfc <LcdInit>
	USART_Init(2400);
     922:	80 e6       	ldi	r24, 0x60	; 96
     924:	99 e0       	ldi	r25, 0x09	; 9
     926:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_Init>
	DDRD|=(0b1111<<3);
     92a:	81 b3       	in	r24, 0x11	; 17
     92c:	88 67       	ori	r24, 0x78	; 120
     92e:	81 bb       	out	0x11, r24	; 17
	//eeprom_write_byte((uint8_t*)0,0);
	PORTC|=(1<<2);
     930:	85 b3       	in	r24, 0x15	; 21
     932:	84 60       	ori	r24, 0x04	; 4
     934:	85 bb       	out	0x15, r24	; 21
	user=eeprom_read_byte((uint8_t*)0);
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 05 09 	call	0x120a	; 0x120a <eeprom_read_byte>
     93e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
	EnterID();
     942:	0e 94 56 01 	call	0x2ac	; 0x2ac <EnterID>
	EnterAge();
     946:	0e 94 50 02 	call	0x4a0	; 0x4a0 <EnterAge>
	EnterPhone();
     94a:	0e 94 3a 03 	call	0x674	; 0x674 <EnterPhone>
	
	
	PatID=eeprom_read_word((uint16_t*)((user*9)+1));
     94e:	c0 91 90 01 	lds	r28, 0x0190	; 0x800190 <__data_end>
     952:	8c 2f       	mov	r24, r28
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	ec 01       	movw	r28, r24
     958:	cc 0f       	add	r28, r28
     95a:	dd 1f       	adc	r29, r29
     95c:	cc 0f       	add	r28, r28
     95e:	dd 1f       	adc	r29, r29
     960:	cc 0f       	add	r28, r28
     962:	dd 1f       	adc	r29, r29
     964:	c8 0f       	add	r28, r24
     966:	d9 1f       	adc	r29, r25
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	0e 94 0d 09 	call	0x121a	; 0x121a <eeprom_read_word>
     970:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <PatID+0x1>
     974:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <PatID>
	PatAge=eeprom_read_word((uint16_t*)((user*9)+3));
     978:	ce 01       	movw	r24, r28
     97a:	03 96       	adiw	r24, 0x03	; 3
     97c:	0e 94 0d 09 	call	0x121a	; 0x121a <eeprom_read_word>
     980:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <PatAge+0x1>
     984:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <PatAge>
	PhoneH=eeprom_read_word((uint16_t*)((user*9)+5));
     988:	ce 01       	movw	r24, r28
     98a:	05 96       	adiw	r24, 0x05	; 5
     98c:	0e 94 0d 09 	call	0x121a	; 0x121a <eeprom_read_word>
     990:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <PhoneH+0x1>
     994:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <PhoneH>
	PhoneL=eeprom_read_word((uint16_t*)((user*9)+7));
     998:	ce 01       	movw	r24, r28
     99a:	07 96       	adiw	r24, 0x07	; 7
     99c:	0e 94 0d 09 	call	0x121a	; 0x121a <eeprom_read_word>
     9a0:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <PhoneL+0x1>
     9a4:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <PhoneL>
	//LcdSetCursor(0,0,lcddata);
	
//	sprintf(lcddata,"07%u%u",PhoneH,PhoneL);
	//LcdSetCursor(0,1,lcddata);
	
	LcdCommand(LCD_CLEARDISPLAY);
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
	LcdSetCursor(0,0,"Place Finger");
     9ae:	4b ed       	ldi	r20, 0xDB	; 219
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	
	
	while (1)
	{
		if (!(PINC&(1<<2)))
     9ba:	9a 99       	sbic	0x13, 2	; 19
     9bc:	fe cf       	rjmp	.-4      	; 0x9ba <main+0xa8>
		{	LcdCommand(LCD_CLEARDISPLAY);
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
			break;
		}
	}
	
	sprintf(lcddata,"Tempura %02u",Tempurature);
     9c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Tempurature>
     9c8:	1f 92       	push	r1
     9ca:	8f 93       	push	r24
     9cc:	0f 2e       	mov	r0, r31
     9ce:	f8 ee       	ldi	r31, 0xE8	; 232
     9d0:	ef 2e       	mov	r14, r31
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	ff 2e       	mov	r15, r31
     9d6:	f0 2d       	mov	r31, r0
     9d8:	ff 92       	push	r15
     9da:	ef 92       	push	r14
     9dc:	cc e9       	ldi	r28, 0x9C	; 156
     9de:	d1 e0       	ldi	r29, 0x01	; 1
     9e0:	df 93       	push	r29
     9e2:	cf 93       	push	r28
     9e4:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
	LcdSetCursor(0,0,lcddata);
     9e8:	ae 01       	movw	r20, r28
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	sprintf(lcddata,"Pressure %02u",Pressure);
     9f2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Pressure>
     9f6:	1f 92       	push	r1
     9f8:	8f 93       	push	r24
     9fa:	05 ef       	ldi	r16, 0xF5	; 245
     9fc:	10 e0       	ldi	r17, 0x00	; 0
     9fe:	1f 93       	push	r17
     a00:	0f 93       	push	r16
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
	LcdSetCursor(0,1,lcddata);
     a0a:	ae 01       	movw	r20, r28
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	99 e6       	ldi	r25, 0x69	; 105
     a18:	28 e1       	ldi	r18, 0x18	; 24
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	90 40       	sbci	r25, 0x00	; 0
     a1e:	20 40       	sbci	r18, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <main+0x108>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <main+0x112>
     a24:	00 00       	nop
	_delay_ms(1000);
	LcdCommand(LCD_CLEARDISPLAY);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
	
	USART_TxStringln("AT");
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_TxStringln>
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	94 e3       	ldi	r25, 0x34	; 52
     a38:	2c e0       	ldi	r18, 0x0C	; 12
     a3a:	81 50       	subi	r24, 0x01	; 1
     a3c:	90 40       	sbci	r25, 0x00	; 0
     a3e:	20 40       	sbci	r18, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <main+0x128>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <main+0x132>
     a44:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT");
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_TxStringln>
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	94 e3       	ldi	r25, 0x34	; 52
     a52:	2c e0       	ldi	r18, 0x0C	; 12
     a54:	81 50       	subi	r24, 0x01	; 1
     a56:	90 40       	sbci	r25, 0x00	; 0
     a58:	20 40       	sbci	r18, 0x00	; 0
     a5a:	e1 f7       	brne	.-8      	; 0xa54 <main+0x142>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <main+0x14c>
     a5e:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT+CMGF=1");
     a60:	86 e0       	ldi	r24, 0x06	; 6
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_TxStringln>
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	94 e3       	ldi	r25, 0x34	; 52
     a6c:	2c e0       	ldi	r18, 0x0C	; 12
     a6e:	81 50       	subi	r24, 0x01	; 1
     a70:	90 40       	sbci	r25, 0x00	; 0
     a72:	20 40       	sbci	r18, 0x00	; 0
     a74:	e1 f7       	brne	.-8      	; 0xa6e <main+0x15c>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <main+0x166>
     a78:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT+CMGS=\"+947112345612\"");
     a7a:	80 e1       	ldi	r24, 0x10	; 16
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_TxStringln>
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	91 ee       	ldi	r25, 0xE1	; 225
     a86:	24 e0       	ldi	r18, 0x04	; 4
     a88:	81 50       	subi	r24, 0x01	; 1
     a8a:	90 40       	sbci	r25, 0x00	; 0
     a8c:	20 40       	sbci	r18, 0x00	; 0
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <main+0x176>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <main+0x180>
     a92:	00 00       	nop
	_delay_ms(200);
	user++;
     a94:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <__data_end>
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <__data_end>
	eeprom_write_byte((uint8_t*)0,user);
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_write_byte>
	
	
	sprintf(lcddata,"Tempura %02u",Tempurature);
     aa6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Tempurature>
     aaa:	1f 92       	push	r1
     aac:	8f 93       	push	r24
     aae:	ff 92       	push	r15
     ab0:	ef 92       	push	r14
     ab2:	df 93       	push	r29
     ab4:	cf 93       	push	r28
     ab6:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
	USART_TxStringln(lcddata);
     aba:	ce 01       	movw	r24, r28
     abc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_TxStringln>
	sprintf(lcddata,"Pressure %02u",Pressure);
     ac0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Pressure>
     ac4:	1f 92       	push	r1
     ac6:	8f 93       	push	r24
     ac8:	1f 93       	push	r17
     aca:	0f 93       	push	r16
     acc:	df 93       	push	r29
     ace:	cf 93       	push	r28
     ad0:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
	USART_TxStringln(lcddata);
     ad4:	ce 01       	movw	r24, r28
     ad6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_TxStringln>
	
	sprintf(lcddata,"ID -%u Age %u",PatID,PatAge);
     ada:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <PatAge+0x1>
     ade:	8f 93       	push	r24
     ae0:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <PatAge>
     ae4:	8f 93       	push	r24
     ae6:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <PatID+0x1>
     aea:	8f 93       	push	r24
     aec:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <PatID>
     af0:	8f 93       	push	r24
     af2:	88 e2       	ldi	r24, 0x28	; 40
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	9f 93       	push	r25
     af8:	8f 93       	push	r24
     afa:	df 93       	push	r29
     afc:	cf 93       	push	r28
     afe:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
	USART_TxStringln(lcddata);
     b02:	8d b7       	in	r24, 0x3d	; 61
     b04:	9e b7       	in	r25, 0x3e	; 62
     b06:	80 96       	adiw	r24, 0x20	; 32
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	9e bf       	out	0x3e, r25	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	8d bf       	out	0x3d, r24	; 61
     b12:	ce 01       	movw	r24, r28
     b14:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_TxStringln>
	
	sprintf(lcddata,"Number- 07%u%u",PhoneH,PhoneL);
     b18:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <PhoneL+0x1>
     b1c:	8f 93       	push	r24
     b1e:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <PhoneL>
     b22:	8f 93       	push	r24
     b24:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <PhoneH+0x1>
     b28:	8f 93       	push	r24
     b2a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <PhoneH>
     b2e:	8f 93       	push	r24
     b30:	86 e3       	ldi	r24, 0x36	; 54
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	9f 93       	push	r25
     b36:	8f 93       	push	r24
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	0e 94 52 06 	call	0xca4	; 0xca4 <sprintf>
	USART_TxStringln(lcddata);
     b40:	ce 01       	movw	r24, r28
     b42:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART_TxStringln>
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	91 ee       	ldi	r25, 0xE1	; 225
     b4a:	24 e0       	ldi	r18, 0x04	; 4
     b4c:	81 50       	subi	r24, 0x01	; 1
     b4e:	90 40       	sbci	r25, 0x00	; 0
     b50:	20 40       	sbci	r18, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <main+0x23a>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <main+0x244>
     b56:	00 00       	nop
	
	_delay_ms(200);
	USART_Transmit(26);
     b58:	8a e1       	ldi	r24, 0x1A	; 26
     b5a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Transmit>
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	91 ee       	ldi	r25, 0xE1	; 225
     b62:	24 e0       	ldi	r18, 0x04	; 4
     b64:	81 50       	subi	r24, 0x01	; 1
     b66:	90 40       	sbci	r25, 0x00	; 0
     b68:	20 40       	sbci	r18, 0x00	; 0
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <main+0x252>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <main+0x25c>
     b6e:	00 00       	nop
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	99 e6       	ldi	r25, 0x69	; 105
     b74:	28 e1       	ldi	r18, 0x18	; 24
     b76:	81 50       	subi	r24, 0x01	; 1
     b78:	90 40       	sbci	r25, 0x00	; 0
     b7a:	20 40       	sbci	r18, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <main+0x264>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <main+0x26e>
     b80:	00 00       	nop
	_delay_ms(200);
	_delay_ms(1000);
	
	
	LcdSetCursor(0,0,"Waiting . .");
     b82:	45 e4       	ldi	r20, 0x45	; 69
     b84:	51 e0       	ldi	r21, 0x01	; 1
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     b8e:	8d b7       	in	r24, 0x3d	; 61
     b90:	9e b7       	in	r25, 0x3e	; 62
     b92:	08 96       	adiw	r24, 0x08	; 8
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	9e bf       	out	0x3e, r25	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	8d bf       	out	0x3d, r24	; 61
	 while (1)
	 {
		 if ((rchar>64)&&(rchar<68))
     b9e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <rchar>
     ba2:	81 54       	subi	r24, 0x41	; 65
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	d8 f7       	brcc	.-10     	; 0xb9e <main+0x28c>
		 {	
			break;			
			
		 }
	 }
	 PORTD|=(1<<5);
     ba8:	82 b3       	in	r24, 0x12	; 18
     baa:	80 62       	ori	r24, 0x20	; 32
     bac:	82 bb       	out	0x12, r24	; 18
	LcdCommand(LCD_CLEARDISPLAY);
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
	LcdSetCursor(0,0,"Message Received");
     bb4:	41 e5       	ldi	r20, 0x51	; 81
     bb6:	51 e0       	ldi	r21, 0x01	; 1
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	switch(rchar){
     bc0:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <rchar>
     bc4:	82 34       	cpi	r24, 0x42	; 66
     bc6:	59 f0       	breq	.+22     	; 0xbde <main+0x2cc>
     bc8:	83 34       	cpi	r24, 0x43	; 67
     bca:	81 f0       	breq	.+32     	; 0xbec <main+0x2da>
     bcc:	81 34       	cpi	r24, 0x41	; 65
     bce:	a1 f4       	brne	.+40     	; 0xbf8 <main+0x2e6>
		case 65:LcdSetCursor(0,1,"Message A"); break;
     bd0:	42 e6       	ldi	r20, 0x62	; 98
     bd2:	51 e0       	ldi	r21, 0x01	; 1
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     bdc:	0d c0       	rjmp	.+26     	; 0xbf8 <main+0x2e6>
		case 66:LcdSetCursor(0,1,"Message B"); break;
     bde:	4c e6       	ldi	r20, 0x6C	; 108
     be0:	51 e0       	ldi	r21, 0x01	; 1
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     bea:	06 c0       	rjmp	.+12     	; 0xbf8 <main+0x2e6>
		case 67:LcdSetCursor(0,1,"Message C"); break;
     bec:	46 e7       	ldi	r20, 0x76	; 118
     bee:	51 e0       	ldi	r21, 0x01	; 1
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
     bf8:	9f ef       	ldi	r25, 0xFF	; 255
     bfa:	21 e1       	ldi	r18, 0x11	; 17
     bfc:	8a e7       	ldi	r24, 0x7A	; 122
     bfe:	91 50       	subi	r25, 0x01	; 1
     c00:	20 40       	sbci	r18, 0x00	; 0
     c02:	80 40       	sbci	r24, 0x00	; 0
     c04:	e1 f7       	brne	.-8      	; 0xbfe <main+0x2ec>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <main+0x2f6>
     c08:	00 00       	nop
	}
	_delay_ms(5000);
	PORTD&=~(1<<5);
     c0a:	82 b3       	in	r24, 0x12	; 18
     c0c:	8f 7d       	andi	r24, 0xDF	; 223
     c0e:	82 bb       	out	0x12, r24	; 18
	
}
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	08 95       	ret

00000c22 <__divmodsi4>:
     c22:	05 2e       	mov	r0, r21
     c24:	97 fb       	bst	r25, 7
     c26:	1e f4       	brtc	.+6      	; 0xc2e <__divmodsi4+0xc>
     c28:	00 94       	com	r0
     c2a:	0e 94 28 06 	call	0xc50	; 0xc50 <__negsi2>
     c2e:	57 fd       	sbrc	r21, 7
     c30:	07 d0       	rcall	.+14     	; 0xc40 <__divmodsi4_neg2>
     c32:	0e 94 30 06 	call	0xc60	; 0xc60 <__udivmodsi4>
     c36:	07 fc       	sbrc	r0, 7
     c38:	03 d0       	rcall	.+6      	; 0xc40 <__divmodsi4_neg2>
     c3a:	4e f4       	brtc	.+18     	; 0xc4e <__divmodsi4_exit>
     c3c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__negsi2>

00000c40 <__divmodsi4_neg2>:
     c40:	50 95       	com	r21
     c42:	40 95       	com	r20
     c44:	30 95       	com	r19
     c46:	21 95       	neg	r18
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	4f 4f       	sbci	r20, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255

00000c4e <__divmodsi4_exit>:
     c4e:	08 95       	ret

00000c50 <__negsi2>:
     c50:	90 95       	com	r25
     c52:	80 95       	com	r24
     c54:	70 95       	com	r23
     c56:	61 95       	neg	r22
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	8f 4f       	sbci	r24, 0xFF	; 255
     c5c:	9f 4f       	sbci	r25, 0xFF	; 255
     c5e:	08 95       	ret

00000c60 <__udivmodsi4>:
     c60:	a1 e2       	ldi	r26, 0x21	; 33
     c62:	1a 2e       	mov	r1, r26
     c64:	aa 1b       	sub	r26, r26
     c66:	bb 1b       	sub	r27, r27
     c68:	fd 01       	movw	r30, r26
     c6a:	0d c0       	rjmp	.+26     	; 0xc86 <__udivmodsi4_ep>

00000c6c <__udivmodsi4_loop>:
     c6c:	aa 1f       	adc	r26, r26
     c6e:	bb 1f       	adc	r27, r27
     c70:	ee 1f       	adc	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	a2 17       	cp	r26, r18
     c76:	b3 07       	cpc	r27, r19
     c78:	e4 07       	cpc	r30, r20
     c7a:	f5 07       	cpc	r31, r21
     c7c:	20 f0       	brcs	.+8      	; 0xc86 <__udivmodsi4_ep>
     c7e:	a2 1b       	sub	r26, r18
     c80:	b3 0b       	sbc	r27, r19
     c82:	e4 0b       	sbc	r30, r20
     c84:	f5 0b       	sbc	r31, r21

00000c86 <__udivmodsi4_ep>:
     c86:	66 1f       	adc	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	88 1f       	adc	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	1a 94       	dec	r1
     c90:	69 f7       	brne	.-38     	; 0xc6c <__udivmodsi4_loop>
     c92:	60 95       	com	r22
     c94:	70 95       	com	r23
     c96:	80 95       	com	r24
     c98:	90 95       	com	r25
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	bd 01       	movw	r22, r26
     ca0:	cf 01       	movw	r24, r30
     ca2:	08 95       	ret

00000ca4 <sprintf>:
     ca4:	ae e0       	ldi	r26, 0x0E	; 14
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e8 e5       	ldi	r30, 0x58	; 88
     caa:	f6 e0       	ldi	r31, 0x06	; 6
     cac:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__prologue_saves__+0x1c>
     cb0:	0d 89       	ldd	r16, Y+21	; 0x15
     cb2:	1e 89       	ldd	r17, Y+22	; 0x16
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	8c 83       	std	Y+4, r24	; 0x04
     cb8:	1a 83       	std	Y+2, r17	; 0x02
     cba:	09 83       	std	Y+1, r16	; 0x01
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	9f e7       	ldi	r25, 0x7F	; 127
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	ae 01       	movw	r20, r28
     cc6:	47 5e       	subi	r20, 0xE7	; 231
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	6f 89       	ldd	r22, Y+23	; 0x17
     ccc:	78 8d       	ldd	r23, Y+24	; 0x18
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	0e 94 74 06 	call	0xce8	; 0xce8 <vfprintf>
     cd6:	ef 81       	ldd	r30, Y+7	; 0x07
     cd8:	f8 85       	ldd	r31, Y+8	; 0x08
     cda:	e0 0f       	add	r30, r16
     cdc:	f1 1f       	adc	r31, r17
     cde:	10 82       	st	Z, r1
     ce0:	2e 96       	adiw	r28, 0x0e	; 14
     ce2:	e4 e0       	ldi	r30, 0x04	; 4
     ce4:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__epilogue_restores__+0x1c>

00000ce8 <vfprintf>:
     ce8:	ab e0       	ldi	r26, 0x0B	; 11
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	ea e7       	ldi	r30, 0x7A	; 122
     cee:	f6 e0       	ldi	r31, 0x06	; 6
     cf0:	0c 94 35 09 	jmp	0x126a	; 0x126a <__prologue_saves__>
     cf4:	6c 01       	movw	r12, r24
     cf6:	7b 01       	movw	r14, r22
     cf8:	8a 01       	movw	r16, r20
     cfa:	fc 01       	movw	r30, r24
     cfc:	17 82       	std	Z+7, r1	; 0x07
     cfe:	16 82       	std	Z+6, r1	; 0x06
     d00:	83 81       	ldd	r24, Z+3	; 0x03
     d02:	81 ff       	sbrs	r24, 1
     d04:	cc c1       	rjmp	.+920    	; 0x109e <vfprintf+0x3b6>
     d06:	ce 01       	movw	r24, r28
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	3c 01       	movw	r6, r24
     d0c:	f6 01       	movw	r30, r12
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	f7 01       	movw	r30, r14
     d12:	93 fd       	sbrc	r25, 3
     d14:	85 91       	lpm	r24, Z+
     d16:	93 ff       	sbrs	r25, 3
     d18:	81 91       	ld	r24, Z+
     d1a:	7f 01       	movw	r14, r30
     d1c:	88 23       	and	r24, r24
     d1e:	09 f4       	brne	.+2      	; 0xd22 <vfprintf+0x3a>
     d20:	ba c1       	rjmp	.+884    	; 0x1096 <vfprintf+0x3ae>
     d22:	85 32       	cpi	r24, 0x25	; 37
     d24:	39 f4       	brne	.+14     	; 0xd34 <vfprintf+0x4c>
     d26:	93 fd       	sbrc	r25, 3
     d28:	85 91       	lpm	r24, Z+
     d2a:	93 ff       	sbrs	r25, 3
     d2c:	81 91       	ld	r24, Z+
     d2e:	7f 01       	movw	r14, r30
     d30:	85 32       	cpi	r24, 0x25	; 37
     d32:	29 f4       	brne	.+10     	; 0xd3e <vfprintf+0x56>
     d34:	b6 01       	movw	r22, r12
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fputc>
     d3c:	e7 cf       	rjmp	.-50     	; 0xd0c <vfprintf+0x24>
     d3e:	91 2c       	mov	r9, r1
     d40:	21 2c       	mov	r2, r1
     d42:	31 2c       	mov	r3, r1
     d44:	ff e1       	ldi	r31, 0x1F	; 31
     d46:	f3 15       	cp	r31, r3
     d48:	d8 f0       	brcs	.+54     	; 0xd80 <vfprintf+0x98>
     d4a:	8b 32       	cpi	r24, 0x2B	; 43
     d4c:	79 f0       	breq	.+30     	; 0xd6c <vfprintf+0x84>
     d4e:	38 f4       	brcc	.+14     	; 0xd5e <vfprintf+0x76>
     d50:	80 32       	cpi	r24, 0x20	; 32
     d52:	79 f0       	breq	.+30     	; 0xd72 <vfprintf+0x8a>
     d54:	83 32       	cpi	r24, 0x23	; 35
     d56:	a1 f4       	brne	.+40     	; 0xd80 <vfprintf+0x98>
     d58:	23 2d       	mov	r18, r3
     d5a:	20 61       	ori	r18, 0x10	; 16
     d5c:	1d c0       	rjmp	.+58     	; 0xd98 <vfprintf+0xb0>
     d5e:	8d 32       	cpi	r24, 0x2D	; 45
     d60:	61 f0       	breq	.+24     	; 0xd7a <vfprintf+0x92>
     d62:	80 33       	cpi	r24, 0x30	; 48
     d64:	69 f4       	brne	.+26     	; 0xd80 <vfprintf+0x98>
     d66:	23 2d       	mov	r18, r3
     d68:	21 60       	ori	r18, 0x01	; 1
     d6a:	16 c0       	rjmp	.+44     	; 0xd98 <vfprintf+0xb0>
     d6c:	83 2d       	mov	r24, r3
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	38 2e       	mov	r3, r24
     d72:	e3 2d       	mov	r30, r3
     d74:	e4 60       	ori	r30, 0x04	; 4
     d76:	3e 2e       	mov	r3, r30
     d78:	2a c0       	rjmp	.+84     	; 0xdce <vfprintf+0xe6>
     d7a:	f3 2d       	mov	r31, r3
     d7c:	f8 60       	ori	r31, 0x08	; 8
     d7e:	1d c0       	rjmp	.+58     	; 0xdba <vfprintf+0xd2>
     d80:	37 fc       	sbrc	r3, 7
     d82:	2d c0       	rjmp	.+90     	; 0xdde <vfprintf+0xf6>
     d84:	20 ed       	ldi	r18, 0xD0	; 208
     d86:	28 0f       	add	r18, r24
     d88:	2a 30       	cpi	r18, 0x0A	; 10
     d8a:	40 f0       	brcs	.+16     	; 0xd9c <vfprintf+0xb4>
     d8c:	8e 32       	cpi	r24, 0x2E	; 46
     d8e:	b9 f4       	brne	.+46     	; 0xdbe <vfprintf+0xd6>
     d90:	36 fc       	sbrc	r3, 6
     d92:	81 c1       	rjmp	.+770    	; 0x1096 <vfprintf+0x3ae>
     d94:	23 2d       	mov	r18, r3
     d96:	20 64       	ori	r18, 0x40	; 64
     d98:	32 2e       	mov	r3, r18
     d9a:	19 c0       	rjmp	.+50     	; 0xdce <vfprintf+0xe6>
     d9c:	36 fe       	sbrs	r3, 6
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <vfprintf+0xc4>
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	98 9e       	mul	r9, r24
     da4:	20 0d       	add	r18, r0
     da6:	11 24       	eor	r1, r1
     da8:	92 2e       	mov	r9, r18
     daa:	11 c0       	rjmp	.+34     	; 0xdce <vfprintf+0xe6>
     dac:	ea e0       	ldi	r30, 0x0A	; 10
     dae:	2e 9e       	mul	r2, r30
     db0:	20 0d       	add	r18, r0
     db2:	11 24       	eor	r1, r1
     db4:	22 2e       	mov	r2, r18
     db6:	f3 2d       	mov	r31, r3
     db8:	f0 62       	ori	r31, 0x20	; 32
     dba:	3f 2e       	mov	r3, r31
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <vfprintf+0xe6>
     dbe:	8c 36       	cpi	r24, 0x6C	; 108
     dc0:	21 f4       	brne	.+8      	; 0xdca <vfprintf+0xe2>
     dc2:	83 2d       	mov	r24, r3
     dc4:	80 68       	ori	r24, 0x80	; 128
     dc6:	38 2e       	mov	r3, r24
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <vfprintf+0xe6>
     dca:	88 36       	cpi	r24, 0x68	; 104
     dcc:	41 f4       	brne	.+16     	; 0xdde <vfprintf+0xf6>
     dce:	f7 01       	movw	r30, r14
     dd0:	93 fd       	sbrc	r25, 3
     dd2:	85 91       	lpm	r24, Z+
     dd4:	93 ff       	sbrs	r25, 3
     dd6:	81 91       	ld	r24, Z+
     dd8:	7f 01       	movw	r14, r30
     dda:	81 11       	cpse	r24, r1
     ddc:	b3 cf       	rjmp	.-154    	; 0xd44 <vfprintf+0x5c>
     dde:	98 2f       	mov	r25, r24
     de0:	9f 7d       	andi	r25, 0xDF	; 223
     de2:	95 54       	subi	r25, 0x45	; 69
     de4:	93 30       	cpi	r25, 0x03	; 3
     de6:	28 f4       	brcc	.+10     	; 0xdf2 <vfprintf+0x10a>
     de8:	0c 5f       	subi	r16, 0xFC	; 252
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	9f e3       	ldi	r25, 0x3F	; 63
     dee:	99 83       	std	Y+1, r25	; 0x01
     df0:	0d c0       	rjmp	.+26     	; 0xe0c <vfprintf+0x124>
     df2:	83 36       	cpi	r24, 0x63	; 99
     df4:	31 f0       	breq	.+12     	; 0xe02 <vfprintf+0x11a>
     df6:	83 37       	cpi	r24, 0x73	; 115
     df8:	71 f0       	breq	.+28     	; 0xe16 <vfprintf+0x12e>
     dfa:	83 35       	cpi	r24, 0x53	; 83
     dfc:	09 f0       	breq	.+2      	; 0xe00 <vfprintf+0x118>
     dfe:	59 c0       	rjmp	.+178    	; 0xeb2 <vfprintf+0x1ca>
     e00:	21 c0       	rjmp	.+66     	; 0xe44 <vfprintf+0x15c>
     e02:	f8 01       	movw	r30, r16
     e04:	80 81       	ld	r24, Z
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	0e 5f       	subi	r16, 0xFE	; 254
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	88 24       	eor	r8, r8
     e0e:	83 94       	inc	r8
     e10:	91 2c       	mov	r9, r1
     e12:	53 01       	movw	r10, r6
     e14:	13 c0       	rjmp	.+38     	; 0xe3c <vfprintf+0x154>
     e16:	28 01       	movw	r4, r16
     e18:	f2 e0       	ldi	r31, 0x02	; 2
     e1a:	4f 0e       	add	r4, r31
     e1c:	51 1c       	adc	r5, r1
     e1e:	f8 01       	movw	r30, r16
     e20:	a0 80       	ld	r10, Z
     e22:	b1 80       	ldd	r11, Z+1	; 0x01
     e24:	36 fe       	sbrs	r3, 6
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <vfprintf+0x146>
     e28:	69 2d       	mov	r22, r9
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <vfprintf+0x14a>
     e2e:	6f ef       	ldi	r22, 0xFF	; 255
     e30:	7f ef       	ldi	r23, 0xFF	; 255
     e32:	c5 01       	movw	r24, r10
     e34:	0e 94 60 08 	call	0x10c0	; 0x10c0 <strnlen>
     e38:	4c 01       	movw	r8, r24
     e3a:	82 01       	movw	r16, r4
     e3c:	f3 2d       	mov	r31, r3
     e3e:	ff 77       	andi	r31, 0x7F	; 127
     e40:	3f 2e       	mov	r3, r31
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <vfprintf+0x188>
     e44:	28 01       	movw	r4, r16
     e46:	22 e0       	ldi	r18, 0x02	; 2
     e48:	42 0e       	add	r4, r18
     e4a:	51 1c       	adc	r5, r1
     e4c:	f8 01       	movw	r30, r16
     e4e:	a0 80       	ld	r10, Z
     e50:	b1 80       	ldd	r11, Z+1	; 0x01
     e52:	36 fe       	sbrs	r3, 6
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <vfprintf+0x174>
     e56:	69 2d       	mov	r22, r9
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <vfprintf+0x178>
     e5c:	6f ef       	ldi	r22, 0xFF	; 255
     e5e:	7f ef       	ldi	r23, 0xFF	; 255
     e60:	c5 01       	movw	r24, r10
     e62:	0e 94 55 08 	call	0x10aa	; 0x10aa <strnlen_P>
     e66:	4c 01       	movw	r8, r24
     e68:	f3 2d       	mov	r31, r3
     e6a:	f0 68       	ori	r31, 0x80	; 128
     e6c:	3f 2e       	mov	r3, r31
     e6e:	82 01       	movw	r16, r4
     e70:	33 fc       	sbrc	r3, 3
     e72:	1b c0       	rjmp	.+54     	; 0xeaa <vfprintf+0x1c2>
     e74:	82 2d       	mov	r24, r2
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	88 16       	cp	r8, r24
     e7a:	99 06       	cpc	r9, r25
     e7c:	b0 f4       	brcc	.+44     	; 0xeaa <vfprintf+0x1c2>
     e7e:	b6 01       	movw	r22, r12
     e80:	80 e2       	ldi	r24, 0x20	; 32
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fputc>
     e88:	2a 94       	dec	r2
     e8a:	f4 cf       	rjmp	.-24     	; 0xe74 <vfprintf+0x18c>
     e8c:	f5 01       	movw	r30, r10
     e8e:	37 fc       	sbrc	r3, 7
     e90:	85 91       	lpm	r24, Z+
     e92:	37 fe       	sbrs	r3, 7
     e94:	81 91       	ld	r24, Z+
     e96:	5f 01       	movw	r10, r30
     e98:	b6 01       	movw	r22, r12
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fputc>
     ea0:	21 10       	cpse	r2, r1
     ea2:	2a 94       	dec	r2
     ea4:	21 e0       	ldi	r18, 0x01	; 1
     ea6:	82 1a       	sub	r8, r18
     ea8:	91 08       	sbc	r9, r1
     eaa:	81 14       	cp	r8, r1
     eac:	91 04       	cpc	r9, r1
     eae:	71 f7       	brne	.-36     	; 0xe8c <vfprintf+0x1a4>
     eb0:	e8 c0       	rjmp	.+464    	; 0x1082 <vfprintf+0x39a>
     eb2:	84 36       	cpi	r24, 0x64	; 100
     eb4:	11 f0       	breq	.+4      	; 0xeba <vfprintf+0x1d2>
     eb6:	89 36       	cpi	r24, 0x69	; 105
     eb8:	41 f5       	brne	.+80     	; 0xf0a <vfprintf+0x222>
     eba:	f8 01       	movw	r30, r16
     ebc:	37 fe       	sbrs	r3, 7
     ebe:	07 c0       	rjmp	.+14     	; 0xece <vfprintf+0x1e6>
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	0c 5f       	subi	r16, 0xFC	; 252
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	08 c0       	rjmp	.+16     	; 0xede <vfprintf+0x1f6>
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	07 2e       	mov	r0, r23
     ed4:	00 0c       	add	r0, r0
     ed6:	88 0b       	sbc	r24, r24
     ed8:	99 0b       	sbc	r25, r25
     eda:	0e 5f       	subi	r16, 0xFE	; 254
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	f3 2d       	mov	r31, r3
     ee0:	ff 76       	andi	r31, 0x6F	; 111
     ee2:	3f 2e       	mov	r3, r31
     ee4:	97 ff       	sbrs	r25, 7
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <vfprintf+0x212>
     ee8:	90 95       	com	r25
     eea:	80 95       	com	r24
     eec:	70 95       	com	r23
     eee:	61 95       	neg	r22
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	8f 4f       	sbci	r24, 0xFF	; 255
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	f0 68       	ori	r31, 0x80	; 128
     ef8:	3f 2e       	mov	r3, r31
     efa:	2a e0       	ldi	r18, 0x0A	; 10
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	a3 01       	movw	r20, r6
     f00:	0e 94 a7 08 	call	0x114e	; 0x114e <__ultoa_invert>
     f04:	88 2e       	mov	r8, r24
     f06:	86 18       	sub	r8, r6
     f08:	45 c0       	rjmp	.+138    	; 0xf94 <vfprintf+0x2ac>
     f0a:	85 37       	cpi	r24, 0x75	; 117
     f0c:	31 f4       	brne	.+12     	; 0xf1a <vfprintf+0x232>
     f0e:	23 2d       	mov	r18, r3
     f10:	2f 7e       	andi	r18, 0xEF	; 239
     f12:	b2 2e       	mov	r11, r18
     f14:	2a e0       	ldi	r18, 0x0A	; 10
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	25 c0       	rjmp	.+74     	; 0xf64 <vfprintf+0x27c>
     f1a:	93 2d       	mov	r25, r3
     f1c:	99 7f       	andi	r25, 0xF9	; 249
     f1e:	b9 2e       	mov	r11, r25
     f20:	8f 36       	cpi	r24, 0x6F	; 111
     f22:	c1 f0       	breq	.+48     	; 0xf54 <vfprintf+0x26c>
     f24:	18 f4       	brcc	.+6      	; 0xf2c <vfprintf+0x244>
     f26:	88 35       	cpi	r24, 0x58	; 88
     f28:	79 f0       	breq	.+30     	; 0xf48 <vfprintf+0x260>
     f2a:	b5 c0       	rjmp	.+362    	; 0x1096 <vfprintf+0x3ae>
     f2c:	80 37       	cpi	r24, 0x70	; 112
     f2e:	19 f0       	breq	.+6      	; 0xf36 <vfprintf+0x24e>
     f30:	88 37       	cpi	r24, 0x78	; 120
     f32:	21 f0       	breq	.+8      	; 0xf3c <vfprintf+0x254>
     f34:	b0 c0       	rjmp	.+352    	; 0x1096 <vfprintf+0x3ae>
     f36:	e9 2f       	mov	r30, r25
     f38:	e0 61       	ori	r30, 0x10	; 16
     f3a:	be 2e       	mov	r11, r30
     f3c:	b4 fe       	sbrs	r11, 4
     f3e:	0d c0       	rjmp	.+26     	; 0xf5a <vfprintf+0x272>
     f40:	fb 2d       	mov	r31, r11
     f42:	f4 60       	ori	r31, 0x04	; 4
     f44:	bf 2e       	mov	r11, r31
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <vfprintf+0x272>
     f48:	34 fe       	sbrs	r3, 4
     f4a:	0a c0       	rjmp	.+20     	; 0xf60 <vfprintf+0x278>
     f4c:	29 2f       	mov	r18, r25
     f4e:	26 60       	ori	r18, 0x06	; 6
     f50:	b2 2e       	mov	r11, r18
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <vfprintf+0x278>
     f54:	28 e0       	ldi	r18, 0x08	; 8
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <vfprintf+0x27c>
     f5a:	20 e1       	ldi	r18, 0x10	; 16
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <vfprintf+0x27c>
     f60:	20 e1       	ldi	r18, 0x10	; 16
     f62:	32 e0       	ldi	r19, 0x02	; 2
     f64:	f8 01       	movw	r30, r16
     f66:	b7 fe       	sbrs	r11, 7
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <vfprintf+0x290>
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	0c 5f       	subi	r16, 0xFC	; 252
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <vfprintf+0x29c>
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 5f       	subi	r16, 0xFE	; 254
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	a3 01       	movw	r20, r6
     f86:	0e 94 a7 08 	call	0x114e	; 0x114e <__ultoa_invert>
     f8a:	88 2e       	mov	r8, r24
     f8c:	86 18       	sub	r8, r6
     f8e:	fb 2d       	mov	r31, r11
     f90:	ff 77       	andi	r31, 0x7F	; 127
     f92:	3f 2e       	mov	r3, r31
     f94:	36 fe       	sbrs	r3, 6
     f96:	0d c0       	rjmp	.+26     	; 0xfb2 <vfprintf+0x2ca>
     f98:	23 2d       	mov	r18, r3
     f9a:	2e 7f       	andi	r18, 0xFE	; 254
     f9c:	a2 2e       	mov	r10, r18
     f9e:	89 14       	cp	r8, r9
     fa0:	58 f4       	brcc	.+22     	; 0xfb8 <vfprintf+0x2d0>
     fa2:	34 fe       	sbrs	r3, 4
     fa4:	0b c0       	rjmp	.+22     	; 0xfbc <vfprintf+0x2d4>
     fa6:	32 fc       	sbrc	r3, 2
     fa8:	09 c0       	rjmp	.+18     	; 0xfbc <vfprintf+0x2d4>
     faa:	83 2d       	mov	r24, r3
     fac:	8e 7e       	andi	r24, 0xEE	; 238
     fae:	a8 2e       	mov	r10, r24
     fb0:	05 c0       	rjmp	.+10     	; 0xfbc <vfprintf+0x2d4>
     fb2:	b8 2c       	mov	r11, r8
     fb4:	a3 2c       	mov	r10, r3
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <vfprintf+0x2d6>
     fb8:	b8 2c       	mov	r11, r8
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <vfprintf+0x2d6>
     fbc:	b9 2c       	mov	r11, r9
     fbe:	a4 fe       	sbrs	r10, 4
     fc0:	0f c0       	rjmp	.+30     	; 0xfe0 <vfprintf+0x2f8>
     fc2:	fe 01       	movw	r30, r28
     fc4:	e8 0d       	add	r30, r8
     fc6:	f1 1d       	adc	r31, r1
     fc8:	80 81       	ld	r24, Z
     fca:	80 33       	cpi	r24, 0x30	; 48
     fcc:	21 f4       	brne	.+8      	; 0xfd6 <vfprintf+0x2ee>
     fce:	9a 2d       	mov	r25, r10
     fd0:	99 7e       	andi	r25, 0xE9	; 233
     fd2:	a9 2e       	mov	r10, r25
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <vfprintf+0x300>
     fd6:	a2 fe       	sbrs	r10, 2
     fd8:	06 c0       	rjmp	.+12     	; 0xfe6 <vfprintf+0x2fe>
     fda:	b3 94       	inc	r11
     fdc:	b3 94       	inc	r11
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <vfprintf+0x300>
     fe0:	8a 2d       	mov	r24, r10
     fe2:	86 78       	andi	r24, 0x86	; 134
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <vfprintf+0x300>
     fe6:	b3 94       	inc	r11
     fe8:	a3 fc       	sbrc	r10, 3
     fea:	11 c0       	rjmp	.+34     	; 0x100e <vfprintf+0x326>
     fec:	a0 fe       	sbrs	r10, 0
     fee:	06 c0       	rjmp	.+12     	; 0xffc <vfprintf+0x314>
     ff0:	b2 14       	cp	r11, r2
     ff2:	88 f4       	brcc	.+34     	; 0x1016 <vfprintf+0x32e>
     ff4:	28 0c       	add	r2, r8
     ff6:	92 2c       	mov	r9, r2
     ff8:	9b 18       	sub	r9, r11
     ffa:	0e c0       	rjmp	.+28     	; 0x1018 <vfprintf+0x330>
     ffc:	b2 14       	cp	r11, r2
     ffe:	60 f4       	brcc	.+24     	; 0x1018 <vfprintf+0x330>
    1000:	b6 01       	movw	r22, r12
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fputc>
    100a:	b3 94       	inc	r11
    100c:	f7 cf       	rjmp	.-18     	; 0xffc <vfprintf+0x314>
    100e:	b2 14       	cp	r11, r2
    1010:	18 f4       	brcc	.+6      	; 0x1018 <vfprintf+0x330>
    1012:	2b 18       	sub	r2, r11
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0x332>
    1016:	98 2c       	mov	r9, r8
    1018:	21 2c       	mov	r2, r1
    101a:	a4 fe       	sbrs	r10, 4
    101c:	10 c0       	rjmp	.+32     	; 0x103e <vfprintf+0x356>
    101e:	b6 01       	movw	r22, r12
    1020:	80 e3       	ldi	r24, 0x30	; 48
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fputc>
    1028:	a2 fe       	sbrs	r10, 2
    102a:	17 c0       	rjmp	.+46     	; 0x105a <vfprintf+0x372>
    102c:	a1 fc       	sbrc	r10, 1
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <vfprintf+0x34e>
    1030:	88 e7       	ldi	r24, 0x78	; 120
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <vfprintf+0x352>
    1036:	88 e5       	ldi	r24, 0x58	; 88
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b6 01       	movw	r22, r12
    103c:	0c c0       	rjmp	.+24     	; 0x1056 <vfprintf+0x36e>
    103e:	8a 2d       	mov	r24, r10
    1040:	86 78       	andi	r24, 0x86	; 134
    1042:	59 f0       	breq	.+22     	; 0x105a <vfprintf+0x372>
    1044:	a1 fe       	sbrs	r10, 1
    1046:	02 c0       	rjmp	.+4      	; 0x104c <vfprintf+0x364>
    1048:	8b e2       	ldi	r24, 0x2B	; 43
    104a:	01 c0       	rjmp	.+2      	; 0x104e <vfprintf+0x366>
    104c:	80 e2       	ldi	r24, 0x20	; 32
    104e:	a7 fc       	sbrc	r10, 7
    1050:	8d e2       	ldi	r24, 0x2D	; 45
    1052:	b6 01       	movw	r22, r12
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fputc>
    105a:	89 14       	cp	r8, r9
    105c:	38 f4       	brcc	.+14     	; 0x106c <vfprintf+0x384>
    105e:	b6 01       	movw	r22, r12
    1060:	80 e3       	ldi	r24, 0x30	; 48
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fputc>
    1068:	9a 94       	dec	r9
    106a:	f7 cf       	rjmp	.-18     	; 0x105a <vfprintf+0x372>
    106c:	8a 94       	dec	r8
    106e:	f3 01       	movw	r30, r6
    1070:	e8 0d       	add	r30, r8
    1072:	f1 1d       	adc	r31, r1
    1074:	80 81       	ld	r24, Z
    1076:	b6 01       	movw	r22, r12
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fputc>
    107e:	81 10       	cpse	r8, r1
    1080:	f5 cf       	rjmp	.-22     	; 0x106c <vfprintf+0x384>
    1082:	22 20       	and	r2, r2
    1084:	09 f4       	brne	.+2      	; 0x1088 <vfprintf+0x3a0>
    1086:	42 ce       	rjmp	.-892    	; 0xd0c <vfprintf+0x24>
    1088:	b6 01       	movw	r22, r12
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fputc>
    1092:	2a 94       	dec	r2
    1094:	f6 cf       	rjmp	.-20     	; 0x1082 <vfprintf+0x39a>
    1096:	f6 01       	movw	r30, r12
    1098:	86 81       	ldd	r24, Z+6	; 0x06
    109a:	97 81       	ldd	r25, Z+7	; 0x07
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <vfprintf+0x3ba>
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	2b 96       	adiw	r28, 0x0b	; 11
    10a4:	e2 e1       	ldi	r30, 0x12	; 18
    10a6:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__epilogue_restores__>

000010aa <strnlen_P>:
    10aa:	fc 01       	movw	r30, r24
    10ac:	05 90       	lpm	r0, Z+
    10ae:	61 50       	subi	r22, 0x01	; 1
    10b0:	70 40       	sbci	r23, 0x00	; 0
    10b2:	01 10       	cpse	r0, r1
    10b4:	d8 f7       	brcc	.-10     	; 0x10ac <strnlen_P+0x2>
    10b6:	80 95       	com	r24
    10b8:	90 95       	com	r25
    10ba:	8e 0f       	add	r24, r30
    10bc:	9f 1f       	adc	r25, r31
    10be:	08 95       	ret

000010c0 <strnlen>:
    10c0:	fc 01       	movw	r30, r24
    10c2:	61 50       	subi	r22, 0x01	; 1
    10c4:	70 40       	sbci	r23, 0x00	; 0
    10c6:	01 90       	ld	r0, Z+
    10c8:	01 10       	cpse	r0, r1
    10ca:	d8 f7       	brcc	.-10     	; 0x10c2 <strnlen+0x2>
    10cc:	80 95       	com	r24
    10ce:	90 95       	com	r25
    10d0:	8e 0f       	add	r24, r30
    10d2:	9f 1f       	adc	r25, r31
    10d4:	08 95       	ret

000010d6 <fputc>:
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	fb 01       	movw	r30, r22
    10e0:	23 81       	ldd	r18, Z+3	; 0x03
    10e2:	21 fd       	sbrc	r18, 1
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <fputc+0x16>
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	2c c0       	rjmp	.+88     	; 0x1144 <fputc+0x6e>
    10ec:	22 ff       	sbrs	r18, 2
    10ee:	16 c0       	rjmp	.+44     	; 0x111c <fputc+0x46>
    10f0:	46 81       	ldd	r20, Z+6	; 0x06
    10f2:	57 81       	ldd	r21, Z+7	; 0x07
    10f4:	24 81       	ldd	r18, Z+4	; 0x04
    10f6:	35 81       	ldd	r19, Z+5	; 0x05
    10f8:	42 17       	cp	r20, r18
    10fa:	53 07       	cpc	r21, r19
    10fc:	44 f4       	brge	.+16     	; 0x110e <fputc+0x38>
    10fe:	a0 81       	ld	r26, Z
    1100:	b1 81       	ldd	r27, Z+1	; 0x01
    1102:	9d 01       	movw	r18, r26
    1104:	2f 5f       	subi	r18, 0xFF	; 255
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	31 83       	std	Z+1, r19	; 0x01
    110a:	20 83       	st	Z, r18
    110c:	8c 93       	st	X, r24
    110e:	26 81       	ldd	r18, Z+6	; 0x06
    1110:	37 81       	ldd	r19, Z+7	; 0x07
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	37 83       	std	Z+7, r19	; 0x07
    1118:	26 83       	std	Z+6, r18	; 0x06
    111a:	14 c0       	rjmp	.+40     	; 0x1144 <fputc+0x6e>
    111c:	8b 01       	movw	r16, r22
    111e:	ec 01       	movw	r28, r24
    1120:	fb 01       	movw	r30, r22
    1122:	00 84       	ldd	r0, Z+8	; 0x08
    1124:	f1 85       	ldd	r31, Z+9	; 0x09
    1126:	e0 2d       	mov	r30, r0
    1128:	09 95       	icall
    112a:	89 2b       	or	r24, r25
    112c:	e1 f6       	brne	.-72     	; 0x10e6 <fputc+0x10>
    112e:	d8 01       	movw	r26, r16
    1130:	16 96       	adiw	r26, 0x06	; 6
    1132:	8d 91       	ld	r24, X+
    1134:	9c 91       	ld	r25, X
    1136:	17 97       	sbiw	r26, 0x07	; 7
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	17 96       	adiw	r26, 0x07	; 7
    113c:	9c 93       	st	X, r25
    113e:	8e 93       	st	-X, r24
    1140:	16 97       	sbiw	r26, 0x06	; 6
    1142:	ce 01       	movw	r24, r28
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <__ultoa_invert>:
    114e:	fa 01       	movw	r30, r20
    1150:	aa 27       	eor	r26, r26
    1152:	28 30       	cpi	r18, 0x08	; 8
    1154:	51 f1       	breq	.+84     	; 0x11aa <__ultoa_invert+0x5c>
    1156:	20 31       	cpi	r18, 0x10	; 16
    1158:	81 f1       	breq	.+96     	; 0x11ba <__ultoa_invert+0x6c>
    115a:	e8 94       	clt
    115c:	6f 93       	push	r22
    115e:	6e 7f       	andi	r22, 0xFE	; 254
    1160:	6e 5f       	subi	r22, 0xFE	; 254
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	af 4f       	sbci	r26, 0xFF	; 255
    116a:	b1 e0       	ldi	r27, 0x01	; 1
    116c:	3e d0       	rcall	.+124    	; 0x11ea <__ultoa_invert+0x9c>
    116e:	b4 e0       	ldi	r27, 0x04	; 4
    1170:	3c d0       	rcall	.+120    	; 0x11ea <__ultoa_invert+0x9c>
    1172:	67 0f       	add	r22, r23
    1174:	78 1f       	adc	r23, r24
    1176:	89 1f       	adc	r24, r25
    1178:	9a 1f       	adc	r25, r26
    117a:	a1 1d       	adc	r26, r1
    117c:	68 0f       	add	r22, r24
    117e:	79 1f       	adc	r23, r25
    1180:	8a 1f       	adc	r24, r26
    1182:	91 1d       	adc	r25, r1
    1184:	a1 1d       	adc	r26, r1
    1186:	6a 0f       	add	r22, r26
    1188:	71 1d       	adc	r23, r1
    118a:	81 1d       	adc	r24, r1
    118c:	91 1d       	adc	r25, r1
    118e:	a1 1d       	adc	r26, r1
    1190:	20 d0       	rcall	.+64     	; 0x11d2 <__ultoa_invert+0x84>
    1192:	09 f4       	brne	.+2      	; 0x1196 <__ultoa_invert+0x48>
    1194:	68 94       	set
    1196:	3f 91       	pop	r19
    1198:	2a e0       	ldi	r18, 0x0A	; 10
    119a:	26 9f       	mul	r18, r22
    119c:	11 24       	eor	r1, r1
    119e:	30 19       	sub	r19, r0
    11a0:	30 5d       	subi	r19, 0xD0	; 208
    11a2:	31 93       	st	Z+, r19
    11a4:	de f6       	brtc	.-74     	; 0x115c <__ultoa_invert+0xe>
    11a6:	cf 01       	movw	r24, r30
    11a8:	08 95       	ret
    11aa:	46 2f       	mov	r20, r22
    11ac:	47 70       	andi	r20, 0x07	; 7
    11ae:	40 5d       	subi	r20, 0xD0	; 208
    11b0:	41 93       	st	Z+, r20
    11b2:	b3 e0       	ldi	r27, 0x03	; 3
    11b4:	0f d0       	rcall	.+30     	; 0x11d4 <__ultoa_invert+0x86>
    11b6:	c9 f7       	brne	.-14     	; 0x11aa <__ultoa_invert+0x5c>
    11b8:	f6 cf       	rjmp	.-20     	; 0x11a6 <__ultoa_invert+0x58>
    11ba:	46 2f       	mov	r20, r22
    11bc:	4f 70       	andi	r20, 0x0F	; 15
    11be:	40 5d       	subi	r20, 0xD0	; 208
    11c0:	4a 33       	cpi	r20, 0x3A	; 58
    11c2:	18 f0       	brcs	.+6      	; 0x11ca <__ultoa_invert+0x7c>
    11c4:	49 5d       	subi	r20, 0xD9	; 217
    11c6:	31 fd       	sbrc	r19, 1
    11c8:	40 52       	subi	r20, 0x20	; 32
    11ca:	41 93       	st	Z+, r20
    11cc:	02 d0       	rcall	.+4      	; 0x11d2 <__ultoa_invert+0x84>
    11ce:	a9 f7       	brne	.-22     	; 0x11ba <__ultoa_invert+0x6c>
    11d0:	ea cf       	rjmp	.-44     	; 0x11a6 <__ultoa_invert+0x58>
    11d2:	b4 e0       	ldi	r27, 0x04	; 4
    11d4:	a6 95       	lsr	r26
    11d6:	97 95       	ror	r25
    11d8:	87 95       	ror	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	ba 95       	dec	r27
    11e0:	c9 f7       	brne	.-14     	; 0x11d4 <__ultoa_invert+0x86>
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	61 05       	cpc	r22, r1
    11e6:	71 05       	cpc	r23, r1
    11e8:	08 95       	ret
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	0a 2e       	mov	r0, r26
    11f0:	06 94       	lsr	r0
    11f2:	57 95       	ror	r21
    11f4:	47 95       	ror	r20
    11f6:	37 95       	ror	r19
    11f8:	27 95       	ror	r18
    11fa:	ba 95       	dec	r27
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <__ultoa_invert+0xa2>
    11fe:	62 0f       	add	r22, r18
    1200:	73 1f       	adc	r23, r19
    1202:	84 1f       	adc	r24, r20
    1204:	95 1f       	adc	r25, r21
    1206:	a0 1d       	adc	r26, r0
    1208:	08 95       	ret

0000120a <eeprom_read_byte>:
    120a:	e1 99       	sbic	0x1c, 1	; 28
    120c:	fe cf       	rjmp	.-4      	; 0x120a <eeprom_read_byte>
    120e:	9f bb       	out	0x1f, r25	; 31
    1210:	8e bb       	out	0x1e, r24	; 30
    1212:	e0 9a       	sbi	0x1c, 0	; 28
    1214:	99 27       	eor	r25, r25
    1216:	8d b3       	in	r24, 0x1d	; 29
    1218:	08 95       	ret

0000121a <eeprom_read_word>:
    121a:	a8 e1       	ldi	r26, 0x18	; 24
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	42 e0       	ldi	r20, 0x02	; 2
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	0c 94 27 09 	jmp	0x124e	; 0x124e <eeprom_read_blraw>

00001226 <eeprom_write_byte>:
    1226:	26 2f       	mov	r18, r22

00001228 <eeprom_write_r18>:
    1228:	e1 99       	sbic	0x1c, 1	; 28
    122a:	fe cf       	rjmp	.-4      	; 0x1228 <eeprom_write_r18>
    122c:	9f bb       	out	0x1f, r25	; 31
    122e:	8e bb       	out	0x1e, r24	; 30
    1230:	2d bb       	out	0x1d, r18	; 29
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	e2 9a       	sbi	0x1c, 2	; 28
    1238:	e1 9a       	sbi	0x1c, 1	; 28
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	08 95       	ret

00001240 <eeprom_write_word>:
    1240:	0e 94 13 09 	call	0x1226	; 0x1226 <eeprom_write_byte>
    1244:	27 2f       	mov	r18, r23
    1246:	0c 94 14 09 	jmp	0x1228	; 0x1228 <eeprom_write_r18>

0000124a <eeprom_read_block>:
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22

0000124e <eeprom_read_blraw>:
    124e:	fc 01       	movw	r30, r24
    1250:	e1 99       	sbic	0x1c, 1	; 28
    1252:	fe cf       	rjmp	.-4      	; 0x1250 <eeprom_read_blraw+0x2>
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <eeprom_read_blraw+0x14>
    1256:	ff bb       	out	0x1f, r31	; 31
    1258:	ee bb       	out	0x1e, r30	; 30
    125a:	e0 9a       	sbi	0x1c, 0	; 28
    125c:	31 96       	adiw	r30, 0x01	; 1
    125e:	0d b2       	in	r0, 0x1d	; 29
    1260:	0d 92       	st	X+, r0
    1262:	41 50       	subi	r20, 0x01	; 1
    1264:	50 40       	sbci	r21, 0x00	; 0
    1266:	b8 f7       	brcc	.-18     	; 0x1256 <eeprom_read_blraw+0x8>
    1268:	08 95       	ret

0000126a <__prologue_saves__>:
    126a:	2f 92       	push	r2
    126c:	3f 92       	push	r3
    126e:	4f 92       	push	r4
    1270:	5f 92       	push	r5
    1272:	6f 92       	push	r6
    1274:	7f 92       	push	r7
    1276:	8f 92       	push	r8
    1278:	9f 92       	push	r9
    127a:	af 92       	push	r10
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	ca 1b       	sub	r28, r26
    1294:	db 0b       	sbc	r29, r27
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	09 94       	ijmp

000012a2 <__epilogue_restores__>:
    12a2:	2a 88       	ldd	r2, Y+18	; 0x12
    12a4:	39 88       	ldd	r3, Y+17	; 0x11
    12a6:	48 88       	ldd	r4, Y+16	; 0x10
    12a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    12aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    12ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    12b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    12b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    12b4:	b9 84       	ldd	r11, Y+9	; 0x09
    12b6:	c8 84       	ldd	r12, Y+8	; 0x08
    12b8:	df 80       	ldd	r13, Y+7	; 0x07
    12ba:	ee 80       	ldd	r14, Y+6	; 0x06
    12bc:	fd 80       	ldd	r15, Y+5	; 0x05
    12be:	0c 81       	ldd	r16, Y+4	; 0x04
    12c0:	1b 81       	ldd	r17, Y+3	; 0x03
    12c2:	aa 81       	ldd	r26, Y+2	; 0x02
    12c4:	b9 81       	ldd	r27, Y+1	; 0x01
    12c6:	ce 0f       	add	r28, r30
    12c8:	d1 1d       	adc	r29, r1
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	ed 01       	movw	r28, r26
    12d6:	08 95       	ret

000012d8 <_exit>:
    12d8:	f8 94       	cli

000012da <__stop_program>:
    12da:	ff cf       	rjmp	.-2      	; 0x12da <__stop_program>

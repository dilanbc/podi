
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000075e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000075e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000075e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000993  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000671  00000000  00000000  0000118f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041c  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a5  00000000  00000000  00001ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 44 01 	call	0x288	; 0x288 <main>
  74:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <loadCellRead>:
		_delay_ms(100);
	}
}


float loadCellRead(){
  7c:	cf 92       	push	r12
  7e:	df 92       	push	r13
  80:	ef 92       	push	r14
  82:	ff 92       	push	r15
	hx711H=0;hx711L=0;  //clear variables
  84:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <hx711H>
  88:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <hx711L+0x1>
  8c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <hx711L>
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	33 c0       	rjmp	.+102    	; 0xfa <loadCellRead+0x7e>
		PORTD|=(1<<Load_clk); //Clock pin high
  94:	92 b3       	in	r25, 0x12	; 18
  96:	98 60       	ori	r25, 0x08	; 8
  98:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	9a e1       	ldi	r25, 0x1A	; 26
  9c:	9a 95       	dec	r25
  9e:	f1 f7       	brne	.-4      	; 0x9c <loadCellRead+0x20>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <loadCellRead+0x26>
		_delay_us(10);
		if ((PIND&(1<<Load_data))>>Load_data)  //read data pin
  a2:	82 9b       	sbis	0x10, 2	; 16
  a4:	11 c0       	rjmp	.+34     	; 0xc8 <loadCellRead+0x4c>
		{hx711H|=(1<<(7-i));//set hx 711 varible
  a6:	47 e0       	ldi	r20, 0x07	; 7
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	48 1b       	sub	r20, r24
  ac:	51 09       	sbc	r21, r1
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <loadCellRead+0x3c>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	4a 95       	dec	r20
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <loadCellRead+0x38>
  bc:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <hx711H>
  c0:	29 2b       	or	r18, r25
  c2:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <hx711H>
  c6:	11 c0       	rjmp	.+34     	; 0xea <loadCellRead+0x6e>
		}
		else
		{hx711H&=~(1<<(7-i));
  c8:	47 e0       	ldi	r20, 0x07	; 7
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	48 1b       	sub	r20, r24
  ce:	51 09       	sbc	r21, r1
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <loadCellRead+0x5e>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	4a 95       	dec	r20
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <loadCellRead+0x5a>
  de:	20 95       	com	r18
  e0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <hx711H>
  e4:	29 23       	and	r18, r25
  e6:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <hx711H>
		}
		PORTD&=~(1<<Load_clk); //Clock pin low
  ea:	92 b3       	in	r25, 0x12	; 18
  ec:	97 7f       	andi	r25, 0xF7	; 247
  ee:	92 bb       	out	0x12, r25	; 18
  f0:	9d e0       	ldi	r25, 0x0D	; 13
  f2:	9a 95       	dec	r25
  f4:	f1 f7       	brne	.-4      	; 0xf2 <loadCellRead+0x76>
  f6:	00 00       	nop
}


float loadCellRead(){
	hx711H=0;hx711L=0;  //clear variables
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	88 30       	cpi	r24, 0x08	; 8
  fc:	58 f2       	brcs	.-106    	; 0x94 <loadCellRead+0x18>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	3e c0       	rjmp	.+124    	; 0x17e <loadCellRead+0x102>
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
		PORTD|=(1<<Load_clk); //Clock pin high
 102:	92 b3       	in	r25, 0x12	; 18
 104:	98 60       	ori	r25, 0x08	; 8
 106:	92 bb       	out	0x12, r25	; 18
 108:	9a e1       	ldi	r25, 0x1A	; 26
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <loadCellRead+0x8e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <loadCellRead+0x94>
		_delay_us(10);
		if ((PIND&(1<<Load_data))>>Load_data) //read data pin
 110:	82 9b       	sbis	0x10, 2	; 16
 112:	16 c0       	rjmp	.+44     	; 0x140 <loadCellRead+0xc4>
		{hx711L|=(1<<(15-i));
 114:	4f e0       	ldi	r20, 0x0F	; 15
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	48 1b       	sub	r20, r24
 11a:	51 09       	sbc	r21, r1
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <loadCellRead+0xaa>
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	4a 95       	dec	r20
 128:	e2 f7       	brpl	.-8      	; 0x122 <loadCellRead+0xa6>
 12a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <hx711L>
 12e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <hx711L+0x1>
 132:	24 2b       	or	r18, r20
 134:	35 2b       	or	r19, r21
 136:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <hx711L+0x1>
 13a:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <hx711L>
 13e:	17 c0       	rjmp	.+46     	; 0x16e <loadCellRead+0xf2>
		}
		else
		{hx711L&=~(1<<(15-i));
 140:	4f e0       	ldi	r20, 0x0F	; 15
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	48 1b       	sub	r20, r24
 146:	51 09       	sbc	r21, r1
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <loadCellRead+0xd6>
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	4a 95       	dec	r20
 154:	e2 f7       	brpl	.-8      	; 0x14e <loadCellRead+0xd2>
 156:	20 95       	com	r18
 158:	30 95       	com	r19
 15a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <hx711L>
 15e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <hx711L+0x1>
 162:	24 23       	and	r18, r20
 164:	35 23       	and	r19, r21
 166:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <hx711L+0x1>
 16a:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <hx711L>
		}
		PORTD&=~(1<<Load_clk); //Clock pin low
 16e:	92 b3       	in	r25, 0x12	; 18
 170:	97 7f       	andi	r25, 0xF7	; 247
 172:	92 bb       	out	0x12, r25	; 18
 174:	9d e0       	ldi	r25, 0x0D	; 13
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <loadCellRead+0xfa>
 17a:	00 00       	nop
		PORTD&=~(1<<Load_clk); //Clock pin low
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 31       	cpi	r24, 0x10	; 16
 180:	08 f4       	brcc	.+2      	; 0x184 <loadCellRead+0x108>
 182:	bf cf       	rjmp	.-130    	; 0x102 <loadCellRead+0x86>
		}
		PORTD&=~(1<<Load_clk); //Clock pin low
		_delay_us(5);
	}
	
	hx711L=hx711L>>1; //shift bits
 184:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <hx711L>
 188:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <hx711L+0x1>
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <hx711L+0x1>
 194:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <hx711L>
	
	if (hx711H&1)  //bit setup
 198:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <hx711H>
 19c:	60 ff       	sbrs	r22, 0
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <loadCellRead+0x12e>
	{hx711L|=(1<<15);
 1a0:	90 68       	ori	r25, 0x80	; 128
 1a2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <hx711L+0x1>
 1a6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <hx711L>
	}
	else
	{hx711L&=~(1<<15);
	}
	hx711H=hx711H>>1;
 1aa:	66 95       	lsr	r22
 1ac:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <hx711H>
	
	return (hx711H*(65536/18029.6))+hx711L/18029.6; //load cell calibration
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__floatsisf>
 1ba:	24 e6       	ldi	r18, 0x64	; 100
 1bc:	32 ea       	ldi	r19, 0xA2	; 162
 1be:	48 e6       	ldi	r20, 0x68	; 104
 1c0:	50 e4       	ldi	r21, 0x40	; 64
 1c2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__mulsf3>
 1c6:	6b 01       	movw	r12, r22
 1c8:	7c 01       	movw	r14, r24
 1ca:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <hx711L>
 1ce:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <hx711L+0x1>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 4f 02 	call	0x49e	; 0x49e <__floatunsisf>
 1da:	23 e3       	ldi	r18, 0x33	; 51
 1dc:	3b ed       	ldi	r19, 0xDB	; 219
 1de:	4c e8       	ldi	r20, 0x8C	; 140
 1e0:	56 e4       	ldi	r21, 0x46	; 70
 1e2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divsf3>
 1e6:	9b 01       	movw	r18, r22
 1e8:	ac 01       	movw	r20, r24
 1ea:	c7 01       	movw	r24, r14
 1ec:	b6 01       	movw	r22, r12
 1ee:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__addsf3>
}
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	08 95       	ret

000001fc <servoangle>:

void servoangle(uint8_t pin){

	if (pin)
 1fc:	81 11       	cpse	r24, r1
 1fe:	20 c0       	rjmp	.+64     	; 0x240 <servoangle+0x44>
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	3f c0       	rjmp	.+126    	; 0x282 <servoangle+0x86>
	{
		for(uint8_t j=0;j<100;j++){
			PORTD|=(1<<4);
 204:	82 b3       	in	r24, 0x12	; 18
 206:	80 61       	ori	r24, 0x10	; 16
 208:	82 bb       	out	0x12, r24	; 18
			for(uint8_t i=0;i<10;i++){
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	07 c0       	rjmp	.+14     	; 0x21c <servoangle+0x20>
 20e:	e7 ec       	ldi	r30, 0xC7	; 199
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <servoangle+0x16>
 216:	00 c0       	rjmp	.+0      	; 0x218 <servoangle+0x1c>
 218:	00 00       	nop
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	8a 30       	cpi	r24, 0x0A	; 10
 21e:	b8 f3       	brcs	.-18     	; 0x20e <servoangle+0x12>
				_delay_us(100);
			}
			PORTD&=~(1<<4);
 220:	82 b3       	in	r24, 0x12	; 18
 222:	8f 7e       	andi	r24, 0xEF	; 239
 224:	82 bb       	out	0x12, r24	; 18
			
			uint8_t ser=200-10;
			
			for(uint8_t i=0;i<ser;i++){
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	07 c0       	rjmp	.+14     	; 0x238 <servoangle+0x3c>
 22a:	e7 ec       	ldi	r30, 0xC7	; 199
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <servoangle+0x32>
 232:	00 c0       	rjmp	.+0      	; 0x234 <servoangle+0x38>
 234:	00 00       	nop
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	8e 3b       	cpi	r24, 0xBE	; 190
 23a:	b8 f3       	brcs	.-18     	; 0x22a <servoangle+0x2e>

void servoangle(uint8_t pin){

	if (pin)
	{
		for(uint8_t j=0;j<100;j++){
 23c:	9f 5f       	subi	r25, 0xFF	; 255
 23e:	01 c0       	rjmp	.+2      	; 0x242 <servoangle+0x46>
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	94 36       	cpi	r25, 0x64	; 100
 244:	f8 f2       	brcs	.-66     	; 0x204 <servoangle+0x8>
 246:	08 95       	ret
		}
	}
	else
	{for(uint8_t j=0;j<100;j++){
		
		PORTD|=(1<<4);
 248:	82 b3       	in	r24, 0x12	; 18
 24a:	80 61       	ori	r24, 0x10	; 16
 24c:	82 bb       	out	0x12, r24	; 18
		for(uint8_t i=0;i<15;i++){
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	07 c0       	rjmp	.+14     	; 0x260 <servoangle+0x64>
 252:	e7 ec       	ldi	r30, 0xC7	; 199
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <servoangle+0x5a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <servoangle+0x60>
 25c:	00 00       	nop
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	8f 30       	cpi	r24, 0x0F	; 15
 262:	b8 f3       	brcs	.-18     	; 0x252 <servoangle+0x56>
			_delay_us(100);
		}
		PORTD&=~(1<<4);
 264:	82 b3       	in	r24, 0x12	; 18
 266:	8f 7e       	andi	r24, 0xEF	; 239
 268:	82 bb       	out	0x12, r24	; 18
		
		uint8_t ser=200-15;
		
		for(uint8_t i=0;i<15;i++){
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	07 c0       	rjmp	.+14     	; 0x27c <servoangle+0x80>
 26e:	e7 ec       	ldi	r30, 0xC7	; 199
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <servoangle+0x76>
 276:	00 c0       	rjmp	.+0      	; 0x278 <servoangle+0x7c>
 278:	00 00       	nop
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	8f 30       	cpi	r24, 0x0F	; 15
 27e:	b8 f3       	brcs	.-18     	; 0x26e <servoangle+0x72>
				_delay_us(100);
			}
		}
	}
	else
	{for(uint8_t j=0;j<100;j++){
 280:	9f 5f       	subi	r25, 0xFF	; 255
 282:	94 36       	cpi	r25, 0x64	; 100
 284:	08 f3       	brcs	.-62     	; 0x248 <servoangle+0x4c>
 286:	08 95       	ret

00000288 <main>:
float hx=0;
void servoangle(uint8_t pin);

int main(void)
{
	DDRD|=(1<<Load_clk); //Load cell clock pin
 288:	81 b3       	in	r24, 0x11	; 17
 28a:	88 60       	ori	r24, 0x08	; 8
 28c:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<Load_clk);//Clock pin low
 28e:	82 b3       	in	r24, 0x12	; 18
 290:	87 7f       	andi	r24, 0xF7	; 247
 292:	82 bb       	out	0x12, r24	; 18
	DDRD|=(1<<4);
 294:	81 b3       	in	r24, 0x11	; 17
 296:	80 61       	ori	r24, 0x10	; 16
 298:	81 bb       	out	0x11, r24	; 17
	
	while (1)
	{
		hx=loadCellRead();
 29a:	0e 94 3e 00 	call	0x7c	; 0x7c <loadCellRead>
 29e:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a2:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2aa:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		if (hx>15)
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	40 e7       	ldi	r20, 0x70	; 112
 2b4:	51 e4       	ldi	r21, 0x41	; 65
 2b6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__gesf2>
 2ba:	18 16       	cp	r1, r24
 2bc:	24 f4       	brge	.+8      	; 0x2c6 <main+0x3e>
		{servoangle(0);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <servoangle>
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <main+0x44>
		}
		else
		{servoangle(1);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <servoangle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	2f ef       	ldi	r18, 0xFF	; 255
 2ce:	80 e7       	ldi	r24, 0x70	; 112
 2d0:	92 e0       	ldi	r25, 0x02	; 2
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x4a>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x54>
 2dc:	00 00       	nop
 2de:	dd cf       	rjmp	.-70     	; 0x29a <main+0x12>

000002e0 <__subsf3>:
 2e0:	50 58       	subi	r21, 0x80	; 128

000002e2 <__addsf3>:
 2e2:	bb 27       	eor	r27, r27
 2e4:	aa 27       	eor	r26, r26
 2e6:	0e 94 88 01 	call	0x310	; 0x310 <__addsf3x>
 2ea:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_round>
 2ee:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_pscA>
 2f2:	38 f0       	brcs	.+14     	; 0x302 <__addsf3+0x20>
 2f4:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_pscB>
 2f8:	20 f0       	brcs	.+8      	; 0x302 <__addsf3+0x20>
 2fa:	39 f4       	brne	.+14     	; 0x30a <__addsf3+0x28>
 2fc:	9f 3f       	cpi	r25, 0xFF	; 255
 2fe:	19 f4       	brne	.+6      	; 0x306 <__addsf3+0x24>
 300:	26 f4       	brtc	.+8      	; 0x30a <__addsf3+0x28>
 302:	0c 94 92 02 	jmp	0x524	; 0x524 <__fp_nan>
 306:	0e f4       	brtc	.+2      	; 0x30a <__addsf3+0x28>
 308:	e0 95       	com	r30
 30a:	e7 fb       	bst	r30, 7
 30c:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_inf>

00000310 <__addsf3x>:
 310:	e9 2f       	mov	r30, r25
 312:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_split3>
 316:	58 f3       	brcs	.-42     	; 0x2ee <__addsf3+0xc>
 318:	ba 17       	cp	r27, r26
 31a:	62 07       	cpc	r22, r18
 31c:	73 07       	cpc	r23, r19
 31e:	84 07       	cpc	r24, r20
 320:	95 07       	cpc	r25, r21
 322:	20 f0       	brcs	.+8      	; 0x32c <__addsf3x+0x1c>
 324:	79 f4       	brne	.+30     	; 0x344 <__addsf3x+0x34>
 326:	a6 f5       	brtc	.+104    	; 0x390 <__addsf3x+0x80>
 328:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_zero>
 32c:	0e f4       	brtc	.+2      	; 0x330 <__addsf3x+0x20>
 32e:	e0 95       	com	r30
 330:	0b 2e       	mov	r0, r27
 332:	ba 2f       	mov	r27, r26
 334:	a0 2d       	mov	r26, r0
 336:	0b 01       	movw	r0, r22
 338:	b9 01       	movw	r22, r18
 33a:	90 01       	movw	r18, r0
 33c:	0c 01       	movw	r0, r24
 33e:	ca 01       	movw	r24, r20
 340:	a0 01       	movw	r20, r0
 342:	11 24       	eor	r1, r1
 344:	ff 27       	eor	r31, r31
 346:	59 1b       	sub	r21, r25
 348:	99 f0       	breq	.+38     	; 0x370 <__addsf3x+0x60>
 34a:	59 3f       	cpi	r21, 0xF9	; 249
 34c:	50 f4       	brcc	.+20     	; 0x362 <__addsf3x+0x52>
 34e:	50 3e       	cpi	r21, 0xE0	; 224
 350:	68 f1       	brcs	.+90     	; 0x3ac <__addsf3x+0x9c>
 352:	1a 16       	cp	r1, r26
 354:	f0 40       	sbci	r31, 0x00	; 0
 356:	a2 2f       	mov	r26, r18
 358:	23 2f       	mov	r18, r19
 35a:	34 2f       	mov	r19, r20
 35c:	44 27       	eor	r20, r20
 35e:	58 5f       	subi	r21, 0xF8	; 248
 360:	f3 cf       	rjmp	.-26     	; 0x348 <__addsf3x+0x38>
 362:	46 95       	lsr	r20
 364:	37 95       	ror	r19
 366:	27 95       	ror	r18
 368:	a7 95       	ror	r26
 36a:	f0 40       	sbci	r31, 0x00	; 0
 36c:	53 95       	inc	r21
 36e:	c9 f7       	brne	.-14     	; 0x362 <__addsf3x+0x52>
 370:	7e f4       	brtc	.+30     	; 0x390 <__addsf3x+0x80>
 372:	1f 16       	cp	r1, r31
 374:	ba 0b       	sbc	r27, r26
 376:	62 0b       	sbc	r22, r18
 378:	73 0b       	sbc	r23, r19
 37a:	84 0b       	sbc	r24, r20
 37c:	ba f0       	brmi	.+46     	; 0x3ac <__addsf3x+0x9c>
 37e:	91 50       	subi	r25, 0x01	; 1
 380:	a1 f0       	breq	.+40     	; 0x3aa <__addsf3x+0x9a>
 382:	ff 0f       	add	r31, r31
 384:	bb 1f       	adc	r27, r27
 386:	66 1f       	adc	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	88 1f       	adc	r24, r24
 38c:	c2 f7       	brpl	.-16     	; 0x37e <__addsf3x+0x6e>
 38e:	0e c0       	rjmp	.+28     	; 0x3ac <__addsf3x+0x9c>
 390:	ba 0f       	add	r27, r26
 392:	62 1f       	adc	r22, r18
 394:	73 1f       	adc	r23, r19
 396:	84 1f       	adc	r24, r20
 398:	48 f4       	brcc	.+18     	; 0x3ac <__addsf3x+0x9c>
 39a:	87 95       	ror	r24
 39c:	77 95       	ror	r23
 39e:	67 95       	ror	r22
 3a0:	b7 95       	ror	r27
 3a2:	f7 95       	ror	r31
 3a4:	9e 3f       	cpi	r25, 0xFE	; 254
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <__addsf3x+0x9a>
 3a8:	b0 cf       	rjmp	.-160    	; 0x30a <__addsf3+0x28>
 3aa:	93 95       	inc	r25
 3ac:	88 0f       	add	r24, r24
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <__addsf3x+0xa2>
 3b0:	99 27       	eor	r25, r25
 3b2:	ee 0f       	add	r30, r30
 3b4:	97 95       	ror	r25
 3b6:	87 95       	ror	r24
 3b8:	08 95       	ret

000003ba <__divsf3>:
 3ba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__divsf3x>
 3be:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_round>
 3c2:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_pscB>
 3c6:	58 f0       	brcs	.+22     	; 0x3de <__divsf3+0x24>
 3c8:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_pscA>
 3cc:	40 f0       	brcs	.+16     	; 0x3de <__divsf3+0x24>
 3ce:	29 f4       	brne	.+10     	; 0x3da <__divsf3+0x20>
 3d0:	5f 3f       	cpi	r21, 0xFF	; 255
 3d2:	29 f0       	breq	.+10     	; 0x3de <__divsf3+0x24>
 3d4:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_inf>
 3d8:	51 11       	cpse	r21, r1
 3da:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_szero>
 3de:	0c 94 92 02 	jmp	0x524	; 0x524 <__fp_nan>

000003e2 <__divsf3x>:
 3e2:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_split3>
 3e6:	68 f3       	brcs	.-38     	; 0x3c2 <__divsf3+0x8>

000003e8 <__divsf3_pse>:
 3e8:	99 23       	and	r25, r25
 3ea:	b1 f3       	breq	.-20     	; 0x3d8 <__divsf3+0x1e>
 3ec:	55 23       	and	r21, r21
 3ee:	91 f3       	breq	.-28     	; 0x3d4 <__divsf3+0x1a>
 3f0:	95 1b       	sub	r25, r21
 3f2:	55 0b       	sbc	r21, r21
 3f4:	bb 27       	eor	r27, r27
 3f6:	aa 27       	eor	r26, r26
 3f8:	62 17       	cp	r22, r18
 3fa:	73 07       	cpc	r23, r19
 3fc:	84 07       	cpc	r24, r20
 3fe:	38 f0       	brcs	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	9f 5f       	subi	r25, 0xFF	; 255
 402:	5f 4f       	sbci	r21, 0xFF	; 255
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	44 1f       	adc	r20, r20
 40a:	aa 1f       	adc	r26, r26
 40c:	a9 f3       	breq	.-22     	; 0x3f8 <__divsf3_pse+0x10>
 40e:	35 d0       	rcall	.+106    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 410:	0e 2e       	mov	r0, r30
 412:	3a f0       	brmi	.+14     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 414:	e0 e8       	ldi	r30, 0x80	; 128
 416:	32 d0       	rcall	.+100    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 418:	91 50       	subi	r25, 0x01	; 1
 41a:	50 40       	sbci	r21, 0x00	; 0
 41c:	e6 95       	lsr	r30
 41e:	00 1c       	adc	r0, r0
 420:	ca f7       	brpl	.-14     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 422:	2b d0       	rcall	.+86     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 424:	fe 2f       	mov	r31, r30
 426:	29 d0       	rcall	.+82     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 428:	66 0f       	add	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	88 1f       	adc	r24, r24
 42e:	bb 1f       	adc	r27, r27
 430:	26 17       	cp	r18, r22
 432:	37 07       	cpc	r19, r23
 434:	48 07       	cpc	r20, r24
 436:	ab 07       	cpc	r26, r27
 438:	b0 e8       	ldi	r27, 0x80	; 128
 43a:	09 f0       	breq	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43c:	bb 0b       	sbc	r27, r27
 43e:	80 2d       	mov	r24, r0
 440:	bf 01       	movw	r22, r30
 442:	ff 27       	eor	r31, r31
 444:	93 58       	subi	r25, 0x83	; 131
 446:	5f 4f       	sbci	r21, 0xFF	; 255
 448:	3a f0       	brmi	.+14     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 44a:	9e 3f       	cpi	r25, 0xFE	; 254
 44c:	51 05       	cpc	r21, r1
 44e:	78 f0       	brcs	.+30     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 450:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_inf>
 454:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_szero>
 458:	5f 3f       	cpi	r21, 0xFF	; 255
 45a:	e4 f3       	brlt	.-8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 45c:	98 3e       	cpi	r25, 0xE8	; 232
 45e:	d4 f3       	brlt	.-12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 460:	86 95       	lsr	r24
 462:	77 95       	ror	r23
 464:	67 95       	ror	r22
 466:	b7 95       	ror	r27
 468:	f7 95       	ror	r31
 46a:	9f 5f       	subi	r25, 0xFF	; 255
 46c:	c9 f7       	brne	.-14     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 46e:	88 0f       	add	r24, r24
 470:	91 1d       	adc	r25, r1
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	97 f9       	bld	r25, 7
 478:	08 95       	ret
 47a:	e1 e0       	ldi	r30, 0x01	; 1
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	bb 1f       	adc	r27, r27
 484:	62 17       	cp	r22, r18
 486:	73 07       	cpc	r23, r19
 488:	84 07       	cpc	r24, r20
 48a:	ba 07       	cpc	r27, r26
 48c:	20 f0       	brcs	.+8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 48e:	62 1b       	sub	r22, r18
 490:	73 0b       	sbc	r23, r19
 492:	84 0b       	sbc	r24, r20
 494:	ba 0b       	sbc	r27, r26
 496:	ee 1f       	adc	r30, r30
 498:	88 f7       	brcc	.-30     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 49a:	e0 95       	com	r30
 49c:	08 95       	ret

0000049e <__floatunsisf>:
 49e:	e8 94       	clt
 4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <__floatsisf+0x12>

000004a2 <__floatsisf>:
 4a2:	97 fb       	bst	r25, 7
 4a4:	3e f4       	brtc	.+14     	; 0x4b4 <__floatsisf+0x12>
 4a6:	90 95       	com	r25
 4a8:	80 95       	com	r24
 4aa:	70 95       	com	r23
 4ac:	61 95       	neg	r22
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	8f 4f       	sbci	r24, 0xFF	; 255
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	99 23       	and	r25, r25
 4b6:	a9 f0       	breq	.+42     	; 0x4e2 <__floatsisf+0x40>
 4b8:	f9 2f       	mov	r31, r25
 4ba:	96 e9       	ldi	r25, 0x96	; 150
 4bc:	bb 27       	eor	r27, r27
 4be:	93 95       	inc	r25
 4c0:	f6 95       	lsr	r31
 4c2:	87 95       	ror	r24
 4c4:	77 95       	ror	r23
 4c6:	67 95       	ror	r22
 4c8:	b7 95       	ror	r27
 4ca:	f1 11       	cpse	r31, r1
 4cc:	f8 cf       	rjmp	.-16     	; 0x4be <__floatsisf+0x1c>
 4ce:	fa f4       	brpl	.+62     	; 0x50e <__floatsisf+0x6c>
 4d0:	bb 0f       	add	r27, r27
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__floatsisf+0x36>
 4d4:	60 ff       	sbrs	r22, 0
 4d6:	1b c0       	rjmp	.+54     	; 0x50e <__floatsisf+0x6c>
 4d8:	6f 5f       	subi	r22, 0xFF	; 255
 4da:	7f 4f       	sbci	r23, 0xFF	; 255
 4dc:	8f 4f       	sbci	r24, 0xFF	; 255
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	16 c0       	rjmp	.+44     	; 0x50e <__floatsisf+0x6c>
 4e2:	88 23       	and	r24, r24
 4e4:	11 f0       	breq	.+4      	; 0x4ea <__floatsisf+0x48>
 4e6:	96 e9       	ldi	r25, 0x96	; 150
 4e8:	11 c0       	rjmp	.+34     	; 0x50c <__floatsisf+0x6a>
 4ea:	77 23       	and	r23, r23
 4ec:	21 f0       	breq	.+8      	; 0x4f6 <__floatsisf+0x54>
 4ee:	9e e8       	ldi	r25, 0x8E	; 142
 4f0:	87 2f       	mov	r24, r23
 4f2:	76 2f       	mov	r23, r22
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <__floatsisf+0x5e>
 4f6:	66 23       	and	r22, r22
 4f8:	71 f0       	breq	.+28     	; 0x516 <__floatsisf+0x74>
 4fa:	96 e8       	ldi	r25, 0x86	; 134
 4fc:	86 2f       	mov	r24, r22
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	2a f0       	brmi	.+10     	; 0x50e <__floatsisf+0x6c>
 504:	9a 95       	dec	r25
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	88 1f       	adc	r24, r24
 50c:	da f7       	brpl	.-10     	; 0x504 <__floatsisf+0x62>
 50e:	88 0f       	add	r24, r24
 510:	96 95       	lsr	r25
 512:	87 95       	ror	r24
 514:	97 f9       	bld	r25, 7
 516:	08 95       	ret

00000518 <__fp_inf>:
 518:	97 f9       	bld	r25, 7
 51a:	9f 67       	ori	r25, 0x7F	; 127
 51c:	80 e8       	ldi	r24, 0x80	; 128
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	08 95       	ret

00000524 <__fp_nan>:
 524:	9f ef       	ldi	r25, 0xFF	; 255
 526:	80 ec       	ldi	r24, 0xC0	; 192
 528:	08 95       	ret

0000052a <__fp_pscA>:
 52a:	00 24       	eor	r0, r0
 52c:	0a 94       	dec	r0
 52e:	16 16       	cp	r1, r22
 530:	17 06       	cpc	r1, r23
 532:	18 06       	cpc	r1, r24
 534:	09 06       	cpc	r0, r25
 536:	08 95       	ret

00000538 <__fp_pscB>:
 538:	00 24       	eor	r0, r0
 53a:	0a 94       	dec	r0
 53c:	12 16       	cp	r1, r18
 53e:	13 06       	cpc	r1, r19
 540:	14 06       	cpc	r1, r20
 542:	05 06       	cpc	r0, r21
 544:	08 95       	ret

00000546 <__fp_round>:
 546:	09 2e       	mov	r0, r25
 548:	03 94       	inc	r0
 54a:	00 0c       	add	r0, r0
 54c:	11 f4       	brne	.+4      	; 0x552 <__fp_round+0xc>
 54e:	88 23       	and	r24, r24
 550:	52 f0       	brmi	.+20     	; 0x566 <__fp_round+0x20>
 552:	bb 0f       	add	r27, r27
 554:	40 f4       	brcc	.+16     	; 0x566 <__fp_round+0x20>
 556:	bf 2b       	or	r27, r31
 558:	11 f4       	brne	.+4      	; 0x55e <__fp_round+0x18>
 55a:	60 ff       	sbrs	r22, 0
 55c:	04 c0       	rjmp	.+8      	; 0x566 <__fp_round+0x20>
 55e:	6f 5f       	subi	r22, 0xFF	; 255
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	8f 4f       	sbci	r24, 0xFF	; 255
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	08 95       	ret

00000568 <__fp_split3>:
 568:	57 fd       	sbrc	r21, 7
 56a:	90 58       	subi	r25, 0x80	; 128
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	59 f0       	breq	.+22     	; 0x588 <__fp_splitA+0x10>
 572:	5f 3f       	cpi	r21, 0xFF	; 255
 574:	71 f0       	breq	.+28     	; 0x592 <__fp_splitA+0x1a>
 576:	47 95       	ror	r20

00000578 <__fp_splitA>:
 578:	88 0f       	add	r24, r24
 57a:	97 fb       	bst	r25, 7
 57c:	99 1f       	adc	r25, r25
 57e:	61 f0       	breq	.+24     	; 0x598 <__fp_splitA+0x20>
 580:	9f 3f       	cpi	r25, 0xFF	; 255
 582:	79 f0       	breq	.+30     	; 0x5a2 <__fp_splitA+0x2a>
 584:	87 95       	ror	r24
 586:	08 95       	ret
 588:	12 16       	cp	r1, r18
 58a:	13 06       	cpc	r1, r19
 58c:	14 06       	cpc	r1, r20
 58e:	55 1f       	adc	r21, r21
 590:	f2 cf       	rjmp	.-28     	; 0x576 <__fp_split3+0xe>
 592:	46 95       	lsr	r20
 594:	f1 df       	rcall	.-30     	; 0x578 <__fp_splitA>
 596:	08 c0       	rjmp	.+16     	; 0x5a8 <__fp_splitA+0x30>
 598:	16 16       	cp	r1, r22
 59a:	17 06       	cpc	r1, r23
 59c:	18 06       	cpc	r1, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	f1 cf       	rjmp	.-30     	; 0x584 <__fp_splitA+0xc>
 5a2:	86 95       	lsr	r24
 5a4:	71 05       	cpc	r23, r1
 5a6:	61 05       	cpc	r22, r1
 5a8:	08 94       	sec
 5aa:	08 95       	ret

000005ac <__fp_zero>:
 5ac:	e8 94       	clt

000005ae <__fp_szero>:
 5ae:	bb 27       	eor	r27, r27
 5b0:	66 27       	eor	r22, r22
 5b2:	77 27       	eor	r23, r23
 5b4:	cb 01       	movw	r24, r22
 5b6:	97 f9       	bld	r25, 7
 5b8:	08 95       	ret

000005ba <__gesf2>:
 5ba:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_cmp>
 5be:	08 f4       	brcc	.+2      	; 0x5c2 <__gesf2+0x8>
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <__mulsf3>:
 5c4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__mulsf3x>
 5c8:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_round>
 5cc:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_pscA>
 5d0:	38 f0       	brcs	.+14     	; 0x5e0 <__mulsf3+0x1c>
 5d2:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_pscB>
 5d6:	20 f0       	brcs	.+8      	; 0x5e0 <__mulsf3+0x1c>
 5d8:	95 23       	and	r25, r21
 5da:	11 f0       	breq	.+4      	; 0x5e0 <__mulsf3+0x1c>
 5dc:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_inf>
 5e0:	0c 94 92 02 	jmp	0x524	; 0x524 <__fp_nan>
 5e4:	11 24       	eor	r1, r1
 5e6:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_szero>

000005ea <__mulsf3x>:
 5ea:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_split3>
 5ee:	70 f3       	brcs	.-36     	; 0x5cc <__mulsf3+0x8>

000005f0 <__mulsf3_pse>:
 5f0:	95 9f       	mul	r25, r21
 5f2:	c1 f3       	breq	.-16     	; 0x5e4 <__mulsf3+0x20>
 5f4:	95 0f       	add	r25, r21
 5f6:	50 e0       	ldi	r21, 0x00	; 0
 5f8:	55 1f       	adc	r21, r21
 5fa:	62 9f       	mul	r22, r18
 5fc:	f0 01       	movw	r30, r0
 5fe:	72 9f       	mul	r23, r18
 600:	bb 27       	eor	r27, r27
 602:	f0 0d       	add	r31, r0
 604:	b1 1d       	adc	r27, r1
 606:	63 9f       	mul	r22, r19
 608:	aa 27       	eor	r26, r26
 60a:	f0 0d       	add	r31, r0
 60c:	b1 1d       	adc	r27, r1
 60e:	aa 1f       	adc	r26, r26
 610:	64 9f       	mul	r22, r20
 612:	66 27       	eor	r22, r22
 614:	b0 0d       	add	r27, r0
 616:	a1 1d       	adc	r26, r1
 618:	66 1f       	adc	r22, r22
 61a:	82 9f       	mul	r24, r18
 61c:	22 27       	eor	r18, r18
 61e:	b0 0d       	add	r27, r0
 620:	a1 1d       	adc	r26, r1
 622:	62 1f       	adc	r22, r18
 624:	73 9f       	mul	r23, r19
 626:	b0 0d       	add	r27, r0
 628:	a1 1d       	adc	r26, r1
 62a:	62 1f       	adc	r22, r18
 62c:	83 9f       	mul	r24, r19
 62e:	a0 0d       	add	r26, r0
 630:	61 1d       	adc	r22, r1
 632:	22 1f       	adc	r18, r18
 634:	74 9f       	mul	r23, r20
 636:	33 27       	eor	r19, r19
 638:	a0 0d       	add	r26, r0
 63a:	61 1d       	adc	r22, r1
 63c:	23 1f       	adc	r18, r19
 63e:	84 9f       	mul	r24, r20
 640:	60 0d       	add	r22, r0
 642:	21 1d       	adc	r18, r1
 644:	82 2f       	mov	r24, r18
 646:	76 2f       	mov	r23, r22
 648:	6a 2f       	mov	r22, r26
 64a:	11 24       	eor	r1, r1
 64c:	9f 57       	subi	r25, 0x7F	; 127
 64e:	50 40       	sbci	r21, 0x00	; 0
 650:	9a f0       	brmi	.+38     	; 0x678 <__mulsf3_pse+0x88>
 652:	f1 f0       	breq	.+60     	; 0x690 <__mulsf3_pse+0xa0>
 654:	88 23       	and	r24, r24
 656:	4a f0       	brmi	.+18     	; 0x66a <__mulsf3_pse+0x7a>
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	bb 1f       	adc	r27, r27
 65e:	66 1f       	adc	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	88 1f       	adc	r24, r24
 664:	91 50       	subi	r25, 0x01	; 1
 666:	50 40       	sbci	r21, 0x00	; 0
 668:	a9 f7       	brne	.-22     	; 0x654 <__mulsf3_pse+0x64>
 66a:	9e 3f       	cpi	r25, 0xFE	; 254
 66c:	51 05       	cpc	r21, r1
 66e:	80 f0       	brcs	.+32     	; 0x690 <__mulsf3_pse+0xa0>
 670:	0c 94 8c 02 	jmp	0x518	; 0x518 <__fp_inf>
 674:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_szero>
 678:	5f 3f       	cpi	r21, 0xFF	; 255
 67a:	e4 f3       	brlt	.-8      	; 0x674 <__mulsf3_pse+0x84>
 67c:	98 3e       	cpi	r25, 0xE8	; 232
 67e:	d4 f3       	brlt	.-12     	; 0x674 <__mulsf3_pse+0x84>
 680:	86 95       	lsr	r24
 682:	77 95       	ror	r23
 684:	67 95       	ror	r22
 686:	b7 95       	ror	r27
 688:	f7 95       	ror	r31
 68a:	e7 95       	ror	r30
 68c:	9f 5f       	subi	r25, 0xFF	; 255
 68e:	c1 f7       	brne	.-16     	; 0x680 <__mulsf3_pse+0x90>
 690:	fe 2b       	or	r31, r30
 692:	88 0f       	add	r24, r24
 694:	91 1d       	adc	r25, r1
 696:	96 95       	lsr	r25
 698:	87 95       	ror	r24
 69a:	97 f9       	bld	r25, 7
 69c:	08 95       	ret

0000069e <__fp_cmp>:
 69e:	99 0f       	add	r25, r25
 6a0:	00 08       	sbc	r0, r0
 6a2:	55 0f       	add	r21, r21
 6a4:	aa 0b       	sbc	r26, r26
 6a6:	e0 e8       	ldi	r30, 0x80	; 128
 6a8:	fe ef       	ldi	r31, 0xFE	; 254
 6aa:	16 16       	cp	r1, r22
 6ac:	17 06       	cpc	r1, r23
 6ae:	e8 07       	cpc	r30, r24
 6b0:	f9 07       	cpc	r31, r25
 6b2:	c0 f0       	brcs	.+48     	; 0x6e4 <__fp_cmp+0x46>
 6b4:	12 16       	cp	r1, r18
 6b6:	13 06       	cpc	r1, r19
 6b8:	e4 07       	cpc	r30, r20
 6ba:	f5 07       	cpc	r31, r21
 6bc:	98 f0       	brcs	.+38     	; 0x6e4 <__fp_cmp+0x46>
 6be:	62 1b       	sub	r22, r18
 6c0:	73 0b       	sbc	r23, r19
 6c2:	84 0b       	sbc	r24, r20
 6c4:	95 0b       	sbc	r25, r21
 6c6:	39 f4       	brne	.+14     	; 0x6d6 <__fp_cmp+0x38>
 6c8:	0a 26       	eor	r0, r26
 6ca:	61 f0       	breq	.+24     	; 0x6e4 <__fp_cmp+0x46>
 6cc:	23 2b       	or	r18, r19
 6ce:	24 2b       	or	r18, r20
 6d0:	25 2b       	or	r18, r21
 6d2:	21 f4       	brne	.+8      	; 0x6dc <__fp_cmp+0x3e>
 6d4:	08 95       	ret
 6d6:	0a 26       	eor	r0, r26
 6d8:	09 f4       	brne	.+2      	; 0x6dc <__fp_cmp+0x3e>
 6da:	a1 40       	sbci	r26, 0x01	; 1
 6dc:	a6 95       	lsr	r26
 6de:	8f ef       	ldi	r24, 0xFF	; 255
 6e0:	81 1d       	adc	r24, r1
 6e2:	81 1d       	adc	r24, r1
 6e4:	08 95       	ret

000006e6 <_exit>:
 6e6:	f8 94       	cli

000006e8 <__stop_program>:
 6e8:	ff cf       	rjmp	.-2      	; 0x6e8 <__stop_program>

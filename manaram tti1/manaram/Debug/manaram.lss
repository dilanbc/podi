
manaram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000380  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800060  00800060  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b3  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000615  00000000  00000000  00000c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c2  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b9  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fe  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 38       	cpi	r26, 0x8F	; 143
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

void outputcontrol(uint8_t pin, bool state);

int main(void)
{
    DDRA=0b11111111;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRC=0b11111111;
  80:	84 bb       	out	0x14, r24	; 20
	
	PORTD|=(0b11<<6); //pull up
  82:	82 b3       	in	r24, 0x12	; 18
  84:	80 6c       	ori	r24, 0xC0	; 192
  86:	82 bb       	out	0x12, r24	; 18
	
	/*0.5 timer init part*/
	TCCR1B|=(1<<WGM12)|(1<<CS12);
  88:	8e b5       	in	r24, 0x2e	; 46
  8a:	8c 60       	ori	r24, 0x0C	; 12
  8c:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0;
  8e:	1d bc       	out	0x2d, r1	; 45
  90:	1c bc       	out	0x2c, r1	; 44
	OCR1A=15625;
  92:	89 e0       	ldi	r24, 0x09	; 9
  94:	9d e3       	ldi	r25, 0x3D	; 61
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
	TIMSK|=(1<<OCIE1A);
  9a:	89 b7       	in	r24, 0x39	; 57
  9c:	80 61       	ori	r24, 0x10	; 16
  9e:	89 bf       	out	0x39, r24	; 57
	
	/*0.02timer init part*/
	TCCR0|=(1<<WGM01)|(1<<CS02)|(1<<CS00);
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	8d 60       	ori	r24, 0x0D	; 13
  a4:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
  a6:	12 be       	out	0x32, r1	; 50
	OCR0=156;
  a8:	8c e9       	ldi	r24, 0x9C	; 156
  aa:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=(1<<OCIE0);
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	89 bf       	out	0x39, r24	; 57
	
	
	sei();
  b2:	78 94       	sei
    while (1) 
    {
		/*stateRead part*/
		stateRead=(~((PIND<<8)|PINB))&0b11111111111111;
  b4:	80 b3       	in	r24, 0x10	; 16
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	98 2f       	mov	r25, r24
  ba:	88 27       	eor	r24, r24
  bc:	26 b3       	in	r18, 0x16	; 22
  be:	82 2b       	or	r24, r18
  c0:	80 95       	com	r24
  c2:	90 95       	com	r25
  c4:	9f 73       	andi	r25, 0x3F	; 63
  c6:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <stateRead+0x1>
  ca:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <stateRead>
	
		
		if (stateRead&0b11111111111111)//input pin
  ce:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <stateRead>
  d2:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <stateRead+0x1>
  d6:	9f 73       	andi	r25, 0x3F	; 63
  d8:	89 2b       	or	r24, r25
  da:	51 f0       	breq	.+20     	; 0xf0 <main+0x74>
			{timerState=stateRead&0b11111111111111;
  dc:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <stateRead>
  e0:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <stateRead+0x1>
  e4:	9f 73       	andi	r25, 0x3F	; 63
  e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <timerState+0x1>
  ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <timerState>
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <main+0x7c>

			} 
			else//no pin 
			{timerState=0;
  f0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <timerState+0x1>
  f4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <timerState>
				
			}
		////////////////////////////
		if (!(PIND&(1<<6)))//rst
  f8:	86 99       	sbic	0x10, 6	; 16
  fa:	0f c0       	rjmp	.+30     	; 0x11a <main+0x9e>
  fc:	20 e0       	ldi	r18, 0x00	; 0
		{
			for(uint8_t i=0;i<14;i++){
  fe:	2e 30       	cpi	r18, 0x0E	; 14
 100:	60 f4       	brcc	.+24     	; 0x11a <main+0x9e>
				actfinish[i]=timerfinish[i];
 102:	82 2f       	mov	r24, r18
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	e4 58       	subi	r30, 0x84	; 132
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	30 81       	ld	r19, Z
 10e:	fc 01       	movw	r30, r24
 110:	e2 59       	subi	r30, 0x92	; 146
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	30 83       	st	Z, r19
				
			}
		////////////////////////////
		if (!(PIND&(1<<6)))//rst
		{
			for(uint8_t i=0;i<14;i++){
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	f2 cf       	rjmp	.-28     	; 0xfe <main+0x82>
				actfinish[i]=timerfinish[i];
			}
		}
		if (!(PIND&(1<<7)))//lamp test
 11a:	87 99       	sbic	0x10, 7	; 16
 11c:	05 c0       	rjmp	.+10     	; 0x128 <main+0xac>
		{
			PORTA=0b11111111;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8b bb       	out	0x1b, r24	; 27
			PORTC|=0b111111<<2;
 122:	85 b3       	in	r24, 0x15	; 21
 124:	8c 6f       	ori	r24, 0xFC	; 252
 126:	85 bb       	out	0x15, r24	; 21
		}
		
		/*array eqvel check*/
		uint8_t spkcount=0;
		uint8_t spk=0;
		for(uint8_t i=0;i<14;i++){
 128:	20 e0       	ldi	r18, 0x00	; 0
			PORTC|=0b111111<<2;
		}
		
		/*array eqvel check*/
		uint8_t spkcount=0;
		uint8_t spk=0;
 12a:	30 e0       	ldi	r19, 0x00	; 0
			PORTA=0b11111111;
			PORTC|=0b111111<<2;
		}
		
		/*array eqvel check*/
		uint8_t spkcount=0;
 12c:	50 e0       	ldi	r21, 0x00	; 0
		uint8_t spk=0;
		for(uint8_t i=0;i<14;i++){
 12e:	2e 30       	cpi	r18, 0x0E	; 14
 130:	b0 f4       	brcc	.+44     	; 0x15e <main+0xe2>
		if (!(timerfinish[i]))
 132:	82 2f       	mov	r24, r18
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	e4 58       	subi	r30, 0x84	; 132
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	40 81       	ld	r20, Z
 13e:	41 11       	cpse	r20, r1
 140:	01 c0       	rjmp	.+2      	; 0x144 <main+0xc8>
		{spkcount++;
 142:	5f 5f       	subi	r21, 0xFF	; 255
		}
		if (timerfinish[i]==actfinish[i])
 144:	fc 01       	movw	r30, r24
 146:	e4 58       	subi	r30, 0x84	; 132
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	40 81       	ld	r20, Z
 14c:	fc 01       	movw	r30, r24
 14e:	e2 59       	subi	r30, 0x92	; 146
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	80 81       	ld	r24, Z
 154:	48 13       	cpse	r20, r24
 156:	03 c0       	rjmp	.+6      	; 0x15e <main+0xe2>
		{spk++;
 158:	3f 5f       	subi	r19, 0xFF	; 255
		}
		
		/*array eqvel check*/
		uint8_t spkcount=0;
		uint8_t spk=0;
		for(uint8_t i=0;i<14;i++){
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	e8 cf       	rjmp	.-48     	; 0x12e <main+0xb2>
		else
		{break;
		}
		}
		
		if ((spkcount!=14)&&(spk<14))
 15e:	5e 30       	cpi	r21, 0x0E	; 14
 160:	49 f0       	breq	.+18     	; 0x174 <main+0xf8>
 162:	3e 30       	cpi	r19, 0x0E	; 14
 164:	38 f4       	brcc	.+14     	; 0x174 <main+0xf8>
		{PORTC|=(1<<1);PORTC|=(1<<0);
 166:	85 b3       	in	r24, 0x15	; 21
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	85 b3       	in	r24, 0x15	; 21
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	85 bb       	out	0x15, r24	; 21
 172:	a0 cf       	rjmp	.-192    	; 0xb4 <main+0x38>
		} 
		else
		{PORTC&=~(1<<1);PORTC&=~(1<<0);
 174:	85 b3       	in	r24, 0x15	; 21
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	85 bb       	out	0x15, r24	; 21
 17a:	85 b3       	in	r24, 0x15	; 21
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	85 bb       	out	0x15, r24	; 21
 180:	99 cf       	rjmp	.-206    	; 0xb4 <main+0x38>

00000182 <__vector_19>:
	{outputcontrol(i,0);
	}
}

}
ISR(TIMER0_COMP_vect){
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	TCNT0=0;
 1a0:	12 be       	out	0x32, r1	; 50
	for(uint8_t i=0;i<14;i++){
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	2e 30       	cpi	r18, 0x0E	; 14
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <__vector_19+0x28>
 1a8:	4c c0       	rjmp	.+152    	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
		if (timerState&(1<<i))//logic active
 1aa:	82 2f       	mov	r24, r18
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	02 2e       	mov	r0, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__vector_19+0x38>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <__vector_19+0x34>
 1be:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <timerState>
 1c2:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <timerState+0x1>
 1c6:	46 23       	and	r20, r22
 1c8:	57 23       	and	r21, r23
 1ca:	45 2b       	or	r20, r21
 1cc:	99 f0       	breq	.+38     	; 0x1f4 <__vector_19+0x72>
		{	if (timerVal[i]<startDelay)//timerCounting
 1ce:	fc 01       	movw	r30, r24
 1d0:	e0 5a       	subi	r30, 0xA0	; 160
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	30 81       	ld	r19, Z
 1d6:	34 36       	cpi	r19, 0x64	; 100
 1d8:	38 f4       	brcc	.+14     	; 0x1e8 <__vector_19+0x66>
		{timerVal[i]++;
 1da:	fc 01       	movw	r30, r24
 1dc:	e0 5a       	subi	r30, 0xA0	; 160
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	90 81       	ld	r25, Z
 1e2:	9f 5f       	subi	r25, 0xFF	; 255
 1e4:	90 83       	st	Z, r25
 1e6:	2b c0       	rjmp	.+86     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
		} 
		else
		{timerfinish[i]=1;//finished
 1e8:	fc 01       	movw	r30, r24
 1ea:	e4 58       	subi	r30, 0x84	; 132
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	31 e0       	ldi	r19, 0x01	; 1
 1f0:	30 83       	st	Z, r19
 1f2:	25 c0       	rjmp	.+74     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
		}
			
		}
		else{//logic de active
			
			if (timerfinish[i])//pre acive
 1f4:	fc 01       	movw	r30, r24
 1f6:	e4 58       	subi	r30, 0x84	; 132
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	30 81       	ld	r19, Z
 1fc:	33 23       	and	r19, r19
 1fe:	99 f0       	breq	.+38     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
			{if (actfinish[i])//check act done
 200:	fc 01       	movw	r30, r24
 202:	e2 59       	subi	r30, 0x92	; 146
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	30 81       	ld	r19, Z
 208:	33 23       	and	r19, r19
 20a:	c9 f0       	breq	.+50     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
			{timerfinish[i]=0;
 20c:	fc 01       	movw	r30, r24
 20e:	e4 58       	subi	r30, 0x84	; 132
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	10 82       	st	Z, r1
			timerVal[i]=0;
 214:	fc 01       	movw	r30, r24
 216:	e0 5a       	subi	r30, 0xA0	; 160
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	10 82       	st	Z, r1
			actfinish[i]=0;
 21c:	fc 01       	movw	r30, r24
 21e:	e2 59       	subi	r30, 0x92	; 146
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	10 82       	st	Z, r1
 224:	0c c0       	rjmp	.+24     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
			else
			{
			}
			} 
			else
			{timerfinish[i]=0;
 226:	fc 01       	movw	r30, r24
 228:	e4 58       	subi	r30, 0x84	; 132
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	10 82       	st	Z, r1
			timerVal[i]=0;
 22e:	fc 01       	movw	r30, r24
 230:	e0 5a       	subi	r30, 0xA0	; 160
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	10 82       	st	Z, r1
			actfinish[i]=0;
 236:	fc 01       	movw	r30, r24
 238:	e2 59       	subi	r30, 0x92	; 146
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	10 82       	st	Z, r1
}

}
ISR(TIMER0_COMP_vect){
	TCNT0=0;
	for(uint8_t i=0;i<14;i++){
 23e:	2f 5f       	subi	r18, 0xFF	; 255
 240:	b1 cf       	rjmp	.-158    	; 0x1a4 <__vector_19+0x22>
			
		}
	}
	

}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <_Z13outputcontrolhb>:

void outputcontrol(uint8_t pin, bool state)
{
	if (state)
 260:	66 23       	and	r22, r22
 262:	f1 f0       	breq	.+60     	; 0x2a0 <_Z13outputcontrolhb+0x40>
	{
		if (pin<8)
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	68 f4       	brcc	.+26     	; 0x282 <_Z13outputcontrolhb+0x22>
		{PORTA|=(1<<pin);
 268:	4b b3       	in	r20, 0x1b	; 27
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	b9 01       	movw	r22, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <_Z13outputcontrolhb+0x16>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	8a 95       	dec	r24
 278:	e2 f7       	brpl	.-8      	; 0x272 <_Z13outputcontrolhb+0x12>
 27a:	cb 01       	movw	r24, r22
 27c:	84 2b       	or	r24, r20
 27e:	8b bb       	out	0x1b, r24	; 27
 280:	08 95       	ret
		} 
		else
		{PORTC|=(1<<(15-pin));
 282:	45 b3       	in	r20, 0x15	; 21
 284:	2f e0       	ldi	r18, 0x0F	; 15
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	28 1b       	sub	r18, r24
 28a:	31 09       	sbc	r19, r1
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <_Z13outputcontrolhb+0x36>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	2a 95       	dec	r18
 298:	e2 f7       	brpl	.-8      	; 0x292 <_Z13outputcontrolhb+0x32>
 29a:	84 2b       	or	r24, r20
 29c:	85 bb       	out	0x15, r24	; 21
 29e:	08 95       	ret
		}
	} 
	else
	{
		if (pin<8)
 2a0:	88 30       	cpi	r24, 0x08	; 8
 2a2:	70 f4       	brcc	.+28     	; 0x2c0 <_Z13outputcontrolhb+0x60>
		{PORTA&=~(1<<pin);
 2a4:	4b b3       	in	r20, 0x1b	; 27
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	b9 01       	movw	r22, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <_Z13outputcontrolhb+0x52>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	8a 95       	dec	r24
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <_Z13outputcontrolhb+0x4e>
 2b6:	cb 01       	movw	r24, r22
 2b8:	80 95       	com	r24
 2ba:	84 23       	and	r24, r20
 2bc:	8b bb       	out	0x1b, r24	; 27
 2be:	08 95       	ret
		}
		else
		{PORTC&=~(1<<(15-pin));
 2c0:	25 b3       	in	r18, 0x15	; 21
 2c2:	4f e0       	ldi	r20, 0x0F	; 15
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	48 1b       	sub	r20, r24
 2c8:	51 09       	sbc	r21, r1
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <_Z13outputcontrolhb+0x74>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	4a 95       	dec	r20
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <_Z13outputcontrolhb+0x70>
 2d8:	80 95       	com	r24
 2da:	82 23       	and	r24, r18
 2dc:	85 bb       	out	0x15, r24	; 21
 2de:	08 95       	ret

000002e0 <__vector_6>:
		{PORTC&=~(1<<1);PORTC&=~(1<<0);
		}
		/*array eqvel check*/
    }
}
ISR(TIMER1_COMPA_vect){//blink
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	cf 93       	push	r28
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
TCNT1=0;
 304:	1d bc       	out	0x2d, r1	; 45
 306:	1c bc       	out	0x2c, r1	; 44
blinkstate=!blinkstate;
 308:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <blinkstate>
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	89 27       	eor	r24, r25
 310:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <blinkstate>
for(uint8_t i=0;i<14;i++){
 314:	c0 e0       	ldi	r28, 0x00	; 0
 316:	ce 30       	cpi	r28, 0x0E	; 14
 318:	f8 f4       	brcc	.+62     	; 0x358 <__vector_6+0x78>
	if (timerfinish[i])
 31a:	8c 2f       	mov	r24, r28
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	fc 01       	movw	r30, r24
 320:	e4 58       	subi	r30, 0x84	; 132
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	20 81       	ld	r18, Z
 326:	22 23       	and	r18, r18
 328:	89 f0       	breq	.+34     	; 0x34c <__vector_6+0x6c>
	{
		if (actfinish[i])
 32a:	fc 01       	movw	r30, r24
 32c:	e2 59       	subi	r30, 0x92	; 146
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	80 81       	ld	r24, Z
 332:	88 23       	and	r24, r24
 334:	29 f0       	breq	.+10     	; 0x340 <__vector_6+0x60>
		{outputcontrol(i,1);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	8c 2f       	mov	r24, r28
 33a:	0e 94 30 01 	call	0x260	; 0x260 <_Z13outputcontrolhb>
 33e:	0a c0       	rjmp	.+20     	; 0x354 <__vector_6+0x74>
		} 
		else
		{outputcontrol(i,blinkstate);
 340:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <blinkstate>
 344:	8c 2f       	mov	r24, r28
 346:	0e 94 30 01 	call	0x260	; 0x260 <_Z13outputcontrolhb>
 34a:	04 c0       	rjmp	.+8      	; 0x354 <__vector_6+0x74>
		}
	} 
	else
	{outputcontrol(i,0);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	8c 2f       	mov	r24, r28
 350:	0e 94 30 01 	call	0x260	; 0x260 <_Z13outputcontrolhb>
    }
}
ISR(TIMER1_COMPA_vect){//blink
TCNT1=0;
blinkstate=!blinkstate;
for(uint8_t i=0;i<14;i++){
 354:	cf 5f       	subi	r28, 0xFF	; 255
 356:	df cf       	rjmp	.-66     	; 0x316 <__vector_6+0x36>
	else
	{outputcontrol(i,0);
	}
}

}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	cf 91       	pop	r28
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>

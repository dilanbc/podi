
tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074f  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061c  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  00000fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004e  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z7TWIInitv>:
uint8_t TWIReadNACK(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	return TWDR;
}
  7c:	11 b8       	out	0x01, r1	; 1
  7e:	88 e4       	ldi	r24, 0x48	; 72
  80:	80 b9       	out	0x00, r24	; 0
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	86 bf       	out	0x36, r24	; 54
  86:	08 95       	ret

00000088 <_Z8TWIStartv>:
  88:	84 ea       	ldi	r24, 0xA4	; 164
  8a:	86 bf       	out	0x36, r24	; 54
  8c:	06 b6       	in	r0, 0x36	; 54
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <_Z8TWIStartv+0x4>
  92:	08 95       	ret

00000094 <_Z7TWIStopv>:
  94:	84 e9       	ldi	r24, 0x94	; 148
  96:	86 bf       	out	0x36, r24	; 54
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	04 fc       	sbrc	r0, 4
  9c:	fd cf       	rjmp	.-6      	; 0x98 <_Z7TWIStopv+0x4>
  9e:	08 95       	ret

000000a0 <_Z13TWIWriteAddrshh>:
  a0:	86 2b       	or	r24, r22
  a2:	83 b9       	out	0x03, r24	; 3
  a4:	84 e8       	ldi	r24, 0x84	; 132
  a6:	86 bf       	out	0x36, r24	; 54
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <_Z13TWIWriteAddrshh+0x8>
  ae:	81 b1       	in	r24, 0x01	; 1
  b0:	88 7f       	andi	r24, 0xF8	; 248
  b2:	08 95       	ret

000000b4 <_Z12TWIWriteDatah>:
  b4:	83 b9       	out	0x03, r24	; 3
  b6:	84 e8       	ldi	r24, 0x84	; 132
  b8:	86 bf       	out	0x36, r24	; 54
  ba:	06 b6       	in	r0, 0x36	; 54
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <_Z12TWIWriteDatah+0x6>
  c0:	81 b1       	in	r24, 0x01	; 1
  c2:	88 7f       	andi	r24, 0xF8	; 248
  c4:	08 95       	ret

000000c6 <main>:


int main(void)
{
	
	TWIInit();
  c6:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z7TWIInitv>
	while(1){
		
		TWIStart();
  ca:	0e 94 44 00 	call	0x88	; 0x88 <_Z8TWIStartv>
		TWIWriteAddrs(0x20);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z13TWIWriteAddrshh>
		TWIWriteData(data);
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z12TWIWriteDatah>
		TWIStop();
  de:	0e 94 4a 00 	call	0x94	; 0x94 <_Z7TWIStopv>
		data++;		
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	84 e3       	ldi	r24, 0x34	; 52
  f0:	9c e0       	ldi	r25, 0x0C	; 12
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x2c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x36>
  fc:	00 00       	nop
  fe:	e5 cf       	rjmp	.-54     	; 0xca <main+0x4>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>

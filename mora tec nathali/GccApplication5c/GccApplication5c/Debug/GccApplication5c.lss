
GccApplication5c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000025e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800072  00800072  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8f  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000694  00000000  00000000  00000e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000460  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040f  00000000  00000000  00001e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000226a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  8a:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LcdBacklight>:
		LcdChar(str[i]);
	}
}
void LcdCursor(uint8_t Cursor){
	if (Cursor==0)
	{LcdCommand(0xC);
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	21 f4       	brne	.+8      	; 0x9e <LcdBacklight+0xc>
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  9c:	08 95       	ret
  9e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	08 95       	ret

000000a4 <Lcd4bitdata>:
  a4:	38 2f       	mov	r19, r24
  a6:	36 2b       	or	r19, r22
  a8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ac:	23 2b       	or	r18, r19
  ae:	28 bb       	out	0x18, r18	; 24
  b0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	93 2b       	or	r25, r19
  b6:	94 60       	ori	r25, 0x04	; 4
  b8:	98 bb       	out	0x18, r25	; 24
  ba:	ef e8       	ldi	r30, 0x8F	; 143
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <Lcd4bitdata+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <Lcd4bitdata+0x20>
  c4:	00 00       	nop
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	68 2b       	or	r22, r24
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	68 2b       	or	r22, r24
  d0:	68 bb       	out	0x18, r22	; 24
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <Lcd4bitdata+0x32>
  da:	00 c0       	rjmp	.+0      	; 0xdc <Lcd4bitdata+0x38>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <LcdCommand>:
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	0e 94 52 00 	call	0xa4	; 0xa4 <Lcd4bitdata>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8c 2f       	mov	r24, r28
  f0:	82 95       	swap	r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	0e 94 52 00 	call	0xa4	; 0xa4 <Lcd4bitdata>
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <LcdInit>:
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 49 00 	call	0x92	; 0x92 <LcdBacklight>
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9c e9       	ldi	r25, 0x9C	; 156
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LcdInit+0xa>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LcdInit+0x10>
 10c:	00 00       	nop
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	87 bb       	out	0x17, r24	; 23
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
 118:	88 e2       	ldi	r24, 0x28	; 40
 11a:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
 130:	08 95       	ret

00000132 <LcdChar>:
	Lcd4bitdata(command&0xF0,0);
	Lcd4bitdata((command<<4)&0xF0,0);
	
}

void LcdChar(uint8_t Lcdcharval){
 132:	cf 93       	push	r28
 134:	c8 2f       	mov	r28, r24
	Lcd4bitdata(Lcdcharval&0xF0,1);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	0e 94 52 00 	call	0xa4	; 0xa4 <Lcd4bitdata>
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	8c 2f       	mov	r24, r28
 142:	82 95       	swap	r24
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	0e 94 52 00 	call	0xa4	; 0xa4 <Lcd4bitdata>
	
}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <LcdString>:
	LcdString(str);
	
}

void LcdString (char *str)		/* Send string to LCD function */
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	d0 e0       	ldi	r29, 0x00	; 0
 15c:	03 c0       	rjmp	.+6      	; 0x164 <LcdString+0x16>
	{
		LcdChar(str[i]);
 15e:	0e 94 99 00 	call	0x132	; 0x132 <LcdChar>
}

void LcdString (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 162:	21 96       	adiw	r28, 0x01	; 1
 164:	f8 01       	movw	r30, r16
 166:	ec 0f       	add	r30, r28
 168:	fd 1f       	adc	r31, r29
 16a:	80 81       	ld	r24, Z
 16c:	81 11       	cpse	r24, r1
 16e:	f7 cf       	rjmp	.-18     	; 0x15e <LcdString+0x10>
	{
		LcdChar(str[i]);
	}
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <LcdSetCursor>:
	Lcd4bitdata(Lcdcharval&0xF0,1);
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
	
}

void LcdSetCursor(uint8_t xaxis, uint8_t yaxis,char*str){
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ea 01       	movw	r28, r20
	uint8_t tempcommand;
	switch(yaxis){
 180:	61 30       	cpi	r22, 0x01	; 1
 182:	31 f0       	breq	.+12     	; 0x190 <LcdSetCursor+0x16>
 184:	58 f0       	brcs	.+22     	; 0x19c <LcdSetCursor+0x22>
 186:	62 30       	cpi	r22, 0x02	; 2
 188:	29 f0       	breq	.+10     	; 0x194 <LcdSetCursor+0x1a>
 18a:	63 30       	cpi	r22, 0x03	; 3
 18c:	29 f0       	breq	.+10     	; 0x198 <LcdSetCursor+0x1e>
 18e:	07 c0       	rjmp	.+14     	; 0x19e <LcdSetCursor+0x24>
		case 0:tempcommand=0x80;break;  //yaxis =0
		case 1:tempcommand=0xC0;break;
 190:	90 ec       	ldi	r25, 0xC0	; 192
 192:	05 c0       	rjmp	.+10     	; 0x19e <LcdSetCursor+0x24>
		case 2:tempcommand=0x94;break;
 194:	94 e9       	ldi	r25, 0x94	; 148
 196:	03 c0       	rjmp	.+6      	; 0x19e <LcdSetCursor+0x24>
		case 3:tempcommand=0xd4;break;		
 198:	94 ed       	ldi	r25, 0xD4	; 212
 19a:	01 c0       	rjmp	.+2      	; 0x19e <LcdSetCursor+0x24>
}

void LcdSetCursor(uint8_t xaxis, uint8_t yaxis,char*str){
	uint8_t tempcommand;
	switch(yaxis){
		case 0:tempcommand=0x80;break;  //yaxis =0
 19c:	90 e8       	ldi	r25, 0x80	; 128
		case 1:tempcommand=0xC0;break;
		case 2:tempcommand=0x94;break;
		case 3:tempcommand=0xd4;break;		
	}
	LcdCommand(tempcommand|(0x0F&xaxis));
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	89 2b       	or	r24, r25
 1a2:	0e 94 70 00 	call	0xe0	; 0xe0 <LcdCommand>
	LcdString(str);
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 a7 00 	call	0x14e	; 0x14e <LcdString>
	
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <getkeyNum>:
		LcdChar(keyout+48);
	}
}

uint8_t getkeyNum(){
	DDRA=0b00001111;
 1b2:	8f e0       	ldi	r24, 0x0F	; 15
 1b4:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b11110000;
 1b6:	80 ef       	ldi	r24, 0xF0	; 240
 1b8:	8b bb       	out	0x1b, r24	; 27
	uint8_t getx;
	uint8_t gety;
	while(1){
		
		uint8_t pin=(~(PINA|0x0F));
 1ba:	89 b3       	in	r24, 0x19	; 25
 1bc:	8f 60       	ori	r24, 0x0F	; 15
 1be:	80 95       	com	r24
		if (pin)
 1c0:	e1 f3       	breq	.-8      	; 0x1ba <getkeyNum+0x8>
		{
			
			
			switch(pin){
 1c2:	80 32       	cpi	r24, 0x20	; 32
 1c4:	49 f0       	breq	.+18     	; 0x1d8 <getkeyNum+0x26>
 1c6:	18 f4       	brcc	.+6      	; 0x1ce <getkeyNum+0x1c>
 1c8:	80 31       	cpi	r24, 0x10	; 16
 1ca:	61 f0       	breq	.+24     	; 0x1e4 <getkeyNum+0x32>
 1cc:	0c c0       	rjmp	.+24     	; 0x1e6 <getkeyNum+0x34>
 1ce:	80 34       	cpi	r24, 0x40	; 64
 1d0:	29 f0       	breq	.+10     	; 0x1dc <getkeyNum+0x2a>
 1d2:	80 38       	cpi	r24, 0x80	; 128
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <getkeyNum+0x2e>
 1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <getkeyNum+0x34>
				
				
				case (1<<4) :getx=0; break;
				case (1<<5) :getx=1;break;
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <getkeyNum+0x34>
				case (1<<6) :getx=2;break;
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <getkeyNum+0x34>
				case (1<<7) :getx=3;break;
 1e0:	93 e0       	ldi	r25, 0x03	; 3
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <getkeyNum+0x34>
			
			
			switch(pin){
				
				
				case (1<<4) :getx=0; break;
 1e4:	90 e0       	ldi	r25, 0x00	; 0
				case (1<<6) :getx=2;break;
				case (1<<7) :getx=3;break;
				
				
			} //switch
			DDRA=0b0;
 1e6:	1a ba       	out	0x1a, r1	; 26
			PORTA=0b0;
 1e8:	1b ba       	out	0x1b, r1	; 27
			
			DDRA=0b11110000;
 1ea:	80 ef       	ldi	r24, 0xF0	; 240
 1ec:	8a bb       	out	0x1a, r24	; 26
			PORTA=0b00001111;
 1ee:	8f e0       	ldi	r24, 0x0F	; 15
 1f0:	8b bb       	out	0x1b, r24	; 27
			
			pin=~(PINA|0xF0);
 1f2:	89 b3       	in	r24, 0x19	; 25
 1f4:	80 6f       	ori	r24, 0xF0	; 240
 1f6:	80 95       	com	r24
			
			switch(pin){
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	49 f0       	breq	.+18     	; 0x20e <getkeyNum+0x5c>
 1fc:	18 f4       	brcc	.+6      	; 0x204 <getkeyNum+0x52>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	61 f0       	breq	.+24     	; 0x21a <getkeyNum+0x68>
 202:	0c c0       	rjmp	.+24     	; 0x21c <getkeyNum+0x6a>
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	29 f0       	breq	.+10     	; 0x212 <getkeyNum+0x60>
 208:	88 30       	cpi	r24, 0x08	; 8
 20a:	29 f0       	breq	.+10     	; 0x216 <getkeyNum+0x64>
 20c:	07 c0       	rjmp	.+14     	; 0x21c <getkeyNum+0x6a>
				case (1<<0) :gety=0;break;
				case (1<<1) :gety=1;break;
 20e:	e1 e0       	ldi	r30, 0x01	; 1
 210:	05 c0       	rjmp	.+10     	; 0x21c <getkeyNum+0x6a>
				case (1<<2) :gety=2;break;
 212:	e2 e0       	ldi	r30, 0x02	; 2
 214:	03 c0       	rjmp	.+6      	; 0x21c <getkeyNum+0x6a>
				case (1<<3) :gety=3;break;
 216:	e3 e0       	ldi	r30, 0x03	; 3
 218:	01 c0       	rjmp	.+2      	; 0x21c <getkeyNum+0x6a>
			PORTA=0b00001111;
			
			pin=~(PINA|0xF0);
			
			switch(pin){
				case (1<<0) :gety=0;break;
 21a:	e0 e0       	ldi	r30, 0x00	; 0
				case (1<<2) :gety=2;break;
				case (1<<3) :gety=3;break;
				
			} //switch
			
			DDRA=0b00001111;
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	8a bb       	out	0x1a, r24	; 26
			PORTA=0b11110000;
 220:	80 ef       	ldi	r24, 0xF0	; 240
 222:	8b bb       	out	0x1b, r24	; 27
			
			
			return kaypad[gety][getx];
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	ee 59       	subi	r30, 0x9E	; 158
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	e9 0f       	add	r30, r25
 234:	f1 1d       	adc	r31, r1
		}//if
		
		
		
	}//while 1
}
 236:	80 81       	ld	r24, Z
 238:	08 95       	ret

0000023a <main>:
char lcddata[20];
uint8_t keyout;

int main(void)
{
	LcdInit();
 23a:	0e 94 7e 00 	call	0xfc	; 0xfc <LcdInit>
	LcdSetCursor(0,0,"");
 23e:	41 e6       	ldi	r20, 0x61	; 97
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdSetCursor>
	while (1)
	{
		keyout=getkeyNum();
 24a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <getkeyNum>
 24e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
		//	sprintf(lcddata,"%02u",keyout);
		LcdChar(keyout+48);
 252:	80 5d       	subi	r24, 0xD0	; 208
 254:	0e 94 99 00 	call	0x132	; 0x132 <LcdChar>
 258:	f8 cf       	rjmp	.-16     	; 0x24a <main+0x10>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>

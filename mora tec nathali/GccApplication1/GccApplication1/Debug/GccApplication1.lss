
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006e  0080006e  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9c  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041c  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000370  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 82 00 	call	0x104	; 0x104 <main>
  8a:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z10USART_Initj>:
}

void USART_TxNumber(int32_t number,uint8_t dtype=10){
	
	itoa(number,num,dtype);
	USART_TxString(num);
  92:	9c 01       	movw	r18, r24
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	60 e2       	ldi	r22, 0x20	; 32
  9a:	71 ea       	ldi	r23, 0xA1	; 161
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 13 01 	call	0x226	; 0x226 <__divmodsi4>
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	31 09       	sbc	r19, r1
  a8:	30 bd       	out	0x20, r19	; 32
  aa:	29 b9       	out	0x09, r18	; 9
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	8e e8       	ldi	r24, 0x8E	; 142
  b2:	80 bd       	out	0x20, r24	; 32
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <_Z14USART_Transmith>:
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <_Z14USART_Transmith>
  bc:	8c b9       	out	0x0c, r24	; 12
  be:	08 95       	ret

000000c0 <_Z16USART_TxStringlnPc>:
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
  c6:	88 81       	ld	r24, Y
  c8:	88 23       	and	r24, r24
  ca:	21 f0       	breq	.+8      	; 0xd4 <_Z16USART_TxStringlnPc+0x14>
  cc:	21 96       	adiw	r28, 0x01	; 1
  ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z14USART_Transmith>
  d2:	f9 cf       	rjmp	.-14     	; 0xc6 <_Z16USART_TxStringlnPc+0x6>
  d4:	8d e0       	ldi	r24, 0x0D	; 13
  d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z14USART_Transmith>
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z14USART_Transmith>
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <__vector_13>:
	
}



ISR(USART_RXC_vect){//A,B,C,D ???
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
	
 rchar=UDR;
  f2:	8c b1       	in	r24, 0x0c	; 12
  f4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <rchar>
	

	
		
}
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <main>:
volatile uint16_t TimerCal=0;// variable for collect echo data
uint16_t ultraINTL=0;
	
int main(void)
{
    USART_Init(9600);
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	95 e2       	ldi	r25, 0x25	; 37
 108:	0e 94 49 00 	call	0x92	; 0x92 <_Z10USART_Initj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	84 e3       	ldi	r24, 0x34	; 52
 110:	9c e0       	ldi	r25, 0x0C	; 12
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0xe>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x18>
 11c:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT");
 11e:	80 e6       	ldi	r24, 0x60	; 96
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z16USART_TxStringlnPc>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	84 e3       	ldi	r24, 0x34	; 52
 12a:	9c e0       	ldi	r25, 0x0C	; 12
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x28>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x32>
 136:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT");
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z16USART_TxStringlnPc>
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	84 e3       	ldi	r24, 0x34	; 52
 144:	9c e0       	ldi	r25, 0x0C	; 12
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x42>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x4c>
 150:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT+CMGF=1");
 152:	83 e6       	ldi	r24, 0x63	; 99
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z16USART_TxStringlnPc>
	
	/*Ultrasonic Timer Part*/
	DDRA|=(1<<0); //D4 as output
 15a:	8a b3       	in	r24, 0x1a	; 26
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	8a bb       	out	0x1a, r24	; 26
	TCCR0|=(1<<WGM01);//Enable Compare match mode
 160:	83 b7       	in	r24, 0x33	; 51
 162:	88 60       	ori	r24, 0x08	; 8
 164:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(1<<CS11);//Start timer  prescaler =8
 166:	83 b7       	in	r24, 0x33	; 51
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
 16c:	12 be       	out	0x32, r1	; 50
	OCR0=10;
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	8c bf       	out	0x3c, r24	; 60
	/*register value= time*(clock speed/prescale)
	register value=0.000001*(8000000/1)
	register value=10*/
	TIMSK|=(1<<OCIE0);//enable timer Compare inturrept
 172:	89 b7       	in	r24, 0x39	; 57
 174:	82 60       	ori	r24, 0x02	; 2
 176:	89 bf       	out	0x39, r24	; 57
	sei();
 178:	78 94       	sei
	
	DDRB|=(1<<0);
 17a:	87 b3       	in	r24, 0x17	; 23
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		
		PORTA&=~(1<<0);//TRIG pin low
 180:	8b b3       	in	r24, 0x1b	; 27
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	25 e8       	ldi	r18, 0x85	; 133
 188:	2a 95       	dec	r18
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x84>
 18c:	00 00       	nop
		_delay_us(50);//wait 50 micro sec
		PORTA|=(1<<0);//TRIG pin high
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	81 60       	ori	r24, 0x01	; 1
 192:	8b bb       	out	0x1b, r24	; 27
 194:	85 e8       	ldi	r24, 0x85	; 133
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x92>
 19a:	00 00       	nop
		_delay_us(50);//wait 50 micro sec
		PORTA&=~(1<<0);////TRIG pin low
 19c:	8b b3       	in	r24, 0x1b	; 27
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	8b bb       	out	0x1b, r24	; 27
		while(!(PINA&(1<<1)))//wait for pulse
 1a2:	c9 99       	sbic	0x19, 1	; 25
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <main+0xac>
		TimerCal=0;//rest timer
 1a6:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <TimerCal+0x1>
 1aa:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <TimerCal>
		PORTA&=~(1<<0);//TRIG pin low
		_delay_us(50);//wait 50 micro sec
		PORTA|=(1<<0);//TRIG pin high
		_delay_us(50);//wait 50 micro sec
		PORTA&=~(1<<0);////TRIG pin low
		while(!(PINA&(1<<1)))//wait for pulse
 1ae:	f9 cf       	rjmp	.-14     	; 0x1a2 <main+0x9e>
		TimerCal=0;//rest timer
		while((PINA&(1<<1)))////wait for pulse down
 1b0:	c9 9b       	sbis	0x19, 1	; 25
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <main+0xc2>
		ultraINTL=TimerCal;//copy timer value
 1b4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <TimerCal>
 1b8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <TimerCal+0x1>
 1bc:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
 1c0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
		PORTA|=(1<<0);//TRIG pin high
		_delay_us(50);//wait 50 micro sec
		PORTA&=~(1<<0);////TRIG pin low
		while(!(PINA&(1<<1)))//wait for pulse
		TimerCal=0;//rest timer
		while((PINA&(1<<1)))////wait for pulse down
 1c4:	f5 cf       	rjmp	.-22     	; 0x1b0 <main+0xac>
		ultraINTL=TimerCal;//copy timer value
		if (ultraINTL>200)
 1c6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 1ca:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 1ce:	89 3c       	cpi	r24, 0xC9	; 201
 1d0:	91 05       	cpc	r25, r1
 1d2:	20 f0       	brcs	.+8      	; 0x1dc <main+0xd8>
		{PORTB|=(1<<0);
 1d4:	88 b3       	in	r24, 0x18	; 24
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <main+0xde>
		} 
		else
		{PORTB&=~(1<<0);
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	8e 7f       	andi	r24, 0xFE	; 254
 1e0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	9f e7       	ldi	r25, 0x7F	; 127
 1e4:	28 e3       	ldi	r18, 0x38	; 56
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	91 50       	subi	r25, 0x01	; 1
 1ea:	20 40       	sbci	r18, 0x00	; 0
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xe4>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xee>
 1f2:	00 00       	nop
 1f4:	c5 cf       	rjmp	.-118    	; 0x180 <main+0x7c>

000001f6 <__vector_10>:
		}
		_delay_ms(50);
    }
}

ISR(TIMER0_COMP_vect){//ultrasonic
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
	TimerCal++;
 204:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <TimerCal>
 208:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <TimerCal+0x1>
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <TimerCal+0x1>
 212:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <TimerCal>
	TCNT0=0;
 216:	12 be       	out	0x32, r1	; 50
	
}
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__divmodsi4>:
 226:	05 2e       	mov	r0, r21
 228:	97 fb       	bst	r25, 7
 22a:	1e f4       	brtc	.+6      	; 0x232 <__divmodsi4+0xc>
 22c:	00 94       	com	r0
 22e:	0e 94 2a 01 	call	0x254	; 0x254 <__negsi2>
 232:	57 fd       	sbrc	r21, 7
 234:	07 d0       	rcall	.+14     	; 0x244 <__divmodsi4_neg2>
 236:	0e 94 32 01 	call	0x264	; 0x264 <__udivmodsi4>
 23a:	07 fc       	sbrc	r0, 7
 23c:	03 d0       	rcall	.+6      	; 0x244 <__divmodsi4_neg2>
 23e:	4e f4       	brtc	.+18     	; 0x252 <__divmodsi4_exit>
 240:	0c 94 2a 01 	jmp	0x254	; 0x254 <__negsi2>

00000244 <__divmodsi4_neg2>:
 244:	50 95       	com	r21
 246:	40 95       	com	r20
 248:	30 95       	com	r19
 24a:	21 95       	neg	r18
 24c:	3f 4f       	sbci	r19, 0xFF	; 255
 24e:	4f 4f       	sbci	r20, 0xFF	; 255
 250:	5f 4f       	sbci	r21, 0xFF	; 255

00000252 <__divmodsi4_exit>:
 252:	08 95       	ret

00000254 <__negsi2>:
 254:	90 95       	com	r25
 256:	80 95       	com	r24
 258:	70 95       	com	r23
 25a:	61 95       	neg	r22
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	8f 4f       	sbci	r24, 0xFF	; 255
 260:	9f 4f       	sbci	r25, 0xFF	; 255
 262:	08 95       	ret

00000264 <__udivmodsi4>:
 264:	a1 e2       	ldi	r26, 0x21	; 33
 266:	1a 2e       	mov	r1, r26
 268:	aa 1b       	sub	r26, r26
 26a:	bb 1b       	sub	r27, r27
 26c:	fd 01       	movw	r30, r26
 26e:	0d c0       	rjmp	.+26     	; 0x28a <__udivmodsi4_ep>

00000270 <__udivmodsi4_loop>:
 270:	aa 1f       	adc	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	ee 1f       	adc	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	a2 17       	cp	r26, r18
 27a:	b3 07       	cpc	r27, r19
 27c:	e4 07       	cpc	r30, r20
 27e:	f5 07       	cpc	r31, r21
 280:	20 f0       	brcs	.+8      	; 0x28a <__udivmodsi4_ep>
 282:	a2 1b       	sub	r26, r18
 284:	b3 0b       	sbc	r27, r19
 286:	e4 0b       	sbc	r30, r20
 288:	f5 0b       	sbc	r31, r21

0000028a <__udivmodsi4_ep>:
 28a:	66 1f       	adc	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	1a 94       	dec	r1
 294:	69 f7       	brne	.-38     	; 0x270 <__udivmodsi4_loop>
 296:	60 95       	com	r22
 298:	70 95       	com	r23
 29a:	80 95       	com	r24
 29c:	90 95       	com	r25
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	bd 01       	movw	r22, r26
 2a4:	cf 01       	movw	r24, r30
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>


GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ac  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070a  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000303  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006a  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000194a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  88:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z13SoftUART_Initv>:
void SoftUART_tx(char character);
//void ISR(TIM0_COMPA_vect );

void SoftUART_Init(){
	//set TX pin as output
   TX_DDR |= (1<<TX_DDR_PIN);
  90:	20 9a       	sbi	0x04, 0	; 4
   TX_PORT |= (1<<TX_PIN);
  92:	28 9a       	sbi	0x05, 0	; 5
   //set timer0 to CTC mode
   TCCR0A = (1<<WGM01);
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	84 bd       	out	0x24, r24	; 36
   //enable output compare 0 A interrupt
   TIMSK0 |= (1<<OCIE0A);
  98:	ee e6       	ldi	r30, 0x6E	; 110
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	80 83       	st	Z, r24
   //set compare value to 103 to achieve a 9600 baud rate (i.e. 104µs)
   //together with the 8MHz/8=1MHz timer0 clock
   /*NOTE: since the internal 8MHz oscillator is not very accurate, this value can be tuned
     to achieve the desired baud rate, so if it doesn't work with the nominal value (103), try
     increasing or decreasing the value by 1 or 2 */
   OCR0A = 103;
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	87 bd       	out	0x27, r24	; 39
   //enable interrupts
   sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <_Z11SoftUART_txc>:

void SoftUART_tx(char character)
{
	//if sending the previous character is not yet finished, return
	//transmission is finished when tx_shift_reg == 0
	if(tx_shift_reg){return;}
  aa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  ae:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  b2:	23 2b       	or	r18, r19
  b4:	d9 f4       	brne	.+54     	; 0xec <_Z11SoftUART_txc+0x42>
	//fill the TX shift register witch the character to be sent and the start & stop bits
	tx_shift_reg = (character<<1);
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	tx_shift_reg &= ~(1<<0); //start bit
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	tx_shift_reg |= (1<<9); //stop bit
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  de:	92 60       	ori	r25, 0x02	; 2
  e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	//start timer0 with a prescaler of 8
	TCCR0B = (1<<CS01);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	85 bd       	out	0x25, r24	; 37
  ec:	08 95       	ret

000000ee <__vector_14>:
}

//timer0 compare A match interrupt
ISR(TIMER0_COMPA_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
	//output LSB of the TX shift register at the TX pin
	if( tx_shift_reg & 0x01 )
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 104:	80 ff       	sbrs	r24, 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <__vector_14+0x1e>
	{
		TX_PORT |= (1<<TX_PIN); 
 108:	28 9a       	sbi	0x05, 0	; 5
 10a:	01 c0       	rjmp	.+2      	; 0x10e <__vector_14+0x20>
	}
	else
	{
		TX_PORT &=~ (1<<TX_PIN);
 10c:	28 98       	cbi	0x05, 0	; 5
	}
	//shift the TX shift register one bit to the right
	tx_shift_reg = (tx_shift_reg >> 1);
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 116:	96 95       	lsr	r25
 118:	87 95       	ror	r24
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	//if the stop bit has been sent, the shift register will be 0
	//and the transmission is completed, so we can stop & reset timer0
	if(!tx_shift_reg)
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12a:	89 2b       	or	r24, r25
 12c:	11 f4       	brne	.+4      	; 0x132 <__vector_14+0x44>
	{
		TCCR0B = 0;
 12e:	15 bc       	out	0x25, r1	; 37
		TCNT0 = 0;
 130:	16 bc       	out	0x26, r1	; 38
	}
}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "SoftUART.h"

int main(){
	SoftUART_Init();
 140:	0e 94 48 00 	call	0x90	; 0x90 <_Z13SoftUART_Initv>
	while(1){
	SoftUART_tx(65);
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 55 00 	call	0xaa	; 0xaa <_Z11SoftUART_txc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	80 e7       	ldi	r24, 0x70	; 112
 14e:	92 e0       	ldi	r25, 0x02	; 2
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x10>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x1a>
 15a:	00 00       	nop
 15c:	f3 cf       	rjmp	.-26     	; 0x144 <main+0x4>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>

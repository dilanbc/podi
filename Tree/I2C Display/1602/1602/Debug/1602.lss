
1602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000488  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000204  00800126  00800126  00000542  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001189  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b1  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000788  00000000  00000000  000020d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078e  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a86  00000000  00000000  0000324a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c3 01 	call	0x386	; 0x386 <main>
  9e:	0c 94 42 02 	jmp	0x484	; 0x484 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
		LcdChar(str[i]);
	}
}
void LcdCursor(bool Cursor=0){
	if (Cursor==0)
	{LcdCommand(0xC);
  a6:	9c 01       	movw	r18, r24
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e4       	ldi	r22, 0x40	; 64
  ae:	72 e4       	ldi	r23, 0x42	; 66
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodsi4>
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
  bc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  c0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c4:	88 e9       	ldi	r24, 0x98	; 152
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <_Z14USART_Transmith>:
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	95 ff       	sbrs	r25, 5
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <_Z14USART_Transmith+0x4>
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e2:	08 95       	ret

000000e4 <_Z14USART_TxStringPc>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <_Z14USART_TxStringPc+0x18>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
  f6:	89 91       	ld	r24, Y+
  f8:	81 11       	cpse	r24, r1
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <_Z14USART_TxStringPc+0xe>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <_Z14USART_TxNumberlh>:
 102:	dc 01       	movw	r26, r24
 104:	cb 01       	movw	r24, r22
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	69 e2       	ldi	r22, 0x29	; 41
 10a:	73 e0       	ldi	r23, 0x03	; 3
 10c:	0e 94 02 02 	call	0x404	; 0x404 <itoa>
 110:	89 e2       	ldi	r24, 0x29	; 41
 112:	93 e0       	ldi	r25, 0x03	; 3
 114:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z14USART_TxStringPc>
 118:	08 95       	ret

0000011a <__vector_18>:
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 134:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <rxvaluenum>
 138:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <rxvaluenum+0x1>
 13c:	8f 3f       	cpi	r24, 0xFF	; 255
 13e:	91 40       	sbci	r25, 0x01	; 1
 140:	20 f0       	brcs	.+8      	; 0x14a <__vector_18+0x30>
 142:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <rxvaluenum+0x1>
 146:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <rxvaluenum>
 14a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <rxvaluenum>
 14e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <rxvaluenum+0x1>
 152:	fc 01       	movw	r30, r24
 154:	e6 5d       	subi	r30, 0xD6	; 214
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	20 83       	st	Z, r18
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <rxvaluenum+0x1>
 160:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <rxvaluenum>
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <_Z7TWIInitv>:
 17a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 17e:	88 e4       	ldi	r24, 0x48	; 72
 180:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 18a:	08 95       	ret

0000018c <_Z8TWIStartv>:
 18c:	84 ea       	ldi	r24, 0xA4	; 164
 18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	ec f7       	brge	.-6      	; 0x196 <_Z8TWIStartv+0xa>
 19c:	08 95       	ret

0000019e <_Z7TWIStopv>:
 19e:	84 e9       	ldi	r24, 0x94	; 148
 1a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1a4:	ec eb       	ldi	r30, 0xBC	; 188
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	84 fd       	sbrc	r24, 4
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <_Z7TWIStopv+0xa>
 1ae:	08 95       	ret

000001b0 <_Z13TWIWriteAddrshh>:
 1b0:	88 0f       	add	r24, r24
 1b2:	68 2b       	or	r22, r24
 1b4:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1b8:	84 e8       	ldi	r24, 0x84	; 132
 1ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1be:	ec eb       	ldi	r30, 0xBC	; 188
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	88 23       	and	r24, r24
 1c6:	ec f7       	brge	.-6      	; 0x1c2 <_Z13TWIWriteAddrshh+0x12>
 1c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1cc:	88 7f       	andi	r24, 0xF8	; 248
 1ce:	08 95       	ret

000001d0 <_Z12TWIWriteDatah>:
 1d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1d4:	84 e8       	ldi	r24, 0x84	; 132
 1d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1da:	ec eb       	ldi	r30, 0xBC	; 188
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	88 23       	and	r24, r24
 1e2:	ec f7       	brge	.-6      	; 0x1de <_Z12TWIWriteDatah+0xe>
 1e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1e8:	88 7f       	andi	r24, 0xF8	; 248
 1ea:	08 95       	ret

000001ec <_Z11Lcd4bitdatahb>:
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	d8 2f       	mov	r29, r24
 1f4:	c6 2f       	mov	r28, r22
 1f6:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z8TWIStartv>
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <deviceAdress>
 200:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z13TWIWriteAddrshh>
 204:	1c 2f       	mov	r17, r28
 206:	1d 2b       	or	r17, r29
 208:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 20c:	81 2b       	or	r24, r17
 20e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z12TWIWriteDatah>
 212:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z7TWIStopv>
 216:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z8TWIStartv>
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <deviceAdress>
 220:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z13TWIWriteAddrshh>
 224:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 228:	84 60       	ori	r24, 0x04	; 4
 22a:	81 2b       	or	r24, r17
 22c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z12TWIWriteDatah>
 230:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z7TWIStopv>
 234:	8f e1       	ldi	r24, 0x1F	; 31
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <_Z11Lcd4bitdatahb+0x4c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <_Z11Lcd4bitdatahb+0x52>
 23e:	00 00       	nop
 240:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z8TWIStartv>
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <deviceAdress>
 24a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z13TWIWriteAddrshh>
 24e:	db 7f       	andi	r29, 0xFB	; 251
 250:	cd 2b       	or	r28, r29
 252:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 256:	8c 2b       	or	r24, r28
 258:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z12TWIWriteDatah>
 25c:	0e 94 cf 00 	call	0x19e	; 0x19e <_Z7TWIStopv>
 260:	8f e3       	ldi	r24, 0x3F	; 63
 262:	9f e1       	ldi	r25, 0x1F	; 31
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <_Z11Lcd4bitdatahb+0x78>
 268:	00 c0       	rjmp	.+0      	; 0x26a <_Z11Lcd4bitdatahb+0x7e>
 26a:	00 00       	nop
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	08 95       	ret

00000274 <_Z10LcdCommandh>:
 274:	cf 93       	push	r28
 276:	c8 2f       	mov	r28, r24
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 7f       	andi	r24, 0xF0	; 240
 27c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z11Lcd4bitdatahb>
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8c 2f       	mov	r24, r28
 284:	82 95       	swap	r24
 286:	80 7f       	andi	r24, 0xF0	; 240
 288:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z11Lcd4bitdatahb>
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <_Z7LcdInith>:
 290:	cf 93       	push	r28
 292:	c8 2f       	mov	r28, r24
 294:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z7TWIInitv>
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	89 ef       	ldi	r24, 0xF9	; 249
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <_Z7LcdInith+0x14>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <_Z7LcdInith+0x1e>
 2ae:	00 00       	nop
 2b0:	c0 93 27 01 	sts	0x0127, r28	; 0x800127 <deviceAdress>
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 3a 01 	call	0x274	; 0x274 <_Z10LcdCommandh>
 2ba:	88 e2       	ldi	r24, 0x28	; 40
 2bc:	0e 94 3a 01 	call	0x274	; 0x274 <_Z10LcdCommandh>
 2c0:	8c e0       	ldi	r24, 0x0C	; 12
 2c2:	0e 94 3a 01 	call	0x274	; 0x274 <_Z10LcdCommandh>
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	0e 94 3a 01 	call	0x274	; 0x274 <_Z10LcdCommandh>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 3a 01 	call	0x274	; 0x274 <_Z10LcdCommandh>
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <_Z7LcdCharh>:
	Lcd4bitdata(command&0xF0,0);
	Lcd4bitdata((command<<4)&0xF0,0);
	
}

void LcdChar(uint8_t Lcdcharval){
 2d6:	cf 93       	push	r28
 2d8:	c8 2f       	mov	r28, r24
	Lcd4bitdata(Lcdcharval&0xF0,1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	80 7f       	andi	r24, 0xF0	; 240
 2de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z11Lcd4bitdatahb>
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	8c 2f       	mov	r24, r28
 2e6:	82 95       	swap	r24
 2e8:	80 7f       	andi	r24, 0xF0	; 240
 2ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z11Lcd4bitdatahb>
	
}
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <_Z9LcdStringPc>:
	LcdString(str);
	
}

void LcdString (char *str)		/* Send string to LCD function */
{
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 2f8:	88 81       	ld	r24, Y
 2fa:	88 23       	and	r24, r24
 2fc:	31 f0       	breq	.+12     	; 0x30a <_Z9LcdStringPc+0x18>
 2fe:	21 96       	adiw	r28, 0x01	; 1
	{
		LcdChar(str[i]);
 300:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z7LcdCharh>
}

void LcdString (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 304:	89 91       	ld	r24, Y+
 306:	81 11       	cpse	r24, r1
 308:	fb cf       	rjmp	.-10     	; 0x300 <_Z9LcdStringPc+0xe>
	{
		LcdChar(str[i]);
	}
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <_Z12LcdSetCursorhhPc>:
	Lcd4bitdata(Lcdcharval&0xF0,1);
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
	
}

void LcdSetCursor(uint8_t xaxis, uint8_t yaxis,char*str){
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	ea 01       	movw	r28, r20
	uint8_t tempcommand;
	switch(yaxis){
 316:	61 30       	cpi	r22, 0x01	; 1
 318:	41 f0       	breq	.+16     	; 0x32a <_Z12LcdSetCursorhhPc+0x1a>
 31a:	28 f0       	brcs	.+10     	; 0x326 <_Z12LcdSetCursorhhPc+0x16>
 31c:	62 30       	cpi	r22, 0x02	; 2
 31e:	39 f0       	breq	.+14     	; 0x32e <_Z12LcdSetCursorhhPc+0x1e>
 320:	63 30       	cpi	r22, 0x03	; 3
 322:	39 f0       	breq	.+14     	; 0x332 <_Z12LcdSetCursorhhPc+0x22>
 324:	07 c0       	rjmp	.+14     	; 0x334 <_Z12LcdSetCursorhhPc+0x24>
		case 0:tempcommand=0x80;break;  //yaxis =0
 326:	90 e8       	ldi	r25, 0x80	; 128
 328:	05 c0       	rjmp	.+10     	; 0x334 <_Z12LcdSetCursorhhPc+0x24>
		case 1:tempcommand=0xC0;break;
 32a:	90 ec       	ldi	r25, 0xC0	; 192
 32c:	03 c0       	rjmp	.+6      	; 0x334 <_Z12LcdSetCursorhhPc+0x24>
		case 2:tempcommand=0x94;break;
 32e:	94 e9       	ldi	r25, 0x94	; 148
 330:	01 c0       	rjmp	.+2      	; 0x334 <_Z12LcdSetCursorhhPc+0x24>
		case 3:tempcommand=0xd4;break;		
 332:	94 ed       	ldi	r25, 0xD4	; 212
	}
	LcdCommand(tempcommand|(0x0F&xaxis));
 334:	8f 70       	andi	r24, 0x0F	; 15
 336:	89 2b       	or	r24, r25
 338:	0e 94 3a 01 	call	0x274	; 0x274 <_Z10LcdCommandh>
	LcdString(str);
 33c:	ce 01       	movw	r24, r28
 33e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_Z9LcdStringPc>
	
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <_Z7InitADCv>:
}

void InitADC()
{
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0);
 348:	ec e7       	ldi	r30, 0x7C	; 124
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 64       	ori	r24, 0x40	; 64
 350:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 352:	ea e7       	ldi	r30, 0x7A	; 122
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	87 68       	ori	r24, 0x87	; 135
 35a:	80 83       	st	Z, r24
 35c:	08 95       	ret

0000035e <_Z7ReadADCh>:
}
uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 35e:	ec e7       	ldi	r30, 0x7C	; 124
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	90 81       	ld	r25, Z
 364:	90 7f       	andi	r25, 0xF0	; 240
 366:	8f 70       	andi	r24, 0x0F	; 15
 368:	89 2b       	or	r24, r25
 36a:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 36c:	ea e7       	ldi	r30, 0x7A	; 122
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 64       	ori	r24, 0x40	; 64
 374:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 376:	80 81       	ld	r24, Z
 378:	86 fd       	sbrc	r24, 6
 37a:	fd cf       	rjmp	.-6      	; 0x376 <_Z7ReadADCh+0x18>
	return ADC;
 37c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 380:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 384:	08 95       	ret

00000386 <main>:
void InitADC();
uint16_t ReadADC(uint8_t ADCchannel);

int main()
{
InitADC();
 386:	0e 94 a4 01 	call	0x348	; 0x348 <_Z7InitADCv>
 LcdInit(0x27);
 38a:	87 e2       	ldi	r24, 0x27	; 39
 38c:	0e 94 48 01 	call	0x290	; 0x290 <_Z7LcdInith>
USART_Init(9600);
 390:	80 e8       	ldi	r24, 0x80	; 128
 392:	95 e2       	ldi	r25, 0x25	; 37
 394:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
 LcdSetCursor(0,2,"Dilan Lakshitha  Kandegedara Guana");
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	51 e0       	ldi	r21, 0x01	; 1
 39c:	62 e0       	ldi	r22, 0x02	; 2
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 88 01 	call	0x310	; 0x310 <_Z12LcdSetCursorhhPc>
 
 while (1)
 {
	 
	 
	USART_TxNumber(ReadADC(1));
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 af 01 	call	0x35e	; 0x35e <_Z7ReadADCh>
 3aa:	bc 01       	movw	r22, r24
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	4a e0       	ldi	r20, 0x0A	; 10
 3b2:	0e 94 81 00 	call	0x102	; 0x102 <_Z14USART_TxNumberlh>
	 USART_TxString("\n");
 3b6:	83 e2       	ldi	r24, 0x23	; 35
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z14USART_TxStringPc>
 3be:	f2 cf       	rjmp	.-28     	; 0x3a4 <main+0x1e>

000003c0 <__udivmodsi4>:
 3c0:	a1 e2       	ldi	r26, 0x21	; 33
 3c2:	1a 2e       	mov	r1, r26
 3c4:	aa 1b       	sub	r26, r26
 3c6:	bb 1b       	sub	r27, r27
 3c8:	fd 01       	movw	r30, r26
 3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <__udivmodsi4_ep>

000003cc <__udivmodsi4_loop>:
 3cc:	aa 1f       	adc	r26, r26
 3ce:	bb 1f       	adc	r27, r27
 3d0:	ee 1f       	adc	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	a2 17       	cp	r26, r18
 3d6:	b3 07       	cpc	r27, r19
 3d8:	e4 07       	cpc	r30, r20
 3da:	f5 07       	cpc	r31, r21
 3dc:	20 f0       	brcs	.+8      	; 0x3e6 <__udivmodsi4_ep>
 3de:	a2 1b       	sub	r26, r18
 3e0:	b3 0b       	sbc	r27, r19
 3e2:	e4 0b       	sbc	r30, r20
 3e4:	f5 0b       	sbc	r31, r21

000003e6 <__udivmodsi4_ep>:
 3e6:	66 1f       	adc	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	1a 94       	dec	r1
 3f0:	69 f7       	brne	.-38     	; 0x3cc <__udivmodsi4_loop>
 3f2:	60 95       	com	r22
 3f4:	70 95       	com	r23
 3f6:	80 95       	com	r24
 3f8:	90 95       	com	r25
 3fa:	9b 01       	movw	r18, r22
 3fc:	ac 01       	movw	r20, r24
 3fe:	bd 01       	movw	r22, r26
 400:	cf 01       	movw	r24, r30
 402:	08 95       	ret

00000404 <itoa>:
 404:	45 32       	cpi	r20, 0x25	; 37
 406:	51 05       	cpc	r21, r1
 408:	20 f4       	brcc	.+8      	; 0x412 <itoa+0xe>
 40a:	42 30       	cpi	r20, 0x02	; 2
 40c:	10 f0       	brcs	.+4      	; 0x412 <itoa+0xe>
 40e:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__itoa_ncheck>
 412:	fb 01       	movw	r30, r22
 414:	10 82       	st	Z, r1
 416:	cb 01       	movw	r24, r22
 418:	08 95       	ret

0000041a <__itoa_ncheck>:
 41a:	bb 27       	eor	r27, r27
 41c:	4a 30       	cpi	r20, 0x0A	; 10
 41e:	31 f4       	brne	.+12     	; 0x42c <__itoa_ncheck+0x12>
 420:	99 23       	and	r25, r25
 422:	22 f4       	brpl	.+8      	; 0x42c <__itoa_ncheck+0x12>
 424:	bd e2       	ldi	r27, 0x2D	; 45
 426:	90 95       	com	r25
 428:	81 95       	neg	r24
 42a:	9f 4f       	sbci	r25, 0xFF	; 255
 42c:	0c 94 19 02 	jmp	0x432	; 0x432 <__utoa_common>

00000430 <__utoa_ncheck>:
 430:	bb 27       	eor	r27, r27

00000432 <__utoa_common>:
 432:	fb 01       	movw	r30, r22
 434:	55 27       	eor	r21, r21
 436:	aa 27       	eor	r26, r26
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	aa 1f       	adc	r26, r26
 43e:	a4 17       	cp	r26, r20
 440:	10 f0       	brcs	.+4      	; 0x446 <__utoa_common+0x14>
 442:	a4 1b       	sub	r26, r20
 444:	83 95       	inc	r24
 446:	50 51       	subi	r21, 0x10	; 16
 448:	b9 f7       	brne	.-18     	; 0x438 <__utoa_common+0x6>
 44a:	a0 5d       	subi	r26, 0xD0	; 208
 44c:	aa 33       	cpi	r26, 0x3A	; 58
 44e:	08 f0       	brcs	.+2      	; 0x452 <__utoa_common+0x20>
 450:	a9 5d       	subi	r26, 0xD9	; 217
 452:	a1 93       	st	Z+, r26
 454:	00 97       	sbiw	r24, 0x00	; 0
 456:	79 f7       	brne	.-34     	; 0x436 <__utoa_common+0x4>
 458:	b1 11       	cpse	r27, r1
 45a:	b1 93       	st	Z+, r27
 45c:	11 92       	st	Z+, r1
 45e:	cb 01       	movw	r24, r22
 460:	0c 94 32 02 	jmp	0x464	; 0x464 <strrev>

00000464 <strrev>:
 464:	dc 01       	movw	r26, r24
 466:	fc 01       	movw	r30, r24
 468:	67 2f       	mov	r22, r23
 46a:	71 91       	ld	r23, Z+
 46c:	77 23       	and	r23, r23
 46e:	e1 f7       	brne	.-8      	; 0x468 <strrev+0x4>
 470:	32 97       	sbiw	r30, 0x02	; 2
 472:	04 c0       	rjmp	.+8      	; 0x47c <strrev+0x18>
 474:	7c 91       	ld	r23, X
 476:	6d 93       	st	X+, r22
 478:	70 83       	st	Z, r23
 47a:	62 91       	ld	r22, -Z
 47c:	ae 17       	cp	r26, r30
 47e:	bf 07       	cpc	r27, r31
 480:	c8 f3       	brcs	.-14     	; 0x474 <strrev+0x10>
 482:	08 95       	ret

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>

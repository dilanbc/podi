
all.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ff8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000ff8  0000108c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008000a0  008000a0  000010cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5c  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077f  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000934  00000000  00000000  000028ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  0000344c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f5  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004169  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3c       	cpi	r26, 0xC3	; 195
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 43 02 	call	0x486	; 0x486 <main>
  8a:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z7TWIInitv>:
		LcdChar(str[i]);
	}
}
void LcdCursor(bool Cursor=0){
	if (Cursor==0)
	{LcdCommand(0xC);
  92:	11 b8       	out	0x01, r1	; 1
  94:	88 e4       	ldi	r24, 0x48	; 72
  96:	80 b9       	out	0x00, r24	; 0
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	86 bf       	out	0x36, r24	; 54
  9c:	08 95       	ret

0000009e <_Z8TWIStartv>:
  9e:	84 ea       	ldi	r24, 0xA4	; 164
  a0:	86 bf       	out	0x36, r24	; 54
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <_Z8TWIStartv+0x4>
  a8:	08 95       	ret

000000aa <_Z7TWIStopv>:
  aa:	84 e9       	ldi	r24, 0x94	; 148
  ac:	86 bf       	out	0x36, r24	; 54
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	04 fc       	sbrc	r0, 4
  b2:	fd cf       	rjmp	.-6      	; 0xae <_Z7TWIStopv+0x4>
  b4:	08 95       	ret

000000b6 <_Z13TWIWriteAddrshh>:
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	86 2b       	or	r24, r22
  be:	83 b9       	out	0x03, r24	; 3
  c0:	84 e8       	ldi	r24, 0x84	; 132
  c2:	86 bf       	out	0x36, r24	; 54
  c4:	06 b6       	in	r0, 0x36	; 54
  c6:	07 fe       	sbrs	r0, 7
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <_Z13TWIWriteAddrshh+0xe>
  ca:	81 b1       	in	r24, 0x01	; 1
  cc:	88 7f       	andi	r24, 0xF8	; 248
  ce:	08 95       	ret

000000d0 <_Z12TWIWriteDatah>:
  d0:	83 b9       	out	0x03, r24	; 3
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	86 bf       	out	0x36, r24	; 54
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <_Z12TWIWriteDatah+0x6>
  dc:	81 b1       	in	r24, 0x01	; 1
  de:	88 7f       	andi	r24, 0xF8	; 248
  e0:	08 95       	ret

000000e2 <_Z12LcdBacklightb>:
  e2:	88 23       	and	r24, r24
  e4:	21 f0       	breq	.+8      	; 0xee <_Z12LcdBacklightb+0xc>
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Backlight>
  ec:	08 95       	ret
  ee:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Backlight>
  f2:	08 95       	ret

000000f4 <_Z11Lcd4bitdatahb>:
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	d8 2f       	mov	r29, r24
  fc:	c6 2f       	mov	r28, r22
  fe:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z8TWIStartv>
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <deviceAdress>
 108:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z13TWIWriteAddrshh>
 10c:	1c 2f       	mov	r17, r28
 10e:	1d 2b       	or	r17, r29
 110:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Backlight>
 114:	81 2b       	or	r24, r17
 116:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z12TWIWriteDatah>
 11a:	0e 94 55 00 	call	0xaa	; 0xaa <_Z7TWIStopv>
 11e:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z8TWIStartv>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <deviceAdress>
 128:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z13TWIWriteAddrshh>
 12c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Backlight>
 130:	81 2b       	or	r24, r17
 132:	84 60       	ori	r24, 0x04	; 4
 134:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z12TWIWriteDatah>
 138:	0e 94 55 00 	call	0xaa	; 0xaa <_Z7TWIStopv>
 13c:	8f e8       	ldi	r24, 0x8F	; 143
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <_Z11Lcd4bitdatahb+0x4c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <_Z11Lcd4bitdatahb+0x52>
 146:	00 00       	nop
 148:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z8TWIStartv>
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <deviceAdress>
 152:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z13TWIWriteAddrshh>
 156:	db 7f       	andi	r29, 0xFB	; 251
 158:	cd 2b       	or	r28, r29
 15a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Backlight>
 15e:	8c 2b       	or	r24, r28
 160:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z12TWIWriteDatah>
 164:	0e 94 55 00 	call	0xaa	; 0xaa <_Z7TWIStopv>
 168:	8f e9       	ldi	r24, 0x9F	; 159
 16a:	9f e0       	ldi	r25, 0x0F	; 15
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <_Z11Lcd4bitdatahb+0x78>
 170:	00 c0       	rjmp	.+0      	; 0x172 <_Z11Lcd4bitdatahb+0x7e>
 172:	00 00       	nop
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	08 95       	ret

0000017c <_Z10LcdCommandh>:
 17c:	cf 93       	push	r28
 17e:	c8 2f       	mov	r28, r24
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	80 7f       	andi	r24, 0xF0	; 240
 184:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z11Lcd4bitdatahb>
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	8c 2f       	mov	r24, r28
 18c:	82 95       	swap	r24
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z11Lcd4bitdatahb>
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <_Z7LcdInith>:
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
 19c:	0e 94 49 00 	call	0x92	; 0x92 <_Z7TWIInitv>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z12LcdBacklightb>
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9c e9       	ldi	r25, 0x9C	; 156
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <_Z7LcdInith+0x12>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_Z7LcdInith+0x18>
 1b0:	00 00       	nop
 1b2:	c0 93 c2 00 	sts	0x00C2, r28	; 0x8000c2 <deviceAdress>
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 be 00 	call	0x17c	; 0x17c <_Z10LcdCommandh>
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	0e 94 be 00 	call	0x17c	; 0x17c <_Z10LcdCommandh>
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	0e 94 be 00 	call	0x17c	; 0x17c <_Z10LcdCommandh>
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	0e 94 be 00 	call	0x17c	; 0x17c <_Z10LcdCommandh>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 be 00 	call	0x17c	; 0x17c <_Z10LcdCommandh>
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <_Z7LcdCharh>:
	Lcd4bitdata(command&0xF0,0);
	Lcd4bitdata((command<<4)&0xF0,0);
	
}

void LcdChar(uint8_t Lcdcharval){
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
	Lcd4bitdata(Lcdcharval&0xF0,1);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	80 7f       	andi	r24, 0xF0	; 240
 1e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z11Lcd4bitdatahb>
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	8c 2f       	mov	r24, r28
 1e8:	82 95       	swap	r24
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z11Lcd4bitdatahb>
	
}
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <_Z9LcdStringPc>:
	LcdString(str);
	
}

void LcdString (char *str)		/* Send string to LCD function */
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	f8 01       	movw	r30, r16
 204:	ec 0f       	add	r30, r28
 206:	fd 1f       	adc	r31, r29
 208:	80 81       	ld	r24, Z
 20a:	88 23       	and	r24, r24
 20c:	21 f0       	breq	.+8      	; 0x216 <_Z9LcdStringPc+0x22>
	{
		LcdChar(str[i]);
 20e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_Z7LcdCharh>
}

void LcdString (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 212:	21 96       	adiw	r28, 0x01	; 1
 214:	f6 cf       	rjmp	.-20     	; 0x202 <_Z9LcdStringPc+0xe>
	{
		LcdChar(str[i]);
	}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <_Z12LcdSetCursorhhPc>:
	Lcd4bitdata(Lcdcharval&0xF0,1);
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
	
}

void LcdSetCursor(uint8_t xaxis, uint8_t yaxis,char*str){
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ea 01       	movw	r28, r20
	uint8_t tempcommand;
	switch(yaxis){
 226:	61 30       	cpi	r22, 0x01	; 1
 228:	31 f0       	breq	.+12     	; 0x236 <_Z12LcdSetCursorhhPc+0x16>
 22a:	58 f0       	brcs	.+22     	; 0x242 <_Z12LcdSetCursorhhPc+0x22>
 22c:	62 30       	cpi	r22, 0x02	; 2
 22e:	29 f0       	breq	.+10     	; 0x23a <_Z12LcdSetCursorhhPc+0x1a>
 230:	63 30       	cpi	r22, 0x03	; 3
 232:	29 f0       	breq	.+10     	; 0x23e <_Z12LcdSetCursorhhPc+0x1e>
 234:	07 c0       	rjmp	.+14     	; 0x244 <_Z12LcdSetCursorhhPc+0x24>
		case 0:tempcommand=0x80;break;  //yaxis =0
		case 1:tempcommand=0xC0;break;
 236:	90 ec       	ldi	r25, 0xC0	; 192
 238:	05 c0       	rjmp	.+10     	; 0x244 <_Z12LcdSetCursorhhPc+0x24>
		case 2:tempcommand=0x94;break;
 23a:	94 e9       	ldi	r25, 0x94	; 148
 23c:	03 c0       	rjmp	.+6      	; 0x244 <_Z12LcdSetCursorhhPc+0x24>
		case 3:tempcommand=0xd4;break;		
 23e:	94 ed       	ldi	r25, 0xD4	; 212
 240:	01 c0       	rjmp	.+2      	; 0x244 <_Z12LcdSetCursorhhPc+0x24>
}

void LcdSetCursor(uint8_t xaxis, uint8_t yaxis,char*str){
	uint8_t tempcommand;
	switch(yaxis){
		case 0:tempcommand=0x80;break;  //yaxis =0
 242:	90 e8       	ldi	r25, 0x80	; 128
		case 1:tempcommand=0xC0;break;
		case 2:tempcommand=0x94;break;
		case 3:tempcommand=0xd4;break;		
	}
	LcdCommand(tempcommand|(0x0F&xaxis));
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	89 2b       	or	r24, r25
 248:	0e 94 be 00 	call	0x17c	; 0x17c <_Z10LcdCommandh>
	LcdString(str);
 24c:	ce 01       	movw	r24, r28
 24e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z9LcdStringPc>
	
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <__vector_7>:
		
		
    }
}

ISR(TIMER1_COMPA_vect){//stepper motor run
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
	TCNT1=0;
 266:	1d bc       	out	0x2d, r1	; 45
 268:	1c bc       	out	0x2c, r1	; 44
	stepPORT^=(1<<STEPL);//toggle pulse signal
 26a:	95 b3       	in	r25, 0x15	; 21
 26c:	80 e4       	ldi	r24, 0x40	; 64
 26e:	89 27       	eor	r24, r25
 270:	85 bb       	out	0x15, r24	; 21
	stepPORT^=(1<<STEPR);//toggle pulse signal
 272:	85 b3       	in	r24, 0x15	; 21
 274:	80 58       	subi	r24, 0x80	; 128
 276:	85 bb       	out	0x15, r24	; 21

	if (steperMode==1)
 278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	21 f4       	brne	.+8      	; 0x288 <__vector_7+0x30>
	{
		stepPORT&=~((1<<DIRR)|(1<<DIRL));//right
 280:	85 b3       	in	r24, 0x15	; 21
 282:	8f 7c       	andi	r24, 0xCF	; 207
 284:	85 bb       	out	0x15, r24	; 21
 286:	17 c0       	rjmp	.+46     	; 0x2b6 <__vector_7+0x5e>
	}
	else if(steperMode==2)
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	39 f4       	brne	.+14     	; 0x29a <__vector_7+0x42>
	{
		stepPORT|=(1<<DIRL);stepPORT&=~(1<<DIRR);//reverse
 28c:	85 b3       	in	r24, 0x15	; 21
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	85 bb       	out	0x15, r24	; 21
 292:	85 b3       	in	r24, 0x15	; 21
 294:	8f 7d       	andi	r24, 0xDF	; 223
 296:	85 bb       	out	0x15, r24	; 21
 298:	0e c0       	rjmp	.+28     	; 0x2b6 <__vector_7+0x5e>
	}
	else if(steperMode==3){
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	39 f4       	brne	.+14     	; 0x2ac <__vector_7+0x54>
		stepPORT|=(1<<DIRR);stepPORT&=~(1<<DIRL);//forward
 29e:	85 b3       	in	r24, 0x15	; 21
 2a0:	80 62       	ori	r24, 0x20	; 32
 2a2:	85 bb       	out	0x15, r24	; 21
 2a4:	85 b3       	in	r24, 0x15	; 21
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	85 bb       	out	0x15, r24	; 21
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__vector_7+0x5e>
	}
	
	else if(steperMode==4){
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <__vector_7+0x5e>
		stepPORT|=(1<<DIRR)|(1<<DIRL);//left
 2b0:	85 b3       	in	r24, 0x15	; 21
 2b2:	80 63       	ori	r24, 0x30	; 48
 2b4:	85 bb       	out	0x15, r24	; 21
	}


}
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <_Z10selectscanv>:

void selectscan(){
if (!(modeSlectpin&(1<<JOY)))
 2c4:	b4 99       	sbic	0x16, 4	; 22
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <_Z10selectscanv+0xa>
{modeSelect=0;
 2c8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <modeSelect>
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <_Z10selectscanv+0x20>
	
}
else if(!(modeSlectpin&(1<<NONE))){
 2ce:	b5 99       	sbic	0x16, 5	; 22
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <_Z10selectscanv+0x16>
	modeSelect=1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <modeSelect>
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <_Z10selectscanv+0x20>
	
}
else if(!(modeSlectpin&(1<<VOICE)))
 2da:	b6 99       	sbic	0x16, 6	; 22
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <_Z10selectscanv+0x20>
{
	modeSelect=2;
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <modeSelect>
	
}

if (modeSelect!=prevmodeSelect)
 2e4:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <modeSelect>
 2e8:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <prevmodeSelect>
 2ec:	98 17       	cp	r25, r24
 2ee:	31 f1       	breq	.+76     	; 0x33c <_Z10selectscanv+0x78>
{LcdCommand(LCD_CLEARDISPLAY);
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 be 00 	call	0x17c	; 0x17c <_Z10LcdCommandh>
	
	switch(modeSelect){
 2f6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <modeSelect>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	59 f0       	breq	.+22     	; 0x314 <_Z10selectscanv+0x50>
 2fe:	18 f0       	brcs	.+6      	; 0x306 <_Z10selectscanv+0x42>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	91 f0       	breq	.+36     	; 0x328 <_Z10selectscanv+0x64>
 304:	17 c0       	rjmp	.+46     	; 0x334 <_Z10selectscanv+0x70>
		case 0:LcdSetCursor(0,0,"Joystick Mode"); break;
 306:	42 e6       	ldi	r20, 0x62	; 98
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 10 01 	call	0x220	; 0x220 <_Z12LcdSetCursorhhPc>
 312:	10 c0       	rjmp	.+32     	; 0x334 <_Z10selectscanv+0x70>
		case 1:LcdSetCursor(0,0,"Manual Mode");TIMSK&=~(1<<OCIE1A); break;
 314:	40 e7       	ldi	r20, 0x70	; 112
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 10 01 	call	0x220	; 0x220 <_Z12LcdSetCursorhhPc>
 320:	89 b7       	in	r24, 0x39	; 57
 322:	8f 7e       	andi	r24, 0xEF	; 239
 324:	89 bf       	out	0x39, r24	; 57
 326:	06 c0       	rjmp	.+12     	; 0x334 <_Z10selectscanv+0x70>
		case 2:LcdSetCursor(0,0,"Voice cont. Mode"); break;
 328:	4c e7       	ldi	r20, 0x7C	; 124
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 10 01 	call	0x220	; 0x220 <_Z12LcdSetCursorhhPc>
	}
	prevmodeSelect=modeSelect;
 334:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <modeSelect>
 338:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <prevmodeSelect>
 33c:	08 95       	ret

0000033e <__vector_16>:
	
}	
}

ISR(ADC_vect){
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	2f 93       	push	r18
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	
	ADMUX=(ADMUX&0b11100000)|(6+adcreadchannel);
 352:	97 b1       	in	r25, 0x07	; 7
 354:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <adcreadchannel>
 358:	90 7e       	andi	r25, 0xE0	; 224
 35a:	8a 5f       	subi	r24, 0xFA	; 250
 35c:	89 2b       	or	r24, r25
 35e:	87 b9       	out	0x07, r24	; 7
	adcread[adcreadchannel]=ADCW;
 360:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <adcreadchannel>
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	84 b1       	in	r24, 0x04	; 4
 368:	95 b1       	in	r25, 0x05	; 5
 36a:	ee 0f       	add	r30, r30
 36c:	ff 1f       	adc	r31, r31
 36e:	e2 54       	subi	r30, 0x42	; 66
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	91 83       	std	Z+1, r25	; 0x01
 374:	80 83       	st	Z, r24
	adcreadchannel=!adcreadchannel;
 376:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <adcreadchannel>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	89 27       	eor	r24, r25
 37e:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <adcreadchannel>
	
	if (modeSelect==0)
 382:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <modeSelect>
 386:	81 11       	cpse	r24, r1
 388:	3b c0       	rjmp	.+118    	; 0x400 <__EEPROM_REGION_LENGTH__>
	{
		if (adcread[0]>812)
 38a:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <adcread>
 38e:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <adcread+0x1>
 392:	8d 32       	cpi	r24, 0x2D	; 45
 394:	93 40       	sbci	r25, 0x03	; 3
 396:	38 f0       	brcs	.+14     	; 0x3a6 <__vector_16+0x68>
		{	steperMode=3;
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMSK|=(1<<OCIE1A);
 39e:	89 b7       	in	r24, 0x39	; 57
 3a0:	80 61       	ori	r24, 0x10	; 16
 3a2:	89 bf       	out	0x39, r24	; 57
 3a4:	2d c0       	rjmp	.+90     	; 0x400 <__EEPROM_REGION_LENGTH__>
		}
		else if(adcread[0]<212){
 3a6:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <adcread>
 3aa:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <adcread+0x1>
 3ae:	84 3d       	cpi	r24, 0xD4	; 212
 3b0:	91 05       	cpc	r25, r1
 3b2:	38 f4       	brcc	.+14     	; 0x3c2 <__vector_16+0x84>
			steperMode=2;
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMSK|=(1<<OCIE1A);
 3ba:	89 b7       	in	r24, 0x39	; 57
 3bc:	80 61       	ori	r24, 0x10	; 16
 3be:	89 bf       	out	0x39, r24	; 57
 3c0:	1f c0       	rjmp	.+62     	; 0x400 <__EEPROM_REGION_LENGTH__>
		}
		else if(adcread[1]>812){
 3c2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <adcread+0x2>
 3c6:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <adcread+0x3>
 3ca:	8d 32       	cpi	r24, 0x2D	; 45
 3cc:	93 40       	sbci	r25, 0x03	; 3
 3ce:	38 f0       	brcs	.+14     	; 0x3de <__vector_16+0xa0>
			steperMode=1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMSK|=(1<<OCIE1A);
 3d6:	89 b7       	in	r24, 0x39	; 57
 3d8:	80 61       	ori	r24, 0x10	; 16
 3da:	89 bf       	out	0x39, r24	; 57
 3dc:	11 c0       	rjmp	.+34     	; 0x400 <__EEPROM_REGION_LENGTH__>
		}
		else if(adcread[1]<212){
 3de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <adcread+0x2>
 3e2:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <adcread+0x3>
 3e6:	84 3d       	cpi	r24, 0xD4	; 212
 3e8:	91 05       	cpc	r25, r1
 3ea:	38 f4       	brcc	.+14     	; 0x3fa <__vector_16+0xbc>
			steperMode=4;
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMSK|=(1<<OCIE1A);
 3f2:	89 b7       	in	r24, 0x39	; 57
 3f4:	80 61       	ori	r24, 0x10	; 16
 3f6:	89 bf       	out	0x39, r24	; 57
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
		}
		else{
		TIMSK&=~(1<<OCIE1A);
 3fa:	89 b7       	in	r24, 0x39	; 57
 3fc:	8f 7e       	andi	r24, 0xEF	; 239
 3fe:	89 bf       	out	0x39, r24	; 57
		}
	}
	
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <_Z8stepperMhj>:


void stepperM(uint8_t side,uint16_t cycle){
if (side==1)
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	21 f4       	brne	.+8      	; 0x420 <_Z8stepperMhj+0xc>
{
	stepPORT&=~((1<<DIRR)|(1<<DIRL));//right   1343431
 418:	85 b3       	in	r24, 0x15	; 21
 41a:	8f 7c       	andi	r24, 0xCF	; 207
 41c:	85 bb       	out	0x15, r24	; 21
 41e:	11 c0       	rjmp	.+34     	; 0x442 <_Z8stepperMhj+0x2e>
}
else if(side==2)
 420:	82 30       	cpi	r24, 0x02	; 2
 422:	39 f4       	brne	.+14     	; 0x432 <_Z8stepperMhj+0x1e>
{
	stepPORT|=(1<<DIRL);stepPORT&=~(1<<DIRR);//reverse
 424:	85 b3       	in	r24, 0x15	; 21
 426:	80 61       	ori	r24, 0x10	; 16
 428:	85 bb       	out	0x15, r24	; 21
 42a:	85 b3       	in	r24, 0x15	; 21
 42c:	8f 7d       	andi	r24, 0xDF	; 223
 42e:	85 bb       	out	0x15, r24	; 21
 430:	08 c0       	rjmp	.+16     	; 0x442 <_Z8stepperMhj+0x2e>
}
else if(side==3){
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	49 f4       	brne	.+18     	; 0x448 <_Z8stepperMhj+0x34>
	stepPORT|=(1<<DIRR);stepPORT&=~(1<<DIRL);//forward
 436:	85 b3       	in	r24, 0x15	; 21
 438:	80 62       	ori	r24, 0x20	; 32
 43a:	85 bb       	out	0x15, r24	; 21
 43c:	85 b3       	in	r24, 0x15	; 21
 43e:	8f 7e       	andi	r24, 0xEF	; 239
 440:	85 bb       	out	0x15, r24	; 21
	}
	
}


void stepperM(uint8_t side,uint16_t cycle){
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	06 c0       	rjmp	.+12     	; 0x454 <_Z8stepperMhj+0x40>
}
else if(side==3){
	stepPORT|=(1<<DIRR);stepPORT&=~(1<<DIRL);//forward
}

else if(side==4){
 448:	84 30       	cpi	r24, 0x04	; 4
 44a:	d9 f7       	brne	.-10     	; 0x442 <_Z8stepperMhj+0x2e>
	stepPORT|=(1<<DIRR)|(1<<DIRL);//left
 44c:	85 b3       	in	r24, 0x15	; 21
 44e:	80 63       	ori	r24, 0x30	; 48
 450:	85 bb       	out	0x15, r24	; 21
 452:	f7 cf       	rjmp	.-18     	; 0x442 <_Z8stepperMhj+0x2e>
}
for(uint16_t i=0;i<cycle;i++){
 454:	26 17       	cp	r18, r22
 456:	37 07       	cpc	r19, r23
 458:	a8 f4       	brcc	.+42     	; 0x484 <_Z8stepperMhj+0x70>
stepPORT|=(1<<STEPL)|(1<<STEPR);
 45a:	85 b3       	in	r24, 0x15	; 21
 45c:	80 6c       	ori	r24, 0xC0	; 192
 45e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 460:	8f ec       	ldi	r24, 0xCF	; 207
 462:	97 e0       	ldi	r25, 0x07	; 7
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <_Z8stepperMhj+0x50>
 468:	00 c0       	rjmp	.+0      	; 0x46a <_Z8stepperMhj+0x56>
 46a:	00 00       	nop
_delay_us(1000);
stepPORT&=~((1<<STEPL)|(1<<STEPR));
 46c:	85 b3       	in	r24, 0x15	; 21
 46e:	8f 73       	andi	r24, 0x3F	; 63
 470:	85 bb       	out	0x15, r24	; 21
 472:	8f ec       	ldi	r24, 0xCF	; 207
 474:	97 e0       	ldi	r25, 0x07	; 7
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <_Z8stepperMhj+0x62>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <_Z8stepperMhj+0x68>
 47c:	00 00       	nop
}

else if(side==4){
	stepPORT|=(1<<DIRR)|(1<<DIRL);//left
}
for(uint16_t i=0;i<cycle;i++){
 47e:	2f 5f       	subi	r18, 0xFF	; 255
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	e8 cf       	rjmp	.-48     	; 0x454 <_Z8stepperMhj+0x40>
 484:	08 95       	ret

00000486 <main>:


int main(void)
{
	
	TCCR1B|=(1<<WGM12);//Enable Compare match mode
 486:	8e b5       	in	r24, 0x2e	; 46
 488:	88 60       	ori	r24, 0x08	; 8
 48a:	8e bd       	out	0x2e, r24	; 46
	TCCR1B|=(1<<CS11)|(1<<CS10);//start timer prescaler =64
 48c:	8e b5       	in	r24, 0x2e	; 46
 48e:	83 60       	ori	r24, 0x03	; 3
 490:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0;	
 492:	1d bc       	out	0x2d, r1	; 45
 494:	1c bc       	out	0x2c, r1	; 44
	OCR1A=2000;
 496:	80 ed       	ldi	r24, 0xD0	; 208
 498:	97 e0       	ldi	r25, 0x07	; 7
 49a:	9b bd       	out	0x2b, r25	; 43
 49c:	8a bd       	out	0x2a, r24	; 42
	stepDDR|=(1<<DIRL)|(1<<DIRR)|(1<<STEPL)|(1<<STEPR);
 49e:	84 b3       	in	r24, 0x14	; 20
 4a0:	80 6f       	ori	r24, 0xF0	; 240
 4a2:	84 bb       	out	0x14, r24	; 20
	TIMSK|=(1<<OCIE1A);
 4a4:	89 b7       	in	r24, 0x39	; 57
 4a6:	80 61       	ori	r24, 0x10	; 16
 4a8:	89 bf       	out	0x39, r24	; 57
	/*register value= time*(clock speed/prescale)
	register value=0.05*(8000000/64)
	register value=6250*/
	//TIMSK|=(1<<OCIE1A);//enable timer Compare inturrept
	DDRA|=(1<<3);
 4aa:	8a b3       	in	r24, 0x1a	; 26
 4ac:	88 60       	ori	r24, 0x08	; 8
 4ae:	8a bb       	out	0x1a, r24	; 26
	PORTD|=(1<<3);
 4b0:	82 b3       	in	r24, 0x12	; 18
 4b2:	88 60       	ori	r24, 0x08	; 8
 4b4:	82 bb       	out	0x12, r24	; 18
	
	
	/*Ultrasonic Timer Part*/
	DDRA|=(1<<0); //D4 as output
 4b6:	8a b3       	in	r24, 0x1a	; 26
 4b8:	81 60       	ori	r24, 0x01	; 1
 4ba:	8a bb       	out	0x1a, r24	; 26
	TCCR0|=(1<<WGM01);//Enable Compare match mode
 4bc:	83 b7       	in	r24, 0x33	; 51
 4be:	88 60       	ori	r24, 0x08	; 8
 4c0:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(1<<CS11);//Start timer  prescaler =8
 4c2:	83 b7       	in	r24, 0x33	; 51
 4c4:	82 60       	ori	r24, 0x02	; 2
 4c6:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
 4c8:	12 be       	out	0x32, r1	; 50
	OCR0=10;
 4ca:	8a e0       	ldi	r24, 0x0A	; 10
 4cc:	8c bf       	out	0x3c, r24	; 60
	/*register value= time*(clock speed/prescale)
	register value=0.000001*(8000000/1)
	register value=10*/
	TIMSK|=(1<<OCIE0);//enable timer Compare inturrept
 4ce:	89 b7       	in	r24, 0x39	; 57
 4d0:	82 60       	ori	r24, 0x02	; 2
 4d2:	89 bf       	out	0x39, r24	; 57
	
	modeSlectPORT|=(1<<JOY)|(1<<VOICE)|(1<<NONE);
 4d4:	88 b3       	in	r24, 0x18	; 24
 4d6:	80 67       	ori	r24, 0x70	; 112
 4d8:	88 bb       	out	0x18, r24	; 24
	
	ADMUX|=(1<<REFS0);//AVCC
 4da:	87 b1       	in	r24, 0x07	; 7
 4dc:	80 64       	ori	r24, 0x40	; 64
 4de:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADIE)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADATE);
 4e0:	86 b1       	in	r24, 0x06	; 6
 4e2:	8f 6e       	ori	r24, 0xEF	; 239
 4e4:	86 b9       	out	0x06, r24	; 6
	adcreadchannel=0;
 4e6:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <adcreadchannel>
	ADMUX=(ADMUX&0b11100000)|(6+adcreadchannel);
 4ea:	97 b1       	in	r25, 0x07	; 7
 4ec:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <adcreadchannel>
 4f0:	90 7e       	andi	r25, 0xE0	; 224
 4f2:	8a 5f       	subi	r24, 0xFA	; 250
 4f4:	89 2b       	or	r24, r25
 4f6:	87 b9       	out	0x07, r24	; 7
	//ADCSRA|=(1<<ADSC);
	
	
	
	sei();
 4f8:	78 94       	sei
	
    LcdInit();
 4fa:	87 e2       	ldi	r24, 0x27	; 39
 4fc:	0e 94 cc 00 	call	0x198	; 0x198 <_Z7LcdInith>
	LcdSetCursor(5,0,"Welcome");
 500:	4d e8       	ldi	r20, 0x8D	; 141
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	85 e0       	ldi	r24, 0x05	; 5
 508:	0e 94 10 01 	call	0x220	; 0x220 <_Z12LcdSetCursorhhPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50c:	2f ef       	ldi	r18, 0xFF	; 255
 50e:	34 e3       	ldi	r19, 0x34	; 52
 510:	8c e0       	ldi	r24, 0x0C	; 12
 512:	21 50       	subi	r18, 0x01	; 1
 514:	30 40       	sbci	r19, 0x00	; 0
 516:	80 40       	sbci	r24, 0x00	; 0
 518:	e1 f7       	brne	.-8      	; 0x512 <main+0x8c>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <main+0x96>
 51c:	00 00       	nop
	_delay_ms(500);
	
	
    while (1) 
    {
		selectscan();
 51e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z10selectscanv>
		
		if (!(PIND&(1<<3)))
 522:	83 99       	sbic	0x10, 3	; 16
 524:	03 c0       	rjmp	.+6      	; 0x52c <main+0xa6>
		{emergencyst=1;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <emergencyst>
		}
		
		if (modeSelect==2)
 52c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <modeSelect>
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	a9 f7       	brne	.-22     	; 0x51e <main+0x98>
		{
			uint8_t data=((PINB&0b1110)>>1);
 534:	86 b3       	in	r24, 0x16	; 22
 536:	8e 70       	andi	r24, 0x0E	; 14
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	95 95       	asr	r25
 53c:	87 95       	ror	r24
 53e:	28 2f       	mov	r18, r24
			
			if ((0<data)&&(data<5)&&!emergencyst)
 540:	3f ef       	ldi	r19, 0xFF	; 255
 542:	38 0f       	add	r19, r24
 544:	34 30       	cpi	r19, 0x04	; 4
 546:	28 f5       	brcc	.+74     	; 0x592 <main+0x10c>
 548:	30 91 b4 00 	lds	r19, 0x00B4	; 0x8000b4 <emergencyst>
 54c:	31 11       	cpse	r19, r1
 54e:	21 c0       	rjmp	.+66     	; 0x592 <main+0x10c>
			{
				switch(data){
 550:	99 27       	eor	r25, r25
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	91 05       	cpc	r25, r1
 556:	71 f0       	breq	.+28     	; 0x574 <main+0xee>
 558:	1c f4       	brge	.+6      	; 0x560 <main+0xda>
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	39 f0       	breq	.+14     	; 0x56c <main+0xe6>
 55e:	15 c0       	rjmp	.+42     	; 0x58a <main+0x104>
 560:	83 30       	cpi	r24, 0x03	; 3
 562:	91 05       	cpc	r25, r1
 564:	59 f0       	breq	.+22     	; 0x57c <main+0xf6>
 566:	04 97       	sbiw	r24, 0x04	; 4
 568:	69 f0       	breq	.+26     	; 0x584 <main+0xfe>
 56a:	0f c0       	rjmp	.+30     	; 0x58a <main+0x104>
					case 1:steperMode=3; break;
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 572:	0b c0       	rjmp	.+22     	; 0x58a <main+0x104>
					case 2:steperMode=2; break;
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 57a:	07 c0       	rjmp	.+14     	; 0x58a <main+0x104>
					case 3:steperMode=1; break;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 582:	03 c0       	rjmp	.+6      	; 0x58a <main+0x104>
					case 4:steperMode=4; break;
 584:	84 e0       	ldi	r24, 0x04	; 4
 586:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					
				}
				
			TIMSK|=(1<<OCIE1A);
 58a:	89 b7       	in	r24, 0x39	; 57
 58c:	80 61       	ori	r24, 0x10	; 16
 58e:	89 bf       	out	0x39, r24	; 57
 590:	03 c0       	rjmp	.+6      	; 0x598 <main+0x112>
			} 
			else
			{TIMSK&=~(1<<OCIE1A);
 592:	89 b7       	in	r24, 0x39	; 57
 594:	8f 7e       	andi	r24, 0xEF	; 239
 596:	89 bf       	out	0x39, r24	; 57
			}
					
			
			if (data==1)
 598:	21 30       	cpi	r18, 0x01	; 1
 59a:	09 f6       	brne	.-126    	; 0x51e <main+0x98>
			{PORTA&=~(1<<0);//TRIG pin low
 59c:	8b b3       	in	r24, 0x1b	; 27
 59e:	8e 7f       	andi	r24, 0xFE	; 254
 5a0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a2:	95 e8       	ldi	r25, 0x85	; 133
 5a4:	9a 95       	dec	r25
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <main+0x11e>
 5a8:	00 00       	nop
				_delay_us(50);//wait 50 micro sec
				PORTA|=(1<<0);//TRIG pin high
 5aa:	8b b3       	in	r24, 0x1b	; 27
 5ac:	81 60       	ori	r24, 0x01	; 1
 5ae:	8b bb       	out	0x1b, r24	; 27
 5b0:	25 e8       	ldi	r18, 0x85	; 133
 5b2:	2a 95       	dec	r18
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <main+0x12c>
 5b6:	00 00       	nop
				_delay_us(50);//wait 50 micro sec
				PORTA&=~(1<<0);////TRIG pin low
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	8e 7f       	andi	r24, 0xFE	; 254
 5bc:	8b bb       	out	0x1b, r24	; 27
				while(!(PINA&(1<<1)))//wait for pulse
 5be:	c9 99       	sbic	0x19, 1	; 25
 5c0:	05 c0       	rjmp	.+10     	; 0x5cc <main+0x146>
				TimerCal=0;//rest timer
 5c2:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <TimerCal+0x1>
 5c6:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <TimerCal>
			{PORTA&=~(1<<0);//TRIG pin low
				_delay_us(50);//wait 50 micro sec
				PORTA|=(1<<0);//TRIG pin high
				_delay_us(50);//wait 50 micro sec
				PORTA&=~(1<<0);////TRIG pin low
				while(!(PINA&(1<<1)))//wait for pulse
 5ca:	f9 cf       	rjmp	.-14     	; 0x5be <main+0x138>
				TimerCal=0;//rest timer
				while((PINA&(1<<1)))////wait for pulse down
 5cc:	c9 9b       	sbis	0x19, 1	; 25
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <main+0x15c>
				ultraINTL=TimerCal;//copy timer value
 5d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <TimerCal>
 5d4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <TimerCal+0x1>
 5d8:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <ultraINTL+0x1>
 5dc:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <ultraINTL>
				PORTA|=(1<<0);//TRIG pin high
				_delay_us(50);//wait 50 micro sec
				PORTA&=~(1<<0);////TRIG pin low
				while(!(PINA&(1<<1)))//wait for pulse
				TimerCal=0;//rest timer
				while((PINA&(1<<1)))////wait for pulse down
 5e0:	f5 cf       	rjmp	.-22     	; 0x5cc <main+0x146>
				ultraINTL=TimerCal;//copy timer value
				ultraINTL=ultraINTL/4.04;
 5e2:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <ultraINTL>
 5e6:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <ultraINTL+0x1>
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 82 04 	call	0x904	; 0x904 <__floatunsisf>
 5f2:	2e ea       	ldi	r18, 0xAE	; 174
 5f4:	37 e4       	ldi	r19, 0x47	; 71
 5f6:	41 e8       	ldi	r20, 0x81	; 129
 5f8:	50 e4       	ldi	r21, 0x40	; 64
 5fa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 5fe:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
 602:	70 93 ba 00 	sts	0x00BA, r23	; 0x8000ba <ultraINTL+0x1>
 606:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <ultraINTL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60a:	3f e7       	ldi	r19, 0x7F	; 127
 60c:	88 e3       	ldi	r24, 0x38	; 56
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	31 50       	subi	r19, 0x01	; 1
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <main+0x18a>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x194>
 61a:	00 00       	nop
				_delay_ms(50);
				
				PORTA&=~(1<<0);//TRIG pin low
 61c:	8b b3       	in	r24, 0x1b	; 27
 61e:	8e 7f       	andi	r24, 0xFE	; 254
 620:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 622:	25 e8       	ldi	r18, 0x85	; 133
 624:	2a 95       	dec	r18
 626:	f1 f7       	brne	.-4      	; 0x624 <main+0x19e>
 628:	00 00       	nop
				_delay_us(50);//wait 50 micro sec
				PORTA|=(1<<0);//TRIG pin high
 62a:	8b b3       	in	r24, 0x1b	; 27
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	8b bb       	out	0x1b, r24	; 27
 630:	35 e8       	ldi	r19, 0x85	; 133
 632:	3a 95       	dec	r19
 634:	f1 f7       	brne	.-4      	; 0x632 <main+0x1ac>
 636:	00 00       	nop
				_delay_us(50);//wait 50 micro sec
				PORTA&=~(1<<0);////TRIG pin low
 638:	8b b3       	in	r24, 0x1b	; 27
 63a:	8e 7f       	andi	r24, 0xFE	; 254
 63c:	8b bb       	out	0x1b, r24	; 27
				while(!(PINA&(1<<2)))//wait for pulse
 63e:	ca 99       	sbic	0x19, 2	; 25
 640:	05 c0       	rjmp	.+10     	; 0x64c <main+0x1c6>
				TimerCal=0;//rest timer
 642:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <TimerCal+0x1>
 646:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <TimerCal>
				PORTA&=~(1<<0);//TRIG pin low
				_delay_us(50);//wait 50 micro sec
				PORTA|=(1<<0);//TRIG pin high
				_delay_us(50);//wait 50 micro sec
				PORTA&=~(1<<0);////TRIG pin low
				while(!(PINA&(1<<2)))//wait for pulse
 64a:	f9 cf       	rjmp	.-14     	; 0x63e <main+0x1b8>
				TimerCal=0;//rest timer
				while((PINA&(1<<2)))////wait for pulse down
 64c:	ca 9b       	sbis	0x19, 2	; 25
 64e:	09 c0       	rjmp	.+18     	; 0x662 <main+0x1dc>
				ultraINTR=TimerCal;//copy timer value
 650:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <TimerCal>
 654:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <TimerCal+0x1>
 658:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <ultraINTR+0x1>
 65c:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <ultraINTR>
				PORTA|=(1<<0);//TRIG pin high
				_delay_us(50);//wait 50 micro sec
				PORTA&=~(1<<0);////TRIG pin low
				while(!(PINA&(1<<2)))//wait for pulse
				TimerCal=0;//rest timer
				while((PINA&(1<<2)))////wait for pulse down
 660:	f5 cf       	rjmp	.-22     	; 0x64c <main+0x1c6>
				ultraINTR=TimerCal;//copy timer value
				ultraINTR=ultraINTR/4.04;
 662:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <ultraINTR>
 666:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <ultraINTR+0x1>
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 82 04 	call	0x904	; 0x904 <__floatunsisf>
 672:	2e ea       	ldi	r18, 0xAE	; 174
 674:	37 e4       	ldi	r19, 0x47	; 71
 676:	41 e8       	ldi	r20, 0x81	; 129
 678:	50 e4       	ldi	r21, 0x40	; 64
 67a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 67e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
 682:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <ultraINTR>
 686:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <ultraINTR+0x1>
				sprintf(lcddata,"%ucm %ucm ",ultraINTL,ultraINTR);
 68a:	7f 93       	push	r23
 68c:	6f 93       	push	r22
 68e:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <ultraINTL+0x1>
 692:	8f 93       	push	r24
 694:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <ultraINTL>
 698:	8f 93       	push	r24
 69a:	85 e9       	ldi	r24, 0x95	; 149
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	9f 93       	push	r25
 6a0:	8f 93       	push	r24
 6a2:	80 ea       	ldi	r24, 0xA0	; 160
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	9f 93       	push	r25
 6a8:	8f 93       	push	r24
 6aa:	0e 94 10 05 	call	0xa20	; 0xa20 <sprintf>
				LcdSetCursor(0,1,lcddata);
 6ae:	40 ea       	ldi	r20, 0xA0	; 160
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	61 e0       	ldi	r22, 0x01	; 1
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	0e 94 10 01 	call	0x220	; 0x220 <_Z12LcdSetCursorhhPc>
				
				if (ultraINTL<50)
 6ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <ultraINTL>
 6be:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <ultraINTL+0x1>
 6c2:	2d b7       	in	r18, 0x3d	; 61
 6c4:	3e b7       	in	r19, 0x3e	; 62
 6c6:	28 5f       	subi	r18, 0xF8	; 248
 6c8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	f8 94       	cli
 6ce:	3e bf       	out	0x3e, r19	; 62
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	2d bf       	out	0x3d, r18	; 61
 6d4:	c2 97       	sbiw	r24, 0x32	; 50
 6d6:	90 f5       	brcc	.+100    	; 0x73c <main+0x2b6>
				{// 1343431
					PORTA|=(1<<3);
 6d8:	8b b3       	in	r24, 0x1b	; 27
 6da:	88 60       	ori	r24, 0x08	; 8
 6dc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6de:	3f ef       	ldi	r19, 0xFF	; 255
 6e0:	80 e7       	ldi	r24, 0x70	; 112
 6e2:	92 e0       	ldi	r25, 0x02	; 2
 6e4:	31 50       	subi	r19, 0x01	; 1
 6e6:	80 40       	sbci	r24, 0x00	; 0
 6e8:	90 40       	sbci	r25, 0x00	; 0
 6ea:	e1 f7       	brne	.-8      	; 0x6e4 <main+0x25e>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <main+0x268>
 6ee:	00 00       	nop
					_delay_ms(100);
					PORTA&=~(1<<3);
 6f0:	8b b3       	in	r24, 0x1b	; 27
 6f2:	87 7f       	andi	r24, 0xF7	; 247
 6f4:	8b bb       	out	0x1b, r24	; 27

					stepperM(1,50);
 6f6:	62 e3       	ldi	r22, 0x32	; 50
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(3,50);
 700:	62 e3       	ldi	r22, 0x32	; 50
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(4,50);
 70a:	62 e3       	ldi	r22, 0x32	; 50
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	84 e0       	ldi	r24, 0x04	; 4
 710:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(3,50);
 714:	62 e3       	ldi	r22, 0x32	; 50
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(4,50);
 71e:	62 e3       	ldi	r22, 0x32	; 50
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	84 e0       	ldi	r24, 0x04	; 4
 724:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(3,50);
 728:	62 e3       	ldi	r22, 0x32	; 50
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	83 e0       	ldi	r24, 0x03	; 3
 72e:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(1,50);
 732:	62 e3       	ldi	r22, 0x32	; 50
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
				}
				
				if (ultraINTR<50)
 73c:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <ultraINTR>
 740:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <ultraINTR+0x1>
 744:	c2 97       	sbiw	r24, 0x32	; 50
 746:	08 f0       	brcs	.+2      	; 0x74a <main+0x2c4>
 748:	ea ce       	rjmp	.-556    	; 0x51e <main+0x98>
				{// 1343431
					stepperM(4,50);
 74a:	62 e3       	ldi	r22, 0x32	; 50
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	84 e0       	ldi	r24, 0x04	; 4
 750:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(3,50);
 754:	62 e3       	ldi	r22, 0x32	; 50
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	83 e0       	ldi	r24, 0x03	; 3
 75a:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(1,50);
 75e:	62 e3       	ldi	r22, 0x32	; 50
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(3,50);
 768:	62 e3       	ldi	r22, 0x32	; 50
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	83 e0       	ldi	r24, 0x03	; 3
 76e:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(1,50);
 772:	62 e3       	ldi	r22, 0x32	; 50
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(3,50);
 77c:	62 e3       	ldi	r22, 0x32	; 50
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
					stepperM(4,50);
 786:	62 e3       	ldi	r22, 0x32	; 50
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	84 e0       	ldi	r24, 0x04	; 4
 78c:	0e 94 0a 02 	call	0x414	; 0x414 <_Z8stepperMhj>
 790:	c6 ce       	rjmp	.-628    	; 0x51e <main+0x98>

00000792 <__vector_10>:
_delay_us(1000);	
}
}


ISR(TIMER0_COMP_vect){//ultrasonic
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
	TimerCal++;
 7a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <TimerCal>
 7a4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <TimerCal+0x1>
 7a8:	01 96       	adiw	r24, 0x01	; 1
 7aa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <TimerCal+0x1>
 7ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <TimerCal>
	TCNT0=0;
 7b2:	12 be       	out	0x32, r1	; 50
	
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	0f 90       	pop	r0
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	0f 90       	pop	r0
 7be:	1f 90       	pop	r1
 7c0:	18 95       	reti

000007c2 <__divsf3>:
 7c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3x>
 7c6:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_round>
 7ca:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscB>
 7ce:	58 f0       	brcs	.+22     	; 0x7e6 <__divsf3+0x24>
 7d0:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_pscA>
 7d4:	40 f0       	brcs	.+16     	; 0x7e6 <__divsf3+0x24>
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <__divsf3+0x20>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	29 f0       	breq	.+10     	; 0x7e6 <__divsf3+0x24>
 7dc:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 7e0:	51 11       	cpse	r21, r1
 7e2:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>
 7e6:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_nan>

000007ea <__divsf3x>:
 7ea:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_split3>
 7ee:	68 f3       	brcs	.-38     	; 0x7ca <__divsf3+0x8>

000007f0 <__divsf3_pse>:
 7f0:	99 23       	and	r25, r25
 7f2:	b1 f3       	breq	.-20     	; 0x7e0 <__divsf3+0x1e>
 7f4:	55 23       	and	r21, r21
 7f6:	91 f3       	breq	.-28     	; 0x7dc <__divsf3+0x1a>
 7f8:	95 1b       	sub	r25, r21
 7fa:	55 0b       	sbc	r21, r21
 7fc:	bb 27       	eor	r27, r27
 7fe:	aa 27       	eor	r26, r26
 800:	62 17       	cp	r22, r18
 802:	73 07       	cpc	r23, r19
 804:	84 07       	cpc	r24, r20
 806:	38 f0       	brcs	.+14     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	5f 4f       	sbci	r21, 0xFF	; 255
 80c:	22 0f       	add	r18, r18
 80e:	33 1f       	adc	r19, r19
 810:	44 1f       	adc	r20, r20
 812:	aa 1f       	adc	r26, r26
 814:	a9 f3       	breq	.-22     	; 0x800 <__DATA_REGION_LENGTH__>
 816:	35 d0       	rcall	.+106    	; 0x882 <__stack+0x23>
 818:	0e 2e       	mov	r0, r30
 81a:	3a f0       	brmi	.+14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81c:	e0 e8       	ldi	r30, 0x80	; 128
 81e:	32 d0       	rcall	.+100    	; 0x884 <__stack+0x25>
 820:	91 50       	subi	r25, 0x01	; 1
 822:	50 40       	sbci	r21, 0x00	; 0
 824:	e6 95       	lsr	r30
 826:	00 1c       	adc	r0, r0
 828:	ca f7       	brpl	.-14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 82a:	2b d0       	rcall	.+86     	; 0x882 <__stack+0x23>
 82c:	fe 2f       	mov	r31, r30
 82e:	29 d0       	rcall	.+82     	; 0x882 <__stack+0x23>
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	bb 1f       	adc	r27, r27
 838:	26 17       	cp	r18, r22
 83a:	37 07       	cpc	r19, r23
 83c:	48 07       	cpc	r20, r24
 83e:	ab 07       	cpc	r26, r27
 840:	b0 e8       	ldi	r27, 0x80	; 128
 842:	09 f0       	breq	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 844:	bb 0b       	sbc	r27, r27
 846:	80 2d       	mov	r24, r0
 848:	bf 01       	movw	r22, r30
 84a:	ff 27       	eor	r31, r31
 84c:	93 58       	subi	r25, 0x83	; 131
 84e:	5f 4f       	sbci	r21, 0xFF	; 255
 850:	3a f0       	brmi	.+14     	; 0x860 <__stack+0x1>
 852:	9e 3f       	cpi	r25, 0xFE	; 254
 854:	51 05       	cpc	r21, r1
 856:	78 f0       	brcs	.+30     	; 0x876 <__stack+0x17>
 858:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 85c:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	e4 f3       	brlt	.-8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 864:	98 3e       	cpi	r25, 0xE8	; 232
 866:	d4 f3       	brlt	.-12     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 868:	86 95       	lsr	r24
 86a:	77 95       	ror	r23
 86c:	67 95       	ror	r22
 86e:	b7 95       	ror	r27
 870:	f7 95       	ror	r31
 872:	9f 5f       	subi	r25, 0xFF	; 255
 874:	c9 f7       	brne	.-14     	; 0x868 <__stack+0x9>
 876:	88 0f       	add	r24, r24
 878:	91 1d       	adc	r25, r1
 87a:	96 95       	lsr	r25
 87c:	87 95       	ror	r24
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret
 882:	e1 e0       	ldi	r30, 0x01	; 1
 884:	66 0f       	add	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	bb 1f       	adc	r27, r27
 88c:	62 17       	cp	r22, r18
 88e:	73 07       	cpc	r23, r19
 890:	84 07       	cpc	r24, r20
 892:	ba 07       	cpc	r27, r26
 894:	20 f0       	brcs	.+8      	; 0x89e <__stack+0x3f>
 896:	62 1b       	sub	r22, r18
 898:	73 0b       	sbc	r23, r19
 89a:	84 0b       	sbc	r24, r20
 89c:	ba 0b       	sbc	r27, r26
 89e:	ee 1f       	adc	r30, r30
 8a0:	88 f7       	brcc	.-30     	; 0x884 <__stack+0x25>
 8a2:	e0 95       	com	r30
 8a4:	08 95       	ret

000008a6 <__fixunssfsi>:
 8a6:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_splitA>
 8aa:	88 f0       	brcs	.+34     	; 0x8ce <__fixunssfsi+0x28>
 8ac:	9f 57       	subi	r25, 0x7F	; 127
 8ae:	98 f0       	brcs	.+38     	; 0x8d6 <__fixunssfsi+0x30>
 8b0:	b9 2f       	mov	r27, r25
 8b2:	99 27       	eor	r25, r25
 8b4:	b7 51       	subi	r27, 0x17	; 23
 8b6:	b0 f0       	brcs	.+44     	; 0x8e4 <__fixunssfsi+0x3e>
 8b8:	e1 f0       	breq	.+56     	; 0x8f2 <__fixunssfsi+0x4c>
 8ba:	66 0f       	add	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	1a f0       	brmi	.+6      	; 0x8ca <__fixunssfsi+0x24>
 8c4:	ba 95       	dec	r27
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__fixunssfsi+0x14>
 8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <__fixunssfsi+0x4c>
 8ca:	b1 30       	cpi	r27, 0x01	; 1
 8cc:	91 f0       	breq	.+36     	; 0x8f2 <__fixunssfsi+0x4c>
 8ce:	0e 94 09 05 	call	0xa12	; 0xa12 <__fp_zero>
 8d2:	b1 e0       	ldi	r27, 0x01	; 1
 8d4:	08 95       	ret
 8d6:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_zero>
 8da:	67 2f       	mov	r22, r23
 8dc:	78 2f       	mov	r23, r24
 8de:	88 27       	eor	r24, r24
 8e0:	b8 5f       	subi	r27, 0xF8	; 248
 8e2:	39 f0       	breq	.+14     	; 0x8f2 <__fixunssfsi+0x4c>
 8e4:	b9 3f       	cpi	r27, 0xF9	; 249
 8e6:	cc f3       	brlt	.-14     	; 0x8da <__fixunssfsi+0x34>
 8e8:	86 95       	lsr	r24
 8ea:	77 95       	ror	r23
 8ec:	67 95       	ror	r22
 8ee:	b3 95       	inc	r27
 8f0:	d9 f7       	brne	.-10     	; 0x8e8 <__fixunssfsi+0x42>
 8f2:	3e f4       	brtc	.+14     	; 0x902 <__fixunssfsi+0x5c>
 8f4:	90 95       	com	r25
 8f6:	80 95       	com	r24
 8f8:	70 95       	com	r23
 8fa:	61 95       	neg	r22
 8fc:	7f 4f       	sbci	r23, 0xFF	; 255
 8fe:	8f 4f       	sbci	r24, 0xFF	; 255
 900:	9f 4f       	sbci	r25, 0xFF	; 255
 902:	08 95       	ret

00000904 <__floatunsisf>:
 904:	e8 94       	clt
 906:	09 c0       	rjmp	.+18     	; 0x91a <__floatsisf+0x12>

00000908 <__floatsisf>:
 908:	97 fb       	bst	r25, 7
 90a:	3e f4       	brtc	.+14     	; 0x91a <__floatsisf+0x12>
 90c:	90 95       	com	r25
 90e:	80 95       	com	r24
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	99 23       	and	r25, r25
 91c:	a9 f0       	breq	.+42     	; 0x948 <__floatsisf+0x40>
 91e:	f9 2f       	mov	r31, r25
 920:	96 e9       	ldi	r25, 0x96	; 150
 922:	bb 27       	eor	r27, r27
 924:	93 95       	inc	r25
 926:	f6 95       	lsr	r31
 928:	87 95       	ror	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	b7 95       	ror	r27
 930:	f1 11       	cpse	r31, r1
 932:	f8 cf       	rjmp	.-16     	; 0x924 <__floatsisf+0x1c>
 934:	fa f4       	brpl	.+62     	; 0x974 <__floatsisf+0x6c>
 936:	bb 0f       	add	r27, r27
 938:	11 f4       	brne	.+4      	; 0x93e <__floatsisf+0x36>
 93a:	60 ff       	sbrs	r22, 0
 93c:	1b c0       	rjmp	.+54     	; 0x974 <__floatsisf+0x6c>
 93e:	6f 5f       	subi	r22, 0xFF	; 255
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	16 c0       	rjmp	.+44     	; 0x974 <__floatsisf+0x6c>
 948:	88 23       	and	r24, r24
 94a:	11 f0       	breq	.+4      	; 0x950 <__floatsisf+0x48>
 94c:	96 e9       	ldi	r25, 0x96	; 150
 94e:	11 c0       	rjmp	.+34     	; 0x972 <__floatsisf+0x6a>
 950:	77 23       	and	r23, r23
 952:	21 f0       	breq	.+8      	; 0x95c <__floatsisf+0x54>
 954:	9e e8       	ldi	r25, 0x8E	; 142
 956:	87 2f       	mov	r24, r23
 958:	76 2f       	mov	r23, r22
 95a:	05 c0       	rjmp	.+10     	; 0x966 <__floatsisf+0x5e>
 95c:	66 23       	and	r22, r22
 95e:	71 f0       	breq	.+28     	; 0x97c <__floatsisf+0x74>
 960:	96 e8       	ldi	r25, 0x86	; 134
 962:	86 2f       	mov	r24, r22
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	2a f0       	brmi	.+10     	; 0x974 <__floatsisf+0x6c>
 96a:	9a 95       	dec	r25
 96c:	66 0f       	add	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	da f7       	brpl	.-10     	; 0x96a <__floatsisf+0x62>
 974:	88 0f       	add	r24, r24
 976:	96 95       	lsr	r25
 978:	87 95       	ror	r24
 97a:	97 f9       	bld	r25, 7
 97c:	08 95       	ret

0000097e <__fp_inf>:
 97e:	97 f9       	bld	r25, 7
 980:	9f 67       	ori	r25, 0x7F	; 127
 982:	80 e8       	ldi	r24, 0x80	; 128
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	08 95       	ret

0000098a <__fp_nan>:
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	80 ec       	ldi	r24, 0xC0	; 192
 98e:	08 95       	ret

00000990 <__fp_pscA>:
 990:	00 24       	eor	r0, r0
 992:	0a 94       	dec	r0
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	09 06       	cpc	r0, r25
 99c:	08 95       	ret

0000099e <__fp_pscB>:
 99e:	00 24       	eor	r0, r0
 9a0:	0a 94       	dec	r0
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	14 06       	cpc	r1, r20
 9a8:	05 06       	cpc	r0, r21
 9aa:	08 95       	ret

000009ac <__fp_round>:
 9ac:	09 2e       	mov	r0, r25
 9ae:	03 94       	inc	r0
 9b0:	00 0c       	add	r0, r0
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__fp_round+0xc>
 9b4:	88 23       	and	r24, r24
 9b6:	52 f0       	brmi	.+20     	; 0x9cc <__fp_round+0x20>
 9b8:	bb 0f       	add	r27, r27
 9ba:	40 f4       	brcc	.+16     	; 0x9cc <__fp_round+0x20>
 9bc:	bf 2b       	or	r27, r31
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0x18>
 9c0:	60 ff       	sbrs	r22, 0
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__fp_round+0x20>
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__fp_split3>:
 9ce:	57 fd       	sbrc	r21, 7
 9d0:	90 58       	subi	r25, 0x80	; 128
 9d2:	44 0f       	add	r20, r20
 9d4:	55 1f       	adc	r21, r21
 9d6:	59 f0       	breq	.+22     	; 0x9ee <__fp_splitA+0x10>
 9d8:	5f 3f       	cpi	r21, 0xFF	; 255
 9da:	71 f0       	breq	.+28     	; 0x9f8 <__fp_splitA+0x1a>
 9dc:	47 95       	ror	r20

000009de <__fp_splitA>:
 9de:	88 0f       	add	r24, r24
 9e0:	97 fb       	bst	r25, 7
 9e2:	99 1f       	adc	r25, r25
 9e4:	61 f0       	breq	.+24     	; 0x9fe <__fp_splitA+0x20>
 9e6:	9f 3f       	cpi	r25, 0xFF	; 255
 9e8:	79 f0       	breq	.+30     	; 0xa08 <__fp_splitA+0x2a>
 9ea:	87 95       	ror	r24
 9ec:	08 95       	ret
 9ee:	12 16       	cp	r1, r18
 9f0:	13 06       	cpc	r1, r19
 9f2:	14 06       	cpc	r1, r20
 9f4:	55 1f       	adc	r21, r21
 9f6:	f2 cf       	rjmp	.-28     	; 0x9dc <__fp_split3+0xe>
 9f8:	46 95       	lsr	r20
 9fa:	f1 df       	rcall	.-30     	; 0x9de <__fp_splitA>
 9fc:	08 c0       	rjmp	.+16     	; 0xa0e <__fp_splitA+0x30>
 9fe:	16 16       	cp	r1, r22
 a00:	17 06       	cpc	r1, r23
 a02:	18 06       	cpc	r1, r24
 a04:	99 1f       	adc	r25, r25
 a06:	f1 cf       	rjmp	.-30     	; 0x9ea <__fp_splitA+0xc>
 a08:	86 95       	lsr	r24
 a0a:	71 05       	cpc	r23, r1
 a0c:	61 05       	cpc	r22, r1
 a0e:	08 94       	sec
 a10:	08 95       	ret

00000a12 <__fp_zero>:
 a12:	e8 94       	clt

00000a14 <__fp_szero>:
 a14:	bb 27       	eor	r27, r27
 a16:	66 27       	eor	r22, r22
 a18:	77 27       	eor	r23, r23
 a1a:	cb 01       	movw	r24, r22
 a1c:	97 f9       	bld	r25, 7
 a1e:	08 95       	ret

00000a20 <sprintf>:
 a20:	ae e0       	ldi	r26, 0x0E	; 14
 a22:	b0 e0       	ldi	r27, 0x00	; 0
 a24:	e6 e1       	ldi	r30, 0x16	; 22
 a26:	f5 e0       	ldi	r31, 0x05	; 5
 a28:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__prologue_saves__+0x1c>
 a2c:	0d 89       	ldd	r16, Y+21	; 0x15
 a2e:	1e 89       	ldd	r17, Y+22	; 0x16
 a30:	86 e0       	ldi	r24, 0x06	; 6
 a32:	8c 83       	std	Y+4, r24	; 0x04
 a34:	1a 83       	std	Y+2, r17	; 0x02
 a36:	09 83       	std	Y+1, r16	; 0x01
 a38:	8f ef       	ldi	r24, 0xFF	; 255
 a3a:	9f e7       	ldi	r25, 0x7F	; 127
 a3c:	9e 83       	std	Y+6, r25	; 0x06
 a3e:	8d 83       	std	Y+5, r24	; 0x05
 a40:	ae 01       	movw	r20, r28
 a42:	47 5e       	subi	r20, 0xE7	; 231
 a44:	5f 4f       	sbci	r21, 0xFF	; 255
 a46:	6f 89       	ldd	r22, Y+23	; 0x17
 a48:	78 8d       	ldd	r23, Y+24	; 0x18
 a4a:	ce 01       	movw	r24, r28
 a4c:	01 96       	adiw	r24, 0x01	; 1
 a4e:	0e 94 32 05 	call	0xa64	; 0xa64 <vfprintf>
 a52:	ef 81       	ldd	r30, Y+7	; 0x07
 a54:	f8 85       	ldd	r31, Y+8	; 0x08
 a56:	e0 0f       	add	r30, r16
 a58:	f1 1f       	adc	r31, r17
 a5a:	10 82       	st	Z, r1
 a5c:	2e 96       	adiw	r28, 0x0e	; 14
 a5e:	e4 e0       	ldi	r30, 0x04	; 4
 a60:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__epilogue_restores__+0x1c>

00000a64 <vfprintf>:
 a64:	ab e0       	ldi	r26, 0x0B	; 11
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	e8 e3       	ldi	r30, 0x38	; 56
 a6a:	f5 e0       	ldi	r31, 0x05	; 5
 a6c:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__prologue_saves__>
 a70:	6c 01       	movw	r12, r24
 a72:	7b 01       	movw	r14, r22
 a74:	8a 01       	movw	r16, r20
 a76:	fc 01       	movw	r30, r24
 a78:	17 82       	std	Z+7, r1	; 0x07
 a7a:	16 82       	std	Z+6, r1	; 0x06
 a7c:	83 81       	ldd	r24, Z+3	; 0x03
 a7e:	81 ff       	sbrs	r24, 1
 a80:	cc c1       	rjmp	.+920    	; 0xe1a <vfprintf+0x3b6>
 a82:	ce 01       	movw	r24, r28
 a84:	01 96       	adiw	r24, 0x01	; 1
 a86:	3c 01       	movw	r6, r24
 a88:	f6 01       	movw	r30, r12
 a8a:	93 81       	ldd	r25, Z+3	; 0x03
 a8c:	f7 01       	movw	r30, r14
 a8e:	93 fd       	sbrc	r25, 3
 a90:	85 91       	lpm	r24, Z+
 a92:	93 ff       	sbrs	r25, 3
 a94:	81 91       	ld	r24, Z+
 a96:	7f 01       	movw	r14, r30
 a98:	88 23       	and	r24, r24
 a9a:	09 f4       	brne	.+2      	; 0xa9e <vfprintf+0x3a>
 a9c:	ba c1       	rjmp	.+884    	; 0xe12 <vfprintf+0x3ae>
 a9e:	85 32       	cpi	r24, 0x25	; 37
 aa0:	39 f4       	brne	.+14     	; 0xab0 <vfprintf+0x4c>
 aa2:	93 fd       	sbrc	r25, 3
 aa4:	85 91       	lpm	r24, Z+
 aa6:	93 ff       	sbrs	r25, 3
 aa8:	81 91       	ld	r24, Z+
 aaa:	7f 01       	movw	r14, r30
 aac:	85 32       	cpi	r24, 0x25	; 37
 aae:	29 f4       	brne	.+10     	; 0xaba <vfprintf+0x56>
 ab0:	b6 01       	movw	r22, r12
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 ab8:	e7 cf       	rjmp	.-50     	; 0xa88 <vfprintf+0x24>
 aba:	91 2c       	mov	r9, r1
 abc:	21 2c       	mov	r2, r1
 abe:	31 2c       	mov	r3, r1
 ac0:	ff e1       	ldi	r31, 0x1F	; 31
 ac2:	f3 15       	cp	r31, r3
 ac4:	d8 f0       	brcs	.+54     	; 0xafc <vfprintf+0x98>
 ac6:	8b 32       	cpi	r24, 0x2B	; 43
 ac8:	79 f0       	breq	.+30     	; 0xae8 <vfprintf+0x84>
 aca:	38 f4       	brcc	.+14     	; 0xada <vfprintf+0x76>
 acc:	80 32       	cpi	r24, 0x20	; 32
 ace:	79 f0       	breq	.+30     	; 0xaee <vfprintf+0x8a>
 ad0:	83 32       	cpi	r24, 0x23	; 35
 ad2:	a1 f4       	brne	.+40     	; 0xafc <vfprintf+0x98>
 ad4:	23 2d       	mov	r18, r3
 ad6:	20 61       	ori	r18, 0x10	; 16
 ad8:	1d c0       	rjmp	.+58     	; 0xb14 <vfprintf+0xb0>
 ada:	8d 32       	cpi	r24, 0x2D	; 45
 adc:	61 f0       	breq	.+24     	; 0xaf6 <vfprintf+0x92>
 ade:	80 33       	cpi	r24, 0x30	; 48
 ae0:	69 f4       	brne	.+26     	; 0xafc <vfprintf+0x98>
 ae2:	23 2d       	mov	r18, r3
 ae4:	21 60       	ori	r18, 0x01	; 1
 ae6:	16 c0       	rjmp	.+44     	; 0xb14 <vfprintf+0xb0>
 ae8:	83 2d       	mov	r24, r3
 aea:	82 60       	ori	r24, 0x02	; 2
 aec:	38 2e       	mov	r3, r24
 aee:	e3 2d       	mov	r30, r3
 af0:	e4 60       	ori	r30, 0x04	; 4
 af2:	3e 2e       	mov	r3, r30
 af4:	2a c0       	rjmp	.+84     	; 0xb4a <vfprintf+0xe6>
 af6:	f3 2d       	mov	r31, r3
 af8:	f8 60       	ori	r31, 0x08	; 8
 afa:	1d c0       	rjmp	.+58     	; 0xb36 <vfprintf+0xd2>
 afc:	37 fc       	sbrc	r3, 7
 afe:	2d c0       	rjmp	.+90     	; 0xb5a <vfprintf+0xf6>
 b00:	20 ed       	ldi	r18, 0xD0	; 208
 b02:	28 0f       	add	r18, r24
 b04:	2a 30       	cpi	r18, 0x0A	; 10
 b06:	40 f0       	brcs	.+16     	; 0xb18 <vfprintf+0xb4>
 b08:	8e 32       	cpi	r24, 0x2E	; 46
 b0a:	b9 f4       	brne	.+46     	; 0xb3a <vfprintf+0xd6>
 b0c:	36 fc       	sbrc	r3, 6
 b0e:	81 c1       	rjmp	.+770    	; 0xe12 <vfprintf+0x3ae>
 b10:	23 2d       	mov	r18, r3
 b12:	20 64       	ori	r18, 0x40	; 64
 b14:	32 2e       	mov	r3, r18
 b16:	19 c0       	rjmp	.+50     	; 0xb4a <vfprintf+0xe6>
 b18:	36 fe       	sbrs	r3, 6
 b1a:	06 c0       	rjmp	.+12     	; 0xb28 <vfprintf+0xc4>
 b1c:	8a e0       	ldi	r24, 0x0A	; 10
 b1e:	98 9e       	mul	r9, r24
 b20:	20 0d       	add	r18, r0
 b22:	11 24       	eor	r1, r1
 b24:	92 2e       	mov	r9, r18
 b26:	11 c0       	rjmp	.+34     	; 0xb4a <vfprintf+0xe6>
 b28:	ea e0       	ldi	r30, 0x0A	; 10
 b2a:	2e 9e       	mul	r2, r30
 b2c:	20 0d       	add	r18, r0
 b2e:	11 24       	eor	r1, r1
 b30:	22 2e       	mov	r2, r18
 b32:	f3 2d       	mov	r31, r3
 b34:	f0 62       	ori	r31, 0x20	; 32
 b36:	3f 2e       	mov	r3, r31
 b38:	08 c0       	rjmp	.+16     	; 0xb4a <vfprintf+0xe6>
 b3a:	8c 36       	cpi	r24, 0x6C	; 108
 b3c:	21 f4       	brne	.+8      	; 0xb46 <vfprintf+0xe2>
 b3e:	83 2d       	mov	r24, r3
 b40:	80 68       	ori	r24, 0x80	; 128
 b42:	38 2e       	mov	r3, r24
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <vfprintf+0xe6>
 b46:	88 36       	cpi	r24, 0x68	; 104
 b48:	41 f4       	brne	.+16     	; 0xb5a <vfprintf+0xf6>
 b4a:	f7 01       	movw	r30, r14
 b4c:	93 fd       	sbrc	r25, 3
 b4e:	85 91       	lpm	r24, Z+
 b50:	93 ff       	sbrs	r25, 3
 b52:	81 91       	ld	r24, Z+
 b54:	7f 01       	movw	r14, r30
 b56:	81 11       	cpse	r24, r1
 b58:	b3 cf       	rjmp	.-154    	; 0xac0 <vfprintf+0x5c>
 b5a:	98 2f       	mov	r25, r24
 b5c:	9f 7d       	andi	r25, 0xDF	; 223
 b5e:	95 54       	subi	r25, 0x45	; 69
 b60:	93 30       	cpi	r25, 0x03	; 3
 b62:	28 f4       	brcc	.+10     	; 0xb6e <vfprintf+0x10a>
 b64:	0c 5f       	subi	r16, 0xFC	; 252
 b66:	1f 4f       	sbci	r17, 0xFF	; 255
 b68:	9f e3       	ldi	r25, 0x3F	; 63
 b6a:	99 83       	std	Y+1, r25	; 0x01
 b6c:	0d c0       	rjmp	.+26     	; 0xb88 <vfprintf+0x124>
 b6e:	83 36       	cpi	r24, 0x63	; 99
 b70:	31 f0       	breq	.+12     	; 0xb7e <vfprintf+0x11a>
 b72:	83 37       	cpi	r24, 0x73	; 115
 b74:	71 f0       	breq	.+28     	; 0xb92 <vfprintf+0x12e>
 b76:	83 35       	cpi	r24, 0x53	; 83
 b78:	09 f0       	breq	.+2      	; 0xb7c <vfprintf+0x118>
 b7a:	59 c0       	rjmp	.+178    	; 0xc2e <vfprintf+0x1ca>
 b7c:	21 c0       	rjmp	.+66     	; 0xbc0 <vfprintf+0x15c>
 b7e:	f8 01       	movw	r30, r16
 b80:	80 81       	ld	r24, Z
 b82:	89 83       	std	Y+1, r24	; 0x01
 b84:	0e 5f       	subi	r16, 0xFE	; 254
 b86:	1f 4f       	sbci	r17, 0xFF	; 255
 b88:	88 24       	eor	r8, r8
 b8a:	83 94       	inc	r8
 b8c:	91 2c       	mov	r9, r1
 b8e:	53 01       	movw	r10, r6
 b90:	13 c0       	rjmp	.+38     	; 0xbb8 <vfprintf+0x154>
 b92:	28 01       	movw	r4, r16
 b94:	f2 e0       	ldi	r31, 0x02	; 2
 b96:	4f 0e       	add	r4, r31
 b98:	51 1c       	adc	r5, r1
 b9a:	f8 01       	movw	r30, r16
 b9c:	a0 80       	ld	r10, Z
 b9e:	b1 80       	ldd	r11, Z+1	; 0x01
 ba0:	36 fe       	sbrs	r3, 6
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <vfprintf+0x146>
 ba4:	69 2d       	mov	r22, r9
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <vfprintf+0x14a>
 baa:	6f ef       	ldi	r22, 0xFF	; 255
 bac:	7f ef       	ldi	r23, 0xFF	; 255
 bae:	c5 01       	movw	r24, r10
 bb0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <strnlen>
 bb4:	4c 01       	movw	r8, r24
 bb6:	82 01       	movw	r16, r4
 bb8:	f3 2d       	mov	r31, r3
 bba:	ff 77       	andi	r31, 0x7F	; 127
 bbc:	3f 2e       	mov	r3, r31
 bbe:	16 c0       	rjmp	.+44     	; 0xbec <vfprintf+0x188>
 bc0:	28 01       	movw	r4, r16
 bc2:	22 e0       	ldi	r18, 0x02	; 2
 bc4:	42 0e       	add	r4, r18
 bc6:	51 1c       	adc	r5, r1
 bc8:	f8 01       	movw	r30, r16
 bca:	a0 80       	ld	r10, Z
 bcc:	b1 80       	ldd	r11, Z+1	; 0x01
 bce:	36 fe       	sbrs	r3, 6
 bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <vfprintf+0x174>
 bd2:	69 2d       	mov	r22, r9
 bd4:	70 e0       	ldi	r23, 0x00	; 0
 bd6:	02 c0       	rjmp	.+4      	; 0xbdc <vfprintf+0x178>
 bd8:	6f ef       	ldi	r22, 0xFF	; 255
 bda:	7f ef       	ldi	r23, 0xFF	; 255
 bdc:	c5 01       	movw	r24, r10
 bde:	0e 94 13 07 	call	0xe26	; 0xe26 <strnlen_P>
 be2:	4c 01       	movw	r8, r24
 be4:	f3 2d       	mov	r31, r3
 be6:	f0 68       	ori	r31, 0x80	; 128
 be8:	3f 2e       	mov	r3, r31
 bea:	82 01       	movw	r16, r4
 bec:	33 fc       	sbrc	r3, 3
 bee:	1b c0       	rjmp	.+54     	; 0xc26 <vfprintf+0x1c2>
 bf0:	82 2d       	mov	r24, r2
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	88 16       	cp	r8, r24
 bf6:	99 06       	cpc	r9, r25
 bf8:	b0 f4       	brcc	.+44     	; 0xc26 <vfprintf+0x1c2>
 bfa:	b6 01       	movw	r22, r12
 bfc:	80 e2       	ldi	r24, 0x20	; 32
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 c04:	2a 94       	dec	r2
 c06:	f4 cf       	rjmp	.-24     	; 0xbf0 <vfprintf+0x18c>
 c08:	f5 01       	movw	r30, r10
 c0a:	37 fc       	sbrc	r3, 7
 c0c:	85 91       	lpm	r24, Z+
 c0e:	37 fe       	sbrs	r3, 7
 c10:	81 91       	ld	r24, Z+
 c12:	5f 01       	movw	r10, r30
 c14:	b6 01       	movw	r22, r12
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 c1c:	21 10       	cpse	r2, r1
 c1e:	2a 94       	dec	r2
 c20:	21 e0       	ldi	r18, 0x01	; 1
 c22:	82 1a       	sub	r8, r18
 c24:	91 08       	sbc	r9, r1
 c26:	81 14       	cp	r8, r1
 c28:	91 04       	cpc	r9, r1
 c2a:	71 f7       	brne	.-36     	; 0xc08 <vfprintf+0x1a4>
 c2c:	e8 c0       	rjmp	.+464    	; 0xdfe <vfprintf+0x39a>
 c2e:	84 36       	cpi	r24, 0x64	; 100
 c30:	11 f0       	breq	.+4      	; 0xc36 <vfprintf+0x1d2>
 c32:	89 36       	cpi	r24, 0x69	; 105
 c34:	41 f5       	brne	.+80     	; 0xc86 <vfprintf+0x222>
 c36:	f8 01       	movw	r30, r16
 c38:	37 fe       	sbrs	r3, 7
 c3a:	07 c0       	rjmp	.+14     	; 0xc4a <vfprintf+0x1e6>
 c3c:	60 81       	ld	r22, Z
 c3e:	71 81       	ldd	r23, Z+1	; 0x01
 c40:	82 81       	ldd	r24, Z+2	; 0x02
 c42:	93 81       	ldd	r25, Z+3	; 0x03
 c44:	0c 5f       	subi	r16, 0xFC	; 252
 c46:	1f 4f       	sbci	r17, 0xFF	; 255
 c48:	08 c0       	rjmp	.+16     	; 0xc5a <vfprintf+0x1f6>
 c4a:	60 81       	ld	r22, Z
 c4c:	71 81       	ldd	r23, Z+1	; 0x01
 c4e:	07 2e       	mov	r0, r23
 c50:	00 0c       	add	r0, r0
 c52:	88 0b       	sbc	r24, r24
 c54:	99 0b       	sbc	r25, r25
 c56:	0e 5f       	subi	r16, 0xFE	; 254
 c58:	1f 4f       	sbci	r17, 0xFF	; 255
 c5a:	f3 2d       	mov	r31, r3
 c5c:	ff 76       	andi	r31, 0x6F	; 111
 c5e:	3f 2e       	mov	r3, r31
 c60:	97 ff       	sbrs	r25, 7
 c62:	09 c0       	rjmp	.+18     	; 0xc76 <vfprintf+0x212>
 c64:	90 95       	com	r25
 c66:	80 95       	com	r24
 c68:	70 95       	com	r23
 c6a:	61 95       	neg	r22
 c6c:	7f 4f       	sbci	r23, 0xFF	; 255
 c6e:	8f 4f       	sbci	r24, 0xFF	; 255
 c70:	9f 4f       	sbci	r25, 0xFF	; 255
 c72:	f0 68       	ori	r31, 0x80	; 128
 c74:	3f 2e       	mov	r3, r31
 c76:	2a e0       	ldi	r18, 0x0A	; 10
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	a3 01       	movw	r20, r6
 c7c:	0e 94 65 07 	call	0xeca	; 0xeca <__ultoa_invert>
 c80:	88 2e       	mov	r8, r24
 c82:	86 18       	sub	r8, r6
 c84:	45 c0       	rjmp	.+138    	; 0xd10 <vfprintf+0x2ac>
 c86:	85 37       	cpi	r24, 0x75	; 117
 c88:	31 f4       	brne	.+12     	; 0xc96 <vfprintf+0x232>
 c8a:	23 2d       	mov	r18, r3
 c8c:	2f 7e       	andi	r18, 0xEF	; 239
 c8e:	b2 2e       	mov	r11, r18
 c90:	2a e0       	ldi	r18, 0x0A	; 10
 c92:	30 e0       	ldi	r19, 0x00	; 0
 c94:	25 c0       	rjmp	.+74     	; 0xce0 <vfprintf+0x27c>
 c96:	93 2d       	mov	r25, r3
 c98:	99 7f       	andi	r25, 0xF9	; 249
 c9a:	b9 2e       	mov	r11, r25
 c9c:	8f 36       	cpi	r24, 0x6F	; 111
 c9e:	c1 f0       	breq	.+48     	; 0xcd0 <vfprintf+0x26c>
 ca0:	18 f4       	brcc	.+6      	; 0xca8 <vfprintf+0x244>
 ca2:	88 35       	cpi	r24, 0x58	; 88
 ca4:	79 f0       	breq	.+30     	; 0xcc4 <vfprintf+0x260>
 ca6:	b5 c0       	rjmp	.+362    	; 0xe12 <vfprintf+0x3ae>
 ca8:	80 37       	cpi	r24, 0x70	; 112
 caa:	19 f0       	breq	.+6      	; 0xcb2 <vfprintf+0x24e>
 cac:	88 37       	cpi	r24, 0x78	; 120
 cae:	21 f0       	breq	.+8      	; 0xcb8 <vfprintf+0x254>
 cb0:	b0 c0       	rjmp	.+352    	; 0xe12 <vfprintf+0x3ae>
 cb2:	e9 2f       	mov	r30, r25
 cb4:	e0 61       	ori	r30, 0x10	; 16
 cb6:	be 2e       	mov	r11, r30
 cb8:	b4 fe       	sbrs	r11, 4
 cba:	0d c0       	rjmp	.+26     	; 0xcd6 <vfprintf+0x272>
 cbc:	fb 2d       	mov	r31, r11
 cbe:	f4 60       	ori	r31, 0x04	; 4
 cc0:	bf 2e       	mov	r11, r31
 cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <vfprintf+0x272>
 cc4:	34 fe       	sbrs	r3, 4
 cc6:	0a c0       	rjmp	.+20     	; 0xcdc <vfprintf+0x278>
 cc8:	29 2f       	mov	r18, r25
 cca:	26 60       	ori	r18, 0x06	; 6
 ccc:	b2 2e       	mov	r11, r18
 cce:	06 c0       	rjmp	.+12     	; 0xcdc <vfprintf+0x278>
 cd0:	28 e0       	ldi	r18, 0x08	; 8
 cd2:	30 e0       	ldi	r19, 0x00	; 0
 cd4:	05 c0       	rjmp	.+10     	; 0xce0 <vfprintf+0x27c>
 cd6:	20 e1       	ldi	r18, 0x10	; 16
 cd8:	30 e0       	ldi	r19, 0x00	; 0
 cda:	02 c0       	rjmp	.+4      	; 0xce0 <vfprintf+0x27c>
 cdc:	20 e1       	ldi	r18, 0x10	; 16
 cde:	32 e0       	ldi	r19, 0x02	; 2
 ce0:	f8 01       	movw	r30, r16
 ce2:	b7 fe       	sbrs	r11, 7
 ce4:	07 c0       	rjmp	.+14     	; 0xcf4 <vfprintf+0x290>
 ce6:	60 81       	ld	r22, Z
 ce8:	71 81       	ldd	r23, Z+1	; 0x01
 cea:	82 81       	ldd	r24, Z+2	; 0x02
 cec:	93 81       	ldd	r25, Z+3	; 0x03
 cee:	0c 5f       	subi	r16, 0xFC	; 252
 cf0:	1f 4f       	sbci	r17, 0xFF	; 255
 cf2:	06 c0       	rjmp	.+12     	; 0xd00 <vfprintf+0x29c>
 cf4:	60 81       	ld	r22, Z
 cf6:	71 81       	ldd	r23, Z+1	; 0x01
 cf8:	80 e0       	ldi	r24, 0x00	; 0
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	0e 5f       	subi	r16, 0xFE	; 254
 cfe:	1f 4f       	sbci	r17, 0xFF	; 255
 d00:	a3 01       	movw	r20, r6
 d02:	0e 94 65 07 	call	0xeca	; 0xeca <__ultoa_invert>
 d06:	88 2e       	mov	r8, r24
 d08:	86 18       	sub	r8, r6
 d0a:	fb 2d       	mov	r31, r11
 d0c:	ff 77       	andi	r31, 0x7F	; 127
 d0e:	3f 2e       	mov	r3, r31
 d10:	36 fe       	sbrs	r3, 6
 d12:	0d c0       	rjmp	.+26     	; 0xd2e <vfprintf+0x2ca>
 d14:	23 2d       	mov	r18, r3
 d16:	2e 7f       	andi	r18, 0xFE	; 254
 d18:	a2 2e       	mov	r10, r18
 d1a:	89 14       	cp	r8, r9
 d1c:	58 f4       	brcc	.+22     	; 0xd34 <vfprintf+0x2d0>
 d1e:	34 fe       	sbrs	r3, 4
 d20:	0b c0       	rjmp	.+22     	; 0xd38 <vfprintf+0x2d4>
 d22:	32 fc       	sbrc	r3, 2
 d24:	09 c0       	rjmp	.+18     	; 0xd38 <vfprintf+0x2d4>
 d26:	83 2d       	mov	r24, r3
 d28:	8e 7e       	andi	r24, 0xEE	; 238
 d2a:	a8 2e       	mov	r10, r24
 d2c:	05 c0       	rjmp	.+10     	; 0xd38 <vfprintf+0x2d4>
 d2e:	b8 2c       	mov	r11, r8
 d30:	a3 2c       	mov	r10, r3
 d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x2d6>
 d34:	b8 2c       	mov	r11, r8
 d36:	01 c0       	rjmp	.+2      	; 0xd3a <vfprintf+0x2d6>
 d38:	b9 2c       	mov	r11, r9
 d3a:	a4 fe       	sbrs	r10, 4
 d3c:	0f c0       	rjmp	.+30     	; 0xd5c <vfprintf+0x2f8>
 d3e:	fe 01       	movw	r30, r28
 d40:	e8 0d       	add	r30, r8
 d42:	f1 1d       	adc	r31, r1
 d44:	80 81       	ld	r24, Z
 d46:	80 33       	cpi	r24, 0x30	; 48
 d48:	21 f4       	brne	.+8      	; 0xd52 <vfprintf+0x2ee>
 d4a:	9a 2d       	mov	r25, r10
 d4c:	99 7e       	andi	r25, 0xE9	; 233
 d4e:	a9 2e       	mov	r10, r25
 d50:	09 c0       	rjmp	.+18     	; 0xd64 <vfprintf+0x300>
 d52:	a2 fe       	sbrs	r10, 2
 d54:	06 c0       	rjmp	.+12     	; 0xd62 <vfprintf+0x2fe>
 d56:	b3 94       	inc	r11
 d58:	b3 94       	inc	r11
 d5a:	04 c0       	rjmp	.+8      	; 0xd64 <vfprintf+0x300>
 d5c:	8a 2d       	mov	r24, r10
 d5e:	86 78       	andi	r24, 0x86	; 134
 d60:	09 f0       	breq	.+2      	; 0xd64 <vfprintf+0x300>
 d62:	b3 94       	inc	r11
 d64:	a3 fc       	sbrc	r10, 3
 d66:	11 c0       	rjmp	.+34     	; 0xd8a <vfprintf+0x326>
 d68:	a0 fe       	sbrs	r10, 0
 d6a:	06 c0       	rjmp	.+12     	; 0xd78 <vfprintf+0x314>
 d6c:	b2 14       	cp	r11, r2
 d6e:	88 f4       	brcc	.+34     	; 0xd92 <vfprintf+0x32e>
 d70:	28 0c       	add	r2, r8
 d72:	92 2c       	mov	r9, r2
 d74:	9b 18       	sub	r9, r11
 d76:	0e c0       	rjmp	.+28     	; 0xd94 <vfprintf+0x330>
 d78:	b2 14       	cp	r11, r2
 d7a:	60 f4       	brcc	.+24     	; 0xd94 <vfprintf+0x330>
 d7c:	b6 01       	movw	r22, r12
 d7e:	80 e2       	ldi	r24, 0x20	; 32
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 d86:	b3 94       	inc	r11
 d88:	f7 cf       	rjmp	.-18     	; 0xd78 <vfprintf+0x314>
 d8a:	b2 14       	cp	r11, r2
 d8c:	18 f4       	brcc	.+6      	; 0xd94 <vfprintf+0x330>
 d8e:	2b 18       	sub	r2, r11
 d90:	02 c0       	rjmp	.+4      	; 0xd96 <vfprintf+0x332>
 d92:	98 2c       	mov	r9, r8
 d94:	21 2c       	mov	r2, r1
 d96:	a4 fe       	sbrs	r10, 4
 d98:	10 c0       	rjmp	.+32     	; 0xdba <vfprintf+0x356>
 d9a:	b6 01       	movw	r22, r12
 d9c:	80 e3       	ldi	r24, 0x30	; 48
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 da4:	a2 fe       	sbrs	r10, 2
 da6:	17 c0       	rjmp	.+46     	; 0xdd6 <vfprintf+0x372>
 da8:	a1 fc       	sbrc	r10, 1
 daa:	03 c0       	rjmp	.+6      	; 0xdb2 <vfprintf+0x34e>
 dac:	88 e7       	ldi	r24, 0x78	; 120
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x352>
 db2:	88 e5       	ldi	r24, 0x58	; 88
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	b6 01       	movw	r22, r12
 db8:	0c c0       	rjmp	.+24     	; 0xdd2 <vfprintf+0x36e>
 dba:	8a 2d       	mov	r24, r10
 dbc:	86 78       	andi	r24, 0x86	; 134
 dbe:	59 f0       	breq	.+22     	; 0xdd6 <vfprintf+0x372>
 dc0:	a1 fe       	sbrs	r10, 1
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x364>
 dc4:	8b e2       	ldi	r24, 0x2B	; 43
 dc6:	01 c0       	rjmp	.+2      	; 0xdca <vfprintf+0x366>
 dc8:	80 e2       	ldi	r24, 0x20	; 32
 dca:	a7 fc       	sbrc	r10, 7
 dcc:	8d e2       	ldi	r24, 0x2D	; 45
 dce:	b6 01       	movw	r22, r12
 dd0:	90 e0       	ldi	r25, 0x00	; 0
 dd2:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 dd6:	89 14       	cp	r8, r9
 dd8:	38 f4       	brcc	.+14     	; 0xde8 <vfprintf+0x384>
 dda:	b6 01       	movw	r22, r12
 ddc:	80 e3       	ldi	r24, 0x30	; 48
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 de4:	9a 94       	dec	r9
 de6:	f7 cf       	rjmp	.-18     	; 0xdd6 <vfprintf+0x372>
 de8:	8a 94       	dec	r8
 dea:	f3 01       	movw	r30, r6
 dec:	e8 0d       	add	r30, r8
 dee:	f1 1d       	adc	r31, r1
 df0:	80 81       	ld	r24, Z
 df2:	b6 01       	movw	r22, r12
 df4:	90 e0       	ldi	r25, 0x00	; 0
 df6:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 dfa:	81 10       	cpse	r8, r1
 dfc:	f5 cf       	rjmp	.-22     	; 0xde8 <vfprintf+0x384>
 dfe:	22 20       	and	r2, r2
 e00:	09 f4       	brne	.+2      	; 0xe04 <vfprintf+0x3a0>
 e02:	42 ce       	rjmp	.-892    	; 0xa88 <vfprintf+0x24>
 e04:	b6 01       	movw	r22, r12
 e06:	80 e2       	ldi	r24, 0x20	; 32
 e08:	90 e0       	ldi	r25, 0x00	; 0
 e0a:	0e 94 29 07 	call	0xe52	; 0xe52 <fputc>
 e0e:	2a 94       	dec	r2
 e10:	f6 cf       	rjmp	.-20     	; 0xdfe <vfprintf+0x39a>
 e12:	f6 01       	movw	r30, r12
 e14:	86 81       	ldd	r24, Z+6	; 0x06
 e16:	97 81       	ldd	r25, Z+7	; 0x07
 e18:	02 c0       	rjmp	.+4      	; 0xe1e <vfprintf+0x3ba>
 e1a:	8f ef       	ldi	r24, 0xFF	; 255
 e1c:	9f ef       	ldi	r25, 0xFF	; 255
 e1e:	2b 96       	adiw	r28, 0x0b	; 11
 e20:	e2 e1       	ldi	r30, 0x12	; 18
 e22:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__epilogue_restores__>

00000e26 <strnlen_P>:
 e26:	fc 01       	movw	r30, r24
 e28:	05 90       	lpm	r0, Z+
 e2a:	61 50       	subi	r22, 0x01	; 1
 e2c:	70 40       	sbci	r23, 0x00	; 0
 e2e:	01 10       	cpse	r0, r1
 e30:	d8 f7       	brcc	.-10     	; 0xe28 <strnlen_P+0x2>
 e32:	80 95       	com	r24
 e34:	90 95       	com	r25
 e36:	8e 0f       	add	r24, r30
 e38:	9f 1f       	adc	r25, r31
 e3a:	08 95       	ret

00000e3c <strnlen>:
 e3c:	fc 01       	movw	r30, r24
 e3e:	61 50       	subi	r22, 0x01	; 1
 e40:	70 40       	sbci	r23, 0x00	; 0
 e42:	01 90       	ld	r0, Z+
 e44:	01 10       	cpse	r0, r1
 e46:	d8 f7       	brcc	.-10     	; 0xe3e <strnlen+0x2>
 e48:	80 95       	com	r24
 e4a:	90 95       	com	r25
 e4c:	8e 0f       	add	r24, r30
 e4e:	9f 1f       	adc	r25, r31
 e50:	08 95       	ret

00000e52 <fputc>:
 e52:	0f 93       	push	r16
 e54:	1f 93       	push	r17
 e56:	cf 93       	push	r28
 e58:	df 93       	push	r29
 e5a:	fb 01       	movw	r30, r22
 e5c:	23 81       	ldd	r18, Z+3	; 0x03
 e5e:	21 fd       	sbrc	r18, 1
 e60:	03 c0       	rjmp	.+6      	; 0xe68 <fputc+0x16>
 e62:	8f ef       	ldi	r24, 0xFF	; 255
 e64:	9f ef       	ldi	r25, 0xFF	; 255
 e66:	2c c0       	rjmp	.+88     	; 0xec0 <fputc+0x6e>
 e68:	22 ff       	sbrs	r18, 2
 e6a:	16 c0       	rjmp	.+44     	; 0xe98 <fputc+0x46>
 e6c:	46 81       	ldd	r20, Z+6	; 0x06
 e6e:	57 81       	ldd	r21, Z+7	; 0x07
 e70:	24 81       	ldd	r18, Z+4	; 0x04
 e72:	35 81       	ldd	r19, Z+5	; 0x05
 e74:	42 17       	cp	r20, r18
 e76:	53 07       	cpc	r21, r19
 e78:	44 f4       	brge	.+16     	; 0xe8a <fputc+0x38>
 e7a:	a0 81       	ld	r26, Z
 e7c:	b1 81       	ldd	r27, Z+1	; 0x01
 e7e:	9d 01       	movw	r18, r26
 e80:	2f 5f       	subi	r18, 0xFF	; 255
 e82:	3f 4f       	sbci	r19, 0xFF	; 255
 e84:	31 83       	std	Z+1, r19	; 0x01
 e86:	20 83       	st	Z, r18
 e88:	8c 93       	st	X, r24
 e8a:	26 81       	ldd	r18, Z+6	; 0x06
 e8c:	37 81       	ldd	r19, Z+7	; 0x07
 e8e:	2f 5f       	subi	r18, 0xFF	; 255
 e90:	3f 4f       	sbci	r19, 0xFF	; 255
 e92:	37 83       	std	Z+7, r19	; 0x07
 e94:	26 83       	std	Z+6, r18	; 0x06
 e96:	14 c0       	rjmp	.+40     	; 0xec0 <fputc+0x6e>
 e98:	8b 01       	movw	r16, r22
 e9a:	ec 01       	movw	r28, r24
 e9c:	fb 01       	movw	r30, r22
 e9e:	00 84       	ldd	r0, Z+8	; 0x08
 ea0:	f1 85       	ldd	r31, Z+9	; 0x09
 ea2:	e0 2d       	mov	r30, r0
 ea4:	09 95       	icall
 ea6:	89 2b       	or	r24, r25
 ea8:	e1 f6       	brne	.-72     	; 0xe62 <fputc+0x10>
 eaa:	d8 01       	movw	r26, r16
 eac:	16 96       	adiw	r26, 0x06	; 6
 eae:	8d 91       	ld	r24, X+
 eb0:	9c 91       	ld	r25, X
 eb2:	17 97       	sbiw	r26, 0x07	; 7
 eb4:	01 96       	adiw	r24, 0x01	; 1
 eb6:	17 96       	adiw	r26, 0x07	; 7
 eb8:	9c 93       	st	X, r25
 eba:	8e 93       	st	-X, r24
 ebc:	16 97       	sbiw	r26, 0x06	; 6
 ebe:	ce 01       	movw	r24, r28
 ec0:	df 91       	pop	r29
 ec2:	cf 91       	pop	r28
 ec4:	1f 91       	pop	r17
 ec6:	0f 91       	pop	r16
 ec8:	08 95       	ret

00000eca <__ultoa_invert>:
 eca:	fa 01       	movw	r30, r20
 ecc:	aa 27       	eor	r26, r26
 ece:	28 30       	cpi	r18, 0x08	; 8
 ed0:	51 f1       	breq	.+84     	; 0xf26 <__ultoa_invert+0x5c>
 ed2:	20 31       	cpi	r18, 0x10	; 16
 ed4:	81 f1       	breq	.+96     	; 0xf36 <__ultoa_invert+0x6c>
 ed6:	e8 94       	clt
 ed8:	6f 93       	push	r22
 eda:	6e 7f       	andi	r22, 0xFE	; 254
 edc:	6e 5f       	subi	r22, 0xFE	; 254
 ede:	7f 4f       	sbci	r23, 0xFF	; 255
 ee0:	8f 4f       	sbci	r24, 0xFF	; 255
 ee2:	9f 4f       	sbci	r25, 0xFF	; 255
 ee4:	af 4f       	sbci	r26, 0xFF	; 255
 ee6:	b1 e0       	ldi	r27, 0x01	; 1
 ee8:	3e d0       	rcall	.+124    	; 0xf66 <__ultoa_invert+0x9c>
 eea:	b4 e0       	ldi	r27, 0x04	; 4
 eec:	3c d0       	rcall	.+120    	; 0xf66 <__ultoa_invert+0x9c>
 eee:	67 0f       	add	r22, r23
 ef0:	78 1f       	adc	r23, r24
 ef2:	89 1f       	adc	r24, r25
 ef4:	9a 1f       	adc	r25, r26
 ef6:	a1 1d       	adc	r26, r1
 ef8:	68 0f       	add	r22, r24
 efa:	79 1f       	adc	r23, r25
 efc:	8a 1f       	adc	r24, r26
 efe:	91 1d       	adc	r25, r1
 f00:	a1 1d       	adc	r26, r1
 f02:	6a 0f       	add	r22, r26
 f04:	71 1d       	adc	r23, r1
 f06:	81 1d       	adc	r24, r1
 f08:	91 1d       	adc	r25, r1
 f0a:	a1 1d       	adc	r26, r1
 f0c:	20 d0       	rcall	.+64     	; 0xf4e <__ultoa_invert+0x84>
 f0e:	09 f4       	brne	.+2      	; 0xf12 <__ultoa_invert+0x48>
 f10:	68 94       	set
 f12:	3f 91       	pop	r19
 f14:	2a e0       	ldi	r18, 0x0A	; 10
 f16:	26 9f       	mul	r18, r22
 f18:	11 24       	eor	r1, r1
 f1a:	30 19       	sub	r19, r0
 f1c:	30 5d       	subi	r19, 0xD0	; 208
 f1e:	31 93       	st	Z+, r19
 f20:	de f6       	brtc	.-74     	; 0xed8 <__ultoa_invert+0xe>
 f22:	cf 01       	movw	r24, r30
 f24:	08 95       	ret
 f26:	46 2f       	mov	r20, r22
 f28:	47 70       	andi	r20, 0x07	; 7
 f2a:	40 5d       	subi	r20, 0xD0	; 208
 f2c:	41 93       	st	Z+, r20
 f2e:	b3 e0       	ldi	r27, 0x03	; 3
 f30:	0f d0       	rcall	.+30     	; 0xf50 <__ultoa_invert+0x86>
 f32:	c9 f7       	brne	.-14     	; 0xf26 <__ultoa_invert+0x5c>
 f34:	f6 cf       	rjmp	.-20     	; 0xf22 <__ultoa_invert+0x58>
 f36:	46 2f       	mov	r20, r22
 f38:	4f 70       	andi	r20, 0x0F	; 15
 f3a:	40 5d       	subi	r20, 0xD0	; 208
 f3c:	4a 33       	cpi	r20, 0x3A	; 58
 f3e:	18 f0       	brcs	.+6      	; 0xf46 <__ultoa_invert+0x7c>
 f40:	49 5d       	subi	r20, 0xD9	; 217
 f42:	31 fd       	sbrc	r19, 1
 f44:	40 52       	subi	r20, 0x20	; 32
 f46:	41 93       	st	Z+, r20
 f48:	02 d0       	rcall	.+4      	; 0xf4e <__ultoa_invert+0x84>
 f4a:	a9 f7       	brne	.-22     	; 0xf36 <__ultoa_invert+0x6c>
 f4c:	ea cf       	rjmp	.-44     	; 0xf22 <__ultoa_invert+0x58>
 f4e:	b4 e0       	ldi	r27, 0x04	; 4
 f50:	a6 95       	lsr	r26
 f52:	97 95       	ror	r25
 f54:	87 95       	ror	r24
 f56:	77 95       	ror	r23
 f58:	67 95       	ror	r22
 f5a:	ba 95       	dec	r27
 f5c:	c9 f7       	brne	.-14     	; 0xf50 <__ultoa_invert+0x86>
 f5e:	00 97       	sbiw	r24, 0x00	; 0
 f60:	61 05       	cpc	r22, r1
 f62:	71 05       	cpc	r23, r1
 f64:	08 95       	ret
 f66:	9b 01       	movw	r18, r22
 f68:	ac 01       	movw	r20, r24
 f6a:	0a 2e       	mov	r0, r26
 f6c:	06 94       	lsr	r0
 f6e:	57 95       	ror	r21
 f70:	47 95       	ror	r20
 f72:	37 95       	ror	r19
 f74:	27 95       	ror	r18
 f76:	ba 95       	dec	r27
 f78:	c9 f7       	brne	.-14     	; 0xf6c <__ultoa_invert+0xa2>
 f7a:	62 0f       	add	r22, r18
 f7c:	73 1f       	adc	r23, r19
 f7e:	84 1f       	adc	r24, r20
 f80:	95 1f       	adc	r25, r21
 f82:	a0 1d       	adc	r26, r0
 f84:	08 95       	ret

00000f86 <__prologue_saves__>:
 f86:	2f 92       	push	r2
 f88:	3f 92       	push	r3
 f8a:	4f 92       	push	r4
 f8c:	5f 92       	push	r5
 f8e:	6f 92       	push	r6
 f90:	7f 92       	push	r7
 f92:	8f 92       	push	r8
 f94:	9f 92       	push	r9
 f96:	af 92       	push	r10
 f98:	bf 92       	push	r11
 f9a:	cf 92       	push	r12
 f9c:	df 92       	push	r13
 f9e:	ef 92       	push	r14
 fa0:	ff 92       	push	r15
 fa2:	0f 93       	push	r16
 fa4:	1f 93       	push	r17
 fa6:	cf 93       	push	r28
 fa8:	df 93       	push	r29
 faa:	cd b7       	in	r28, 0x3d	; 61
 fac:	de b7       	in	r29, 0x3e	; 62
 fae:	ca 1b       	sub	r28, r26
 fb0:	db 0b       	sbc	r29, r27
 fb2:	0f b6       	in	r0, 0x3f	; 63
 fb4:	f8 94       	cli
 fb6:	de bf       	out	0x3e, r29	; 62
 fb8:	0f be       	out	0x3f, r0	; 63
 fba:	cd bf       	out	0x3d, r28	; 61
 fbc:	09 94       	ijmp

00000fbe <__epilogue_restores__>:
 fbe:	2a 88       	ldd	r2, Y+18	; 0x12
 fc0:	39 88       	ldd	r3, Y+17	; 0x11
 fc2:	48 88       	ldd	r4, Y+16	; 0x10
 fc4:	5f 84       	ldd	r5, Y+15	; 0x0f
 fc6:	6e 84       	ldd	r6, Y+14	; 0x0e
 fc8:	7d 84       	ldd	r7, Y+13	; 0x0d
 fca:	8c 84       	ldd	r8, Y+12	; 0x0c
 fcc:	9b 84       	ldd	r9, Y+11	; 0x0b
 fce:	aa 84       	ldd	r10, Y+10	; 0x0a
 fd0:	b9 84       	ldd	r11, Y+9	; 0x09
 fd2:	c8 84       	ldd	r12, Y+8	; 0x08
 fd4:	df 80       	ldd	r13, Y+7	; 0x07
 fd6:	ee 80       	ldd	r14, Y+6	; 0x06
 fd8:	fd 80       	ldd	r15, Y+5	; 0x05
 fda:	0c 81       	ldd	r16, Y+4	; 0x04
 fdc:	1b 81       	ldd	r17, Y+3	; 0x03
 fde:	aa 81       	ldd	r26, Y+2	; 0x02
 fe0:	b9 81       	ldd	r27, Y+1	; 0x01
 fe2:	ce 0f       	add	r28, r30
 fe4:	d1 1d       	adc	r29, r1
 fe6:	0f b6       	in	r0, 0x3f	; 63
 fe8:	f8 94       	cli
 fea:	de bf       	out	0x3e, r29	; 62
 fec:	0f be       	out	0x3f, r0	; 63
 fee:	cd bf       	out	0x3d, r28	; 61
 ff0:	ed 01       	movw	r28, r26
 ff2:	08 95       	ret

00000ff4 <_exit>:
 ff4:	f8 94       	cli

00000ff6 <__stop_program>:
 ff6:	ff cf       	rjmp	.-2      	; 0xff6 <__stop_program>

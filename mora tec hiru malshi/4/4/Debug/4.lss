
4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005f4  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055a  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027d  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000334  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000021  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000013b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  74:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z7ReadADCh>:
}

uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
  7c:	97 b1       	in	r25, 0x07	; 7
  7e:	90 7f       	andi	r25, 0xF0	; 240
  80:	8f 70       	andi	r24, 0x0F	; 15
  82:	89 2b       	or	r24, r25
  84:	87 b9       	out	0x07, r24	; 7
	//single conversion mode
	ADCSRA |= (1<<ADSC);
  86:	86 b1       	in	r24, 0x06	; 6
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	86 b9       	out	0x06, r24	; 6
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
  8c:	36 99       	sbic	0x06, 6	; 6
  8e:	fe cf       	rjmp	.-4      	; 0x8c <_Z7ReadADCh+0x10>
	return ADCW;
  90:	84 b1       	in	r24, 0x04	; 4
  92:	95 b1       	in	r25, 0x05	; 5
}
  94:	08 95       	ret

00000096 <main>:

uint16_t ReadADC(uint8_t ADCchannel);

int main(void)
{	
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));   // prescaler 128
  96:	86 b1       	in	r24, 0x06	; 6
  98:	87 60       	ori	r24, 0x07	; 7
  9a:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS0);					//external vcc
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);                            // Turn on ADC
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	86 b9       	out	0x06, r24	; 6
	
    DDRC=0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	PORTA|=(1<<0);
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	8b bb       	out	0x1b, r24	; 27
    while (1) 
    {anx=ReadADC(7);
  b2:	87 e0       	ldi	r24, 0x07	; 7
  b4:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z7ReadADCh>
  b8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <anx+0x1>
  bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <anx>
		if (anx>512+200)
  c0:	89 3c       	cpi	r24, 0xC9	; 201
  c2:	22 e0       	ldi	r18, 0x02	; 2
  c4:	92 07       	cpc	r25, r18
  c6:	38 f0       	brcs	.+14     	; 0xd6 <main+0x40>
		{PORTC|=(1<<3);
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	85 bb       	out	0x15, r24	; 21
			PORTC&=~(1<<2);
  ce:	85 b3       	in	r24, 0x15	; 21
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	10 c0       	rjmp	.+32     	; 0xf6 <main+0x60>
		}
		else if(anx<512-200){
  d6:	88 33       	cpi	r24, 0x38	; 56
  d8:	91 40       	sbci	r25, 0x01	; 1
  da:	38 f4       	brcc	.+14     	; 0xea <main+0x54>
		PORTC|=(1<<2);
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	85 bb       	out	0x15, r24	; 21
		PORTC&=~(1<<3);
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	87 7f       	andi	r24, 0xF7	; 247
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	06 c0       	rjmp	.+12     	; 0xf6 <main+0x60>
		}
		else{
		PORTC&=~(1<<3);
  ea:	85 b3       	in	r24, 0x15	; 21
  ec:	87 7f       	andi	r24, 0xF7	; 247
  ee:	85 bb       	out	0x15, r24	; 21
		PORTC&=~(1<<2);
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	85 bb       	out	0x15, r24	; 21
		}
		
		anY=ReadADC(6);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z7ReadADCh>
  fc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		if (anY>512+200)
 104:	89 3c       	cpi	r24, 0xC9	; 201
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	92 07       	cpc	r25, r18
 10a:	38 f0       	brcs	.+14     	; 0x11a <main+0x84>
		{PORTC|=(1<<0);
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	85 bb       	out	0x15, r24	; 21
			PORTC&=~(1<<1);
 112:	85 b3       	in	r24, 0x15	; 21
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	85 bb       	out	0x15, r24	; 21
 118:	10 c0       	rjmp	.+32     	; 0x13a <main+0xa4>
		}
		else if(anY<512-200){
 11a:	88 33       	cpi	r24, 0x38	; 56
 11c:	91 40       	sbci	r25, 0x01	; 1
 11e:	38 f4       	brcc	.+14     	; 0x12e <main+0x98>
			PORTC|=(1<<1);
 120:	85 b3       	in	r24, 0x15	; 21
 122:	82 60       	ori	r24, 0x02	; 2
 124:	85 bb       	out	0x15, r24	; 21
			PORTC&=~(1<<0);
 126:	85 b3       	in	r24, 0x15	; 21
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	06 c0       	rjmp	.+12     	; 0x13a <main+0xa4>
		}
		else{
			PORTC&=~(1<<0);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	8e 7f       	andi	r24, 0xFE	; 254
 132:	85 bb       	out	0x15, r24	; 21
			PORTC&=~(1<<1);
 134:	85 b3       	in	r24, 0x15	; 21
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	85 bb       	out	0x15, r24	; 21
		}
		
		if (PINA&0b1)
 13a:	c8 9b       	sbis	0x19, 0	; 25
 13c:	04 c0       	rjmp	.+8      	; 0x146 <main+0xb0>
		{PORTC&=~(1<<7);
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	8f 77       	andi	r24, 0x7F	; 127
 142:	85 bb       	out	0x15, r24	; 21
 144:	b6 cf       	rjmp	.-148    	; 0xb2 <main+0x1c>
		} 
		else
		{PORTC|=(1<<7);
 146:	85 b3       	in	r24, 0x15	; 21
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	b2 cf       	rjmp	.-156    	; 0xb2 <main+0x1c>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>

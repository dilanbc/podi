
remote_control_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800202  00800202  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b72  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6e  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000559  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00002219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__vector_1>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e2 ee       	ldi	r30, 0xE2	; 226
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a2 30       	cpi	r26, 0x02	; 2
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	a2 e0       	ldi	r26, 0x02	; 2
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a4 30       	cpi	r26, 0x04	; 4
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	02 d0       	rcall	.+4      	; 0x108 <main>
 104:	6c c0       	rjmp	.+216    	; 0x1de <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <main>:
bool isLightOn = true;
int lightIntensity = 0;

int main(void){
	/* enable FALLING edge interrupt on INT0 pin*/
	EICRA = 0b00000010;			//set falling edge interrupt on INT0 pin
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000001;			//enable external interrupt on INT0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	8d bb       	out	0x1d, r24	; 29
	sei();						//enable globe interrupts
 112:	78 94       	sei
	       PWM Duty cycle					PWM duty cycle
		   
	PWM period is defined by the PWM mode and TOP value (refer data sheet page 128)
	PWM duty cycle is define in OCR1A  registers
	*/
	DDRB = 0b00100000;			//make PORTB PD7 output
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 0b10101001;		// set OC1A pin to clear automatically the TCNT1 value equals to OCR1A
 118:	89 ea       	ldi	r24, 0xA9	; 169
 11a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
								//fast PWM mode 8bit
	TCCR1B = 0b00001001;		//prescale value 1:1	
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	/* infinite loop */
    while (1) {
		OCR1A = lightIntensity;
 124:	e8 e8       	ldi	r30, 0x88	; 136
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 12c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 130:	91 83       	std	Z+1, r25	; 0x01
 132:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	87 ea       	ldi	r24, 0xA7	; 167
 136:	91 e6       	ldi	r25, 0x61	; 97
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x30>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x36>
 13e:	00 00       	nop
 140:	f3 cf       	rjmp	.-26     	; 0x128 <main+0x20>

00000142 <__vector_1>:
	   |
	   |_ _ _ _ 0V
  

 */
ISR(INT0_vect){
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
	int code =  PINE;
 154:	8c b1       	in	r24, 0x0c	; 12
	
	switch (PINE){
 156:	8c b1       	in	r24, 0x0c	; 12
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	51 f1       	breq	.+84     	; 0x1b0 <__vector_1+0x6e>
 15c:	87 30       	cpi	r24, 0x07	; 7
 15e:	19 f0       	breq	.+6      	; 0x166 <__vector_1+0x24>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	a1 f5       	brne	.+104    	; 0x1cc <__vector_1+0x8a>
 164:	14 c0       	rjmp	.+40     	; 0x18e <__vector_1+0x4c>
		case 0b00000111:					//if port reads as 111 ON or OFF the system based on previous condition
			if (isLightOn){					//if already on
 166:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_start>
 16a:	99 23       	and	r25, r25
 16c:	29 f0       	breq	.+10     	; 0x178 <__vector_1+0x36>
				lightIntensity = 0;			//set light to full off
 16e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
 172:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
 176:	06 c0       	rjmp	.+12     	; 0x184 <__vector_1+0x42>
			}else{							//if already off
				lightIntensity = 255;		//set light to full ON	
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <__data_end+0x1>
 180:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__data_end>
			}
			isLightOn = !isLightOn;			//reset the status
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	89 27       	eor	r24, r25
 188:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			break;
 18c:	1f c0       	rjmp	.+62     	; 0x1cc <__vector_1+0x8a>
		case 0b00000001:					//if port reads as 001 then increment the brightness
			if(isLightOn && lightIntensity + 50 <  255){
 18e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 192:	88 23       	and	r24, r24
 194:	d9 f0       	breq	.+54     	; 0x1cc <__vector_1+0x8a>
 196:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 19a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 19e:	c2 96       	adiw	r24, 0x32	; 50
 1a0:	8f 3f       	cpi	r24, 0xFF	; 255
 1a2:	91 05       	cpc	r25, r1
 1a4:	9c f4       	brge	.+38     	; 0x1cc <__vector_1+0x8a>
				lightIntensity += 50;
 1a6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 1aa:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 1ae:	0e c0       	rjmp	.+28     	; 0x1cc <__vector_1+0x8a>
			}
			break;
		case 0b00000010:					//if port read as 010 decrement the brightness
			if(isLightOn  && lightIntensity - 50 >= 0){
 1b0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 1b4:	88 23       	and	r24, r24
 1b6:	51 f0       	breq	.+20     	; 0x1cc <__vector_1+0x8a>
 1b8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 1bc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 1c0:	c2 97       	sbiw	r24, 0x32	; 50
 1c2:	22 f0       	brmi	.+8      	; 0x1cc <__vector_1+0x8a>
				lightIntensity-= 50;
 1c4:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 1c8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
			}
	}
	
}
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>

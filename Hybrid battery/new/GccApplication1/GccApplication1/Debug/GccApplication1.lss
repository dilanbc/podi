
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000314  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800102  00800102  000003aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1d  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  000011a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004de  00000000  00000000  000019dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ef  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000772  00000000  00000000  000025f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002d69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 33       	cpi	r26, 0x38	; 56
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  9e:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
		waitbool=1;
		
	}
	
	return waitbool;
}
  a6:	9c 01       	movw	r18, r24
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e2       	ldi	r22, 0x20	; 32
  ae:	71 ea       	ldi	r23, 0xA1	; 161
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__udivmodsi4>
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
  bc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  c0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c4:	88 e9       	ldi	r24, 0x98	; 152
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <_Z14USART_Transmith>:
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	95 ff       	sbrs	r25, 5
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <_Z14USART_Transmith+0x4>
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e2:	08 95       	ret

000000e4 <_Z16USART_TxStringlnPc>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <_Z16USART_TxStringlnPc+0x18>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
  f6:	89 91       	ld	r24, Y+
  f8:	81 11       	cpse	r24, r1
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <_Z16USART_TxStringlnPc+0xe>
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z14USART_Transmith>
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <__vector_18>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
 126:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 12a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rxvalue>
 12e:	88 23       	and	r24, r24
 130:	69 f0       	breq	.+26     	; 0x14c <__vector_18+0x3e>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	ea 5f       	subi	r30, 0xFA	; 250
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	90 81       	ld	r25, Z
 142:	91 11       	cpse	r25, r1
 144:	f7 cf       	rjmp	.-18     	; 0x134 <__vector_18+0x26>
 146:	82 33       	cpi	r24, 0x32	; 50
 148:	40 f4       	brcc	.+16     	; 0x15a <__vector_18+0x4c>
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__vector_18+0x42>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	ea 5f       	subi	r30, 0xFA	; 250
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	40 83       	st	Z, r20
 158:	0b c0       	rjmp	.+22     	; 0x170 <__vector_18+0x62>
 15a:	e6 e0       	ldi	r30, 0x06	; 6
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	27 e3       	ldi	r18, 0x37	; 55
 160:	31 e0       	ldi	r19, 0x01	; 1
 162:	81 81       	ldd	r24, Z+1	; 0x01
 164:	81 93       	st	Z+, r24
 166:	2e 17       	cp	r18, r30
 168:	3f 07       	cpc	r19, r31
 16a:	d9 f7       	brne	.-10     	; 0x162 <__vector_18+0x54>
 16c:	40 93 37 01 	sts	0x0137, r20	; 0x800137 <rxvalue+0x31>
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <_Z10shiftwritehb>:
		
		
	}
}

void shiftwrite(uint8_t shiftvalue,bool state){
 188:	28 2f       	mov	r18, r24
 18a:	36 2f       	mov	r19, r22
	
	
	shiftvalue=shiftvalue+((shiftvalue-1)/7);  //Q0 pin remove
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	67 e0       	ldi	r22, 0x07	; 7
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 3e 01 	call	0x27c	; 0x27c <__divmodhi4>
 198:	62 0f       	add	r22, r18
	
	if (state)
 19a:	33 23       	and	r19, r19
 19c:	99 f0       	breq	.+38     	; 0x1c4 <_Z10shiftwritehb+0x3c>
	{shiftMemory[shiftvalue/8]|=(1<<(shiftvalue%8));
 19e:	e6 2f       	mov	r30, r22
 1a0:	e6 95       	lsr	r30
 1a2:	e6 95       	lsr	r30
 1a4:	e6 95       	lsr	r30
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ee 5f       	subi	r30, 0xFE	; 254
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	20 81       	ld	r18, Z
 1ae:	67 70       	andi	r22, 0x07	; 7
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <_Z10shiftwritehb+0x32>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <_Z10shiftwritehb+0x2e>
 1be:	82 2b       	or	r24, r18
 1c0:	80 83       	st	Z, r24
 1c2:	13 c0       	rjmp	.+38     	; 0x1ea <_Z10shiftwritehb+0x62>
	} 
	else
	{shiftMemory[shiftvalue/8]&=~(1<<(shiftvalue%8));
 1c4:	e6 2f       	mov	r30, r22
 1c6:	e6 95       	lsr	r30
 1c8:	e6 95       	lsr	r30
 1ca:	e6 95       	lsr	r30
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ee 5f       	subi	r30, 0xFE	; 254
 1d0:	fe 4f       	sbci	r31, 0xFE	; 254
 1d2:	20 81       	ld	r18, Z
 1d4:	67 70       	andi	r22, 0x07	; 7
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <_Z10shiftwritehb+0x58>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <_Z10shiftwritehb+0x54>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	80 83       	st	Z, r24
	}
	
	
	
	
	CSPORT&=~(1<<CS);	
 1ea:	29 98       	cbi	0x05, 1	; 5
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t i=0;i<4;i++)
	{SPDR = shiftMemory[3-i];
 1f0:	fc 01       	movw	r30, r24
 1f2:	ee 5f       	subi	r30, 0xFE	; 254
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	20 81       	ld	r18, Z
 1f8:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & (1 << SPIF)));
 1fa:	0d b4       	in	r0, 0x2d	; 45
 1fc:	07 fe       	sbrs	r0, 7
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <_Z10shiftwritehb+0x72>
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	b0 f7       	brcc	.-20     	; 0x1f0 <_Z10shiftwritehb+0x68>
	}
	CSPORT|=(1<<CS);
 204:	29 9a       	sbi	0x05, 1	; 5
 206:	08 95       	ret

00000208 <_Z10shiftClearv>:
}

void shiftClear(){
	
	for(uint8_t i=0;i<4;i++){
		shiftMemory[i]=0;
 208:	e2 e0       	ldi	r30, 0x02	; 2
 20a:	f1 e0       	ldi	r31, 0x01	; 1
 20c:	10 82       	st	Z, r1
 20e:	11 82       	std	Z+1, r1	; 0x01
 210:	12 82       	std	Z+2, r1	; 0x02
 212:	13 82       	std	Z+3, r1	; 0x03
 214:	08 95       	ret

00000216 <main>:
void shiftwrite(uint8_t shiftvalue,bool state);
void shiftClear();


int main(void)
{	USART_Init(9600);
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	95 e2       	ldi	r25, 0x25	; 37
 21a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 21e:	81 e5       	ldi	r24, 0x51	; 81
 220:	8c bd       	out	0x2c, r24	; 44
	SPI_DDR |=  (1 << MOSI) | (1 << SCK);
 222:	84 b1       	in	r24, 0x04	; 4
 224:	88 62       	ori	r24, 0x28	; 40
 226:	84 b9       	out	0x04, r24	; 4
	SPI_DDR&=~(1<<MISO);
 228:	24 98       	cbi	0x04, 4	; 4
	CSDDR |=(1<<CS);
 22a:	21 9a       	sbi	0x04, 1	; 4
	CSPORT|=(1<<CS);
 22c:	29 9a       	sbi	0x05, 1	; 5
	
	SPI_DDR|=(1<<2);
 22e:	22 9a       	sbi	0x04, 2	; 4
	PORTB|=(1<<2);
 230:	2a 9a       	sbi	0x05, 2	; 5
	int j=-0;
	while (1)
	{	
		
		
		USART_TxStringln("E");
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z16USART_TxStringlnPc>
		shiftwrite(j,1);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 c4 00 	call	0x188	; 0x188 <_Z10shiftwritehb>
		j++;
 242:	c1 e0       	ldi	r28, 0x01	; 1
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	04 c0       	rjmp	.+8      	; 0x250 <main+0x3a>
		if (j==9)
		{j=0;
			shiftClear();
 248:	0e 94 04 01 	call	0x208	; 0x208 <_Z10shiftClearv>
		
		USART_TxStringln("E");
		shiftwrite(j,1);
		j++;
		if (j==9)
		{j=0;
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	81 ee       	ldi	r24, 0xE1	; 225
 254:	94 e0       	ldi	r25, 0x04	; 4
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x40>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x4a>
 260:	00 00       	nop
	int j=-0;
	while (1)
	{	
		
		
		USART_TxStringln("E");
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z16USART_TxStringlnPc>
		shiftwrite(j,1);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	8c 2f       	mov	r24, r28
 26e:	0e 94 c4 00 	call	0x188	; 0x188 <_Z10shiftwritehb>
		j++;
 272:	21 96       	adiw	r28, 0x01	; 1
		if (j==9)
 274:	c9 30       	cpi	r28, 0x09	; 9
 276:	d1 05       	cpc	r29, r1
 278:	59 f7       	brne	.-42     	; 0x250 <main+0x3a>
 27a:	e6 cf       	rjmp	.-52     	; 0x248 <main+0x32>

0000027c <__divmodhi4>:
 27c:	97 fb       	bst	r25, 7
 27e:	07 2e       	mov	r0, r23
 280:	16 f4       	brtc	.+4      	; 0x286 <__divmodhi4+0xa>
 282:	00 94       	com	r0
 284:	07 d0       	rcall	.+14     	; 0x294 <__divmodhi4_neg1>
 286:	77 fd       	sbrc	r23, 7
 288:	09 d0       	rcall	.+18     	; 0x29c <__divmodhi4_neg2>
 28a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__udivmodhi4>
 28e:	07 fc       	sbrc	r0, 7
 290:	05 d0       	rcall	.+10     	; 0x29c <__divmodhi4_neg2>
 292:	3e f4       	brtc	.+14     	; 0x2a2 <__divmodhi4_exit>

00000294 <__divmodhi4_neg1>:
 294:	90 95       	com	r25
 296:	81 95       	neg	r24
 298:	9f 4f       	sbci	r25, 0xFF	; 255
 29a:	08 95       	ret

0000029c <__divmodhi4_neg2>:
 29c:	70 95       	com	r23
 29e:	61 95       	neg	r22
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255

000002a2 <__divmodhi4_exit>:
 2a2:	08 95       	ret

000002a4 <__udivmodsi4>:
 2a4:	a1 e2       	ldi	r26, 0x21	; 33
 2a6:	1a 2e       	mov	r1, r26
 2a8:	aa 1b       	sub	r26, r26
 2aa:	bb 1b       	sub	r27, r27
 2ac:	fd 01       	movw	r30, r26
 2ae:	0d c0       	rjmp	.+26     	; 0x2ca <__udivmodsi4_ep>

000002b0 <__udivmodsi4_loop>:
 2b0:	aa 1f       	adc	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	ee 1f       	adc	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	a2 17       	cp	r26, r18
 2ba:	b3 07       	cpc	r27, r19
 2bc:	e4 07       	cpc	r30, r20
 2be:	f5 07       	cpc	r31, r21
 2c0:	20 f0       	brcs	.+8      	; 0x2ca <__udivmodsi4_ep>
 2c2:	a2 1b       	sub	r26, r18
 2c4:	b3 0b       	sbc	r27, r19
 2c6:	e4 0b       	sbc	r30, r20
 2c8:	f5 0b       	sbc	r31, r21

000002ca <__udivmodsi4_ep>:
 2ca:	66 1f       	adc	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	88 1f       	adc	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	1a 94       	dec	r1
 2d4:	69 f7       	brne	.-38     	; 0x2b0 <__udivmodsi4_loop>
 2d6:	60 95       	com	r22
 2d8:	70 95       	com	r23
 2da:	80 95       	com	r24
 2dc:	90 95       	com	r25
 2de:	9b 01       	movw	r18, r22
 2e0:	ac 01       	movw	r20, r24
 2e2:	bd 01       	movw	r22, r26
 2e4:	cf 01       	movw	r24, r30
 2e6:	08 95       	ret

000002e8 <__udivmodhi4>:
 2e8:	aa 1b       	sub	r26, r26
 2ea:	bb 1b       	sub	r27, r27
 2ec:	51 e1       	ldi	r21, 0x11	; 17
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <__udivmodhi4_ep>

000002f0 <__udivmodhi4_loop>:
 2f0:	aa 1f       	adc	r26, r26
 2f2:	bb 1f       	adc	r27, r27
 2f4:	a6 17       	cp	r26, r22
 2f6:	b7 07       	cpc	r27, r23
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <__udivmodhi4_ep>
 2fa:	a6 1b       	sub	r26, r22
 2fc:	b7 0b       	sbc	r27, r23

000002fe <__udivmodhi4_ep>:
 2fe:	88 1f       	adc	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	5a 95       	dec	r21
 304:	a9 f7       	brne	.-22     	; 0x2f0 <__udivmodhi4_loop>
 306:	80 95       	com	r24
 308:	90 95       	com	r25
 30a:	bc 01       	movw	r22, r24
 30c:	cd 01       	movw	r24, r26
 30e:	08 95       	ret

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>

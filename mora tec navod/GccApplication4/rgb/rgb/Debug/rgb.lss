
rgb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1e  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000785  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000334  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000447  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000258  00000000  00000000  00001ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Init>:
	
	char fString[10];
	dtostrf(number,length,deciP,fString);
	USART_TxString(fString);
	
}
  90:	9c 01       	movw	r18, r24
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	60 e2       	ldi	r22, 0x20	; 32
  98:	71 ea       	ldi	r23, 0xA1	; 161
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 ab 00 	call	0x156	; 0x156 <__divmodsi4>
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	31 09       	sbc	r19, r1
  a6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <USART_Transmit>:
  be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c2:	95 ff       	sbrs	r25, 5
  c4:	fc cf       	rjmp	.-8      	; 0xbe <USART_Transmit>
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ca:	08 95       	ret

000000cc <main>:
uint16_t analog;
uint8_t last=0;

int main(void)
{
   USART_Init(9600);
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	95 e2       	ldi	r25, 0x25	; 37
  d0:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
   ADMUX|=(1<<REFS0);//reference select
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
   ADCSRA|=(1<<ADEN);//enable analog
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
   ADCSRA|=(1<<ADPS0);//prescaler=2
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
   
    while (1) 
    {
		if (PIND&0b1100)
  ee:	89 b1       	in	r24, 0x09	; 9
  f0:	8c 70       	andi	r24, 0x0C	; 12
  f2:	e9 f3       	breq	.-6      	; 0xee <main+0x22>
		{
			uint8_t pin=((PIND&0b1100)>>2)-1;
  f4:	89 b1       	in	r24, 0x09	; 9
  f6:	8c 70       	andi	r24, 0x0C	; 12
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	95 95       	asr	r25
  fc:	87 95       	ror	r24
  fe:	95 95       	asr	r25
 100:	87 95       	ror	r24
 102:	cf ef       	ldi	r28, 0xFF	; 255
 104:	c8 0f       	add	r28, r24
			
			if (pin!=last)
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10a:	c8 17       	cp	r28, r24
 10c:	81 f3       	breq	.-32     	; 0xee <main+0x22>
			{ADMUX = (ADMUX & 0xF0) | (pin & 0x0F);
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	98 2f       	mov	r25, r24
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	8c 2f       	mov	r24, r28
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	89 2b       	or	r24, r25
 11e:	80 83       	st	Z, r24
		
		ADCSRA |= (1<<ADSC);
 120:	ea e7       	ldi	r30, 0x7A	; 122
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 64       	ori	r24, 0x40	; 64
 128:	80 83       	st	Z, r24
		
		while( ADCSRA & (1<<ADSC) );//wait for 0
 12a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 12e:	86 fd       	sbrc	r24, 6
 130:	fc cf       	rjmp	.-8      	; 0x12a <main+0x5e>
		analog= ADC;
 132:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 136:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 13a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <analog+0x1>
 13e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <analog>
		USART_Transmit((analog-1)/4);
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Transmit>
		last=pin;
 150:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	cc cf       	rjmp	.-104    	; 0xee <main+0x22>

00000156 <__divmodsi4>:
 156:	05 2e       	mov	r0, r21
 158:	97 fb       	bst	r25, 7
 15a:	1e f4       	brtc	.+6      	; 0x162 <__divmodsi4+0xc>
 15c:	00 94       	com	r0
 15e:	0e 94 c2 00 	call	0x184	; 0x184 <__negsi2>
 162:	57 fd       	sbrc	r21, 7
 164:	07 d0       	rcall	.+14     	; 0x174 <__divmodsi4_neg2>
 166:	0e 94 ca 00 	call	0x194	; 0x194 <__udivmodsi4>
 16a:	07 fc       	sbrc	r0, 7
 16c:	03 d0       	rcall	.+6      	; 0x174 <__divmodsi4_neg2>
 16e:	4e f4       	brtc	.+18     	; 0x182 <__divmodsi4_exit>
 170:	0c 94 c2 00 	jmp	0x184	; 0x184 <__negsi2>

00000174 <__divmodsi4_neg2>:
 174:	50 95       	com	r21
 176:	40 95       	com	r20
 178:	30 95       	com	r19
 17a:	21 95       	neg	r18
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	4f 4f       	sbci	r20, 0xFF	; 255
 180:	5f 4f       	sbci	r21, 0xFF	; 255

00000182 <__divmodsi4_exit>:
 182:	08 95       	ret

00000184 <__negsi2>:
 184:	90 95       	com	r25
 186:	80 95       	com	r24
 188:	70 95       	com	r23
 18a:	61 95       	neg	r22
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	8f 4f       	sbci	r24, 0xFF	; 255
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	08 95       	ret

00000194 <__udivmodsi4>:
 194:	a1 e2       	ldi	r26, 0x21	; 33
 196:	1a 2e       	mov	r1, r26
 198:	aa 1b       	sub	r26, r26
 19a:	bb 1b       	sub	r27, r27
 19c:	fd 01       	movw	r30, r26
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <__udivmodsi4_ep>

000001a0 <__udivmodsi4_loop>:
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	ee 1f       	adc	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	a2 17       	cp	r26, r18
 1aa:	b3 07       	cpc	r27, r19
 1ac:	e4 07       	cpc	r30, r20
 1ae:	f5 07       	cpc	r31, r21
 1b0:	20 f0       	brcs	.+8      	; 0x1ba <__udivmodsi4_ep>
 1b2:	a2 1b       	sub	r26, r18
 1b4:	b3 0b       	sbc	r27, r19
 1b6:	e4 0b       	sbc	r30, r20
 1b8:	f5 0b       	sbc	r31, r21

000001ba <__udivmodsi4_ep>:
 1ba:	66 1f       	adc	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	88 1f       	adc	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	1a 94       	dec	r1
 1c4:	69 f7       	brne	.-38     	; 0x1a0 <__udivmodsi4_loop>
 1c6:	60 95       	com	r22
 1c8:	70 95       	com	r23
 1ca:	80 95       	com	r24
 1cc:	90 95       	com	r25
 1ce:	9b 01       	movw	r18, r22
 1d0:	ac 01       	movw	r20, r24
 1d2:	bd 01       	movw	r22, r26
 1d4:	cf 01       	movw	r24, r30
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>

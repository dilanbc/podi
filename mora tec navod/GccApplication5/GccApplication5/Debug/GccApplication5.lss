
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008e  0080008e  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be7  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dc  00000000  00000000  0000102f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e2  00000000  00000000  0000170b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ff  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000493  00000000  00000000  00001f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  8a:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
}

void USART_TxNumber(int32_t number,uint8_t dtype){
	
	itoa(number,num,dtype);
	USART_TxString(num);
  92:	9c 01       	movw	r18, r24
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	60 e2       	ldi	r22, 0x20	; 32
  9a:	71 ea       	ldi	r23, 0xA1	; 161
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 22 01 	call	0x244	; 0x244 <__divmodsi4>
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	31 09       	sbc	r19, r1
  a8:	30 bd       	out	0x20, r19	; 32
  aa:	29 b9       	out	0x09, r18	; 9
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	8e e8       	ldi	r24, 0x8E	; 142
  b2:	80 bd       	out	0x20, r24	; 32
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <USART_Transmit>:
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <USART_Transmit>
  bc:	8c b9       	out	0x0c, r24	; 12
  be:	08 95       	ret

000000c0 <USART_TxString>:
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
  c6:	03 c0       	rjmp	.+6      	; 0xce <USART_TxString+0xe>
  c8:	21 96       	adiw	r28, 0x01	; 1
  ca:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Transmit>
  ce:	88 81       	ld	r24, Y
  d0:	81 11       	cpse	r24, r1
  d2:	fa cf       	rjmp	.-12     	; 0xc8 <USART_TxString+0x8>
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <USART_TxStringln>:
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <USART_TxStringln+0xe>
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Transmit>
  e8:	88 81       	ld	r24, Y
  ea:	81 11       	cpse	r24, r1
  ec:	fa cf       	rjmp	.-12     	; 0xe2 <USART_TxStringln+0x8>
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Transmit>
  f4:	8a e0       	ldi	r24, 0x0A	; 10
  f6:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Transmit>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <__vector_13>:
	
}



ISR(USART_RXC_vect){//A,B,C,D ???
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
	
 rchar=UDR;
 10c:	8c b1       	in	r24, 0x0c	; 12
 10e:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
	

	
		
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:
volatile uint16_t TimerCal=0;// variable for collect echo data
uint16_t ultraINTL=0;
	
int main(void)
{
    USART_Init(9600);
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	95 e2       	ldi	r25, 0x25	; 37
 122:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	34 e3       	ldi	r19, 0x34	; 52
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xe>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x18>
 136:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT");
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 6d 00 	call	0xda	; 0xda <USART_TxStringln>
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	24 e3       	ldi	r18, 0x34	; 52
 144:	3c e0       	ldi	r19, 0x0C	; 12
 146:	91 50       	subi	r25, 0x01	; 1
 148:	20 40       	sbci	r18, 0x00	; 0
 14a:	30 40       	sbci	r19, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x28>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x32>
 150:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT");
 152:	80 e6       	ldi	r24, 0x60	; 96
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 6d 00 	call	0xda	; 0xda <USART_TxStringln>
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	94 e3       	ldi	r25, 0x34	; 52
 15e:	2c e0       	ldi	r18, 0x0C	; 12
 160:	81 50       	subi	r24, 0x01	; 1
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x42>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x4c>
 16a:	00 00       	nop
	_delay_ms(500);
	USART_TxStringln("AT+CMGF=1");
 16c:	83 e6       	ldi	r24, 0x63	; 99
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 6d 00 	call	0xda	; 0xda <USART_TxStringln>

	
	
    while (1) 
    {
		if (PINB&(1<<0))
 174:	b0 9b       	sbis	0x16, 0	; 22
 176:	fe cf       	rjmp	.-4      	; 0x174 <main+0x56>
		{
			USART_Init(9600);
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	95 e2       	ldi	r25, 0x25	; 37
 17c:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
 180:	3f ef       	ldi	r19, 0xFF	; 255
 182:	84 e3       	ldi	r24, 0x34	; 52
 184:	9c e0       	ldi	r25, 0x0C	; 12
 186:	31 50       	subi	r19, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x68>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x72>
 190:	00 00       	nop
			_delay_ms(500);
			USART_TxStringln("AT");
 192:	80 e6       	ldi	r24, 0x60	; 96
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 6d 00 	call	0xda	; 0xda <USART_TxStringln>
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	34 e3       	ldi	r19, 0x34	; 52
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	30 40       	sbci	r19, 0x00	; 0
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x82>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x8c>
 1aa:	00 00       	nop
			_delay_ms(500);
			USART_TxStringln("AT");
 1ac:	80 e6       	ldi	r24, 0x60	; 96
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 6d 00 	call	0xda	; 0xda <USART_TxStringln>
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	24 e3       	ldi	r18, 0x34	; 52
 1b8:	3c e0       	ldi	r19, 0x0C	; 12
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	30 40       	sbci	r19, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x9c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0xa6>
 1c4:	00 00       	nop
			_delay_ms(500);
			USART_TxStringln("AT+CMGF=1");
 1c6:	83 e6       	ldi	r24, 0x63	; 99
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 6d 00 	call	0xda	; 0xda <USART_TxStringln>
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	94 e3       	ldi	r25, 0x34	; 52
 1d2:	2c e0       	ldi	r18, 0x0C	; 12
 1d4:	81 50       	subi	r24, 0x01	; 1
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	20 40       	sbci	r18, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0xb6>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0xc0>
 1de:	00 00       	nop
			_delay_ms(500);
			USART_TxStringln("AT+CMGS=\"+94710000000\"");
 1e0:	8d e6       	ldi	r24, 0x6D	; 109
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 6d 00 	call	0xda	; 0xda <USART_TxStringln>
 1e8:	3f ef       	ldi	r19, 0xFF	; 255
 1ea:	81 ee       	ldi	r24, 0xE1	; 225
 1ec:	94 e0       	ldi	r25, 0x04	; 4
 1ee:	31 50       	subi	r19, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0xd0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0xda>
 1f8:	00 00       	nop
			_delay_ms(200);
			USART_TxString("Emergency");
 1fa:	84 e8       	ldi	r24, 0x84	; 132
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_TxString>
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	31 ee       	ldi	r19, 0xE1	; 225
 206:	84 e0       	ldi	r24, 0x04	; 4
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	30 40       	sbci	r19, 0x00	; 0
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0xea>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0xf4>
 212:	00 00       	nop
			_delay_ms(200);
			USART_Transmit(26);
 214:	8a e1       	ldi	r24, 0x1A	; 26
 216:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Transmit>
 21a:	9f ef       	ldi	r25, 0xFF	; 255
 21c:	21 ee       	ldi	r18, 0xE1	; 225
 21e:	34 e0       	ldi	r19, 0x04	; 4
 220:	91 50       	subi	r25, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	30 40       	sbci	r19, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x102>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x10c>
 22a:	00 00       	nop
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	99 e5       	ldi	r25, 0x59	; 89
 230:	22 e6       	ldi	r18, 0x62	; 98
 232:	32 e0       	ldi	r19, 0x02	; 2
 234:	81 50       	subi	r24, 0x01	; 1
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	20 40       	sbci	r18, 0x00	; 0
 23a:	30 40       	sbci	r19, 0x00	; 0
 23c:	d9 f7       	brne	.-10     	; 0x234 <main+0x116>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x122>
 240:	00 00       	nop
 242:	98 cf       	rjmp	.-208    	; 0x174 <main+0x56>

00000244 <__divmodsi4>:
 244:	05 2e       	mov	r0, r21
 246:	97 fb       	bst	r25, 7
 248:	1e f4       	brtc	.+6      	; 0x250 <__divmodsi4+0xc>
 24a:	00 94       	com	r0
 24c:	0e 94 39 01 	call	0x272	; 0x272 <__negsi2>
 250:	57 fd       	sbrc	r21, 7
 252:	07 d0       	rcall	.+14     	; 0x262 <__divmodsi4_neg2>
 254:	0e 94 41 01 	call	0x282	; 0x282 <__udivmodsi4>
 258:	07 fc       	sbrc	r0, 7
 25a:	03 d0       	rcall	.+6      	; 0x262 <__divmodsi4_neg2>
 25c:	4e f4       	brtc	.+18     	; 0x270 <__divmodsi4_exit>
 25e:	0c 94 39 01 	jmp	0x272	; 0x272 <__negsi2>

00000262 <__divmodsi4_neg2>:
 262:	50 95       	com	r21
 264:	40 95       	com	r20
 266:	30 95       	com	r19
 268:	21 95       	neg	r18
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	4f 4f       	sbci	r20, 0xFF	; 255
 26e:	5f 4f       	sbci	r21, 0xFF	; 255

00000270 <__divmodsi4_exit>:
 270:	08 95       	ret

00000272 <__negsi2>:
 272:	90 95       	com	r25
 274:	80 95       	com	r24
 276:	70 95       	com	r23
 278:	61 95       	neg	r22
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	8f 4f       	sbci	r24, 0xFF	; 255
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	08 95       	ret

00000282 <__udivmodsi4>:
 282:	a1 e2       	ldi	r26, 0x21	; 33
 284:	1a 2e       	mov	r1, r26
 286:	aa 1b       	sub	r26, r26
 288:	bb 1b       	sub	r27, r27
 28a:	fd 01       	movw	r30, r26
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <__udivmodsi4_ep>

0000028e <__udivmodsi4_loop>:
 28e:	aa 1f       	adc	r26, r26
 290:	bb 1f       	adc	r27, r27
 292:	ee 1f       	adc	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	a2 17       	cp	r26, r18
 298:	b3 07       	cpc	r27, r19
 29a:	e4 07       	cpc	r30, r20
 29c:	f5 07       	cpc	r31, r21
 29e:	20 f0       	brcs	.+8      	; 0x2a8 <__udivmodsi4_ep>
 2a0:	a2 1b       	sub	r26, r18
 2a2:	b3 0b       	sbc	r27, r19
 2a4:	e4 0b       	sbc	r30, r20
 2a6:	f5 0b       	sbc	r31, r21

000002a8 <__udivmodsi4_ep>:
 2a8:	66 1f       	adc	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	88 1f       	adc	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	1a 94       	dec	r1
 2b2:	69 f7       	brne	.-38     	; 0x28e <__udivmodsi4_loop>
 2b4:	60 95       	com	r22
 2b6:	70 95       	com	r23
 2b8:	80 95       	com	r24
 2ba:	90 95       	com	r25
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	bd 01       	movw	r22, r26
 2c2:	cf 01       	movw	r24, r30
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>

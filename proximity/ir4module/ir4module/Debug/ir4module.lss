
ir4module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  00800100  00800100  00000670  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bfd  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000818  00000000  00000000  0000134d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000774  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000022dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000599  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b4  00000000  00000000  000029e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 33       	cpi	r26, 0x3A	; 58
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  88:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z10USART_Initj>:
	
	char fString[10];
	dtostrf(number,length,deciP,fString);
	USART_TxString(fString);
	
}
  90:	9c 01       	movw	r18, r24
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	60 e2       	ldi	r22, 0x20	; 32
  98:	71 ea       	ldi	r23, 0xA1	; 161
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 bb 02 	call	0x576	; 0x576 <__divmodsi4>
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	31 09       	sbc	r19, r1
  a6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <__vector_18>:


ISR(USART_RX_vect){
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	4f 93       	push	r20
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
  d4:	bf 93       	push	r27
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	//PORTB^=1<<0;
	char rchar=UDR0;
  da:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	uint8_t i=0;
  de:	e0 e0       	ldi	r30, 0x00	; 0
	
	while(rxvalue[i]){
  e0:	ae 2f       	mov	r26, r30
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	a8 5f       	subi	r26, 0xF8	; 248
  e6:	be 4f       	sbci	r27, 0xFE	; 254
  e8:	8c 91       	ld	r24, X
  ea:	88 23       	and	r24, r24
  ec:	19 f0       	breq	.+6      	; 0xf4 <__vector_18+0x36>
	i++;
  ee:	ef 5f       	subi	r30, 0xFF	; 255
	if (i==rxshiftNum)
  f0:	e2 33       	cpi	r30, 0x32	; 50
  f2:	b1 f7       	brne	.-20     	; 0xe0 <__vector_18+0x22>
	{break;
	}
	}
	if (i<rxshiftNum)
  f4:	e2 33       	cpi	r30, 0x32	; 50
  f6:	28 f4       	brcc	.+10     	; 0x102 <__vector_18+0x44>
	{rxvalue[i]=rchar;
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	e8 5f       	subi	r30, 0xF8	; 248
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	40 83       	st	Z, r20
 100:	11 c0       	rjmp	.+34     	; 0x124 <__vector_18+0x66>
 102:	20 e0       	ldi	r18, 0x00	; 0
	} 
	else
	{
		for(uint8_t i=0;i<rxshiftNum-1;i++){
 104:	21 33       	cpi	r18, 0x31	; 49
 106:	60 f4       	brcc	.+24     	; 0x120 <__vector_18+0x62>
		rxvalue[i]=rxvalue[i+1];
 108:	82 2f       	mov	r24, r18
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	e7 5f       	subi	r30, 0xF7	; 247
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	30 81       	ld	r19, Z
 114:	fc 01       	movw	r30, r24
 116:	e8 5f       	subi	r30, 0xF8	; 248
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	30 83       	st	Z, r19
	if (i<rxshiftNum)
	{rxvalue[i]=rchar;
	} 
	else
	{
		for(uint8_t i=0;i<rxshiftNum-1;i++){
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	f2 cf       	rjmp	.-28     	; 0x104 <__vector_18+0x46>
		rxvalue[i]=rxvalue[i+1];
	}
	rxvalue[rxshiftNum-1]=rchar;
 120:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <rxvalue+0x31>
		
	}
	
		
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <main>:
volatile uint8_t delayCounter=0;
volatile uint8_t echoState=0;
volatile uint8_t echoOnState=0;

int main(void)
{	DDRB|=(0b11<<6)|(1<<0);
 140:	84 b1       	in	r24, 0x04	; 4
 142:	81 6c       	ori	r24, 0xC1	; 193
 144:	84 b9       	out	0x04, r24	; 4
	DDRD|=(0b111<<5)|(1<<2);
 146:	8a b1       	in	r24, 0x0a	; 10
 148:	84 6e       	ori	r24, 0xE4	; 228
 14a:	8a b9       	out	0x0a, r24	; 10
	USART_Init(9600);
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	95 e2       	ldi	r25, 0x25	; 37
 150:	0e 94 48 00 	call	0x90	; 0x90 <_Z10USART_Initj>
	
    TCCR0A|=(1<<WGM01);
 154:	84 b5       	in	r24, 0x24	; 36
 156:	82 60       	ori	r24, 0x02	; 2
 158:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS00);
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	85 bd       	out	0x25, r24	; 37
	TCNT0=0;
 160:	16 bc       	out	0x26, r1	; 38
	OCR0A=8;
 162:	88 e0       	ldi	r24, 0x08	; 8
 164:	87 bd       	out	0x27, r24	; 39
	TIMSK0|=(1<<OCF0A);
 166:	ee e6       	ldi	r30, 0x6E	; 110
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	80 83       	st	Z, r24
	
	TCCR2A|=(1<<WGM21);
 170:	e0 eb       	ldi	r30, 0xB0	; 176
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	82 60       	ori	r24, 0x02	; 2
 178:	80 83       	st	Z, r24
	TCCR2B|=(1<<CS21)|(1<<CS20)|(1<<CS22);
 17a:	e1 eb       	ldi	r30, 0xB1	; 177
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	87 60       	ori	r24, 0x07	; 7
 182:	80 83       	st	Z, r24
	TCNT2=0;
 184:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	OCR2A=156;
 188:	8c e9       	ldi	r24, 0x9C	; 156
 18a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2|=(1<<OCF2A);
 18e:	e0 e7       	ldi	r30, 0x70	; 112
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	82 60       	ori	r24, 0x02	; 2
 196:	80 83       	st	Z, r24
	
	PCICR|=(1<<PCIE1);
 198:	e8 e6       	ldi	r30, 0x68	; 104
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	80 83       	st	Z, r24
	PCMSK1=(1<<pcCounter);
 1a2:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pcCounter>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <main+0x70>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	2a 95       	dec	r18
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <main+0x6c>
 1b4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	sei();
 1b8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	8f e1       	ldi	r24, 0x1F	; 31
 1bc:	9e e4       	ldi	r25, 0x4E	; 78
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x7e>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x84>
 1c4:	00 00       	nop
		
		
		/*pulse*/
		
		_delay_ms(10);
		PORTD|=(1<<2);
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	84 60       	ori	r24, 0x04	; 4
 1ca:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	9d e0       	ldi	r25, 0x0D	; 13
 1ce:	9a 95       	dec	r25
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x8e>
 1d2:	00 00       	nop
		_delay_us(5);
		PORTD&=~(1<<2);
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	8b b9       	out	0x0b, r24	; 11
		timeri=0;
 1da:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <timeri+0x1>
 1de:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeri>
		
		if (timerj<300)
 1e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerj>
 1e6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerj+0x1>
 1ea:	8c 32       	cpi	r24, 0x2C	; 44
 1ec:	91 40       	sbci	r25, 0x01	; 1
 1ee:	e8 f4       	brcc	.+58     	; 0x22a <main+0xea>
		{
			
			echoState|=(1<<pcCounter);
 1f0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pcCounter>
 1f4:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <echoState>
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	bc 01       	movw	r22, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <main+0xc4>
 200:	66 0f       	add	r22, r22
 202:	77 1f       	adc	r23, r23
 204:	2a 95       	dec	r18
 206:	e2 f7       	brpl	.-8      	; 0x200 <main+0xc0>
 208:	9b 01       	movw	r18, r22
 20a:	24 2b       	or	r18, r20
 20c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <echoState>
			echoOnState|=(1<<pcCounter);
 210:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pcCounter>
 214:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 218:	02 c0       	rjmp	.+4      	; 0x21e <main+0xde>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	3a 95       	dec	r19
 220:	e2 f7       	brpl	.-8      	; 0x21a <main+0xda>
 222:	82 2b       	or	r24, r18
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 228:	36 c0       	rjmp	.+108    	; 0x296 <main+0x156>
		
		
		}
		else if (timerj<700)
 22a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timerj>
 22e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timerj+0x1>
 232:	8c 3b       	cpi	r24, 0xBC	; 188
 234:	92 40       	sbci	r25, 0x02	; 2
 236:	f8 f4       	brcc	.+62     	; 0x276 <main+0x136>
		{echoState&=~(1<<pcCounter);
 238:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pcCounter>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <main+0x108>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	2a 95       	dec	r18
 24a:	e2 f7       	brpl	.-8      	; 0x244 <main+0x104>
 24c:	9a 01       	movw	r18, r20
 24e:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <echoState>
 252:	20 95       	com	r18
 254:	30 95       	com	r19
 256:	24 23       	and	r18, r20
 258:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <echoState>
			echoOnState|=(1<<pcCounter);
 25c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pcCounter>
 260:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 264:	02 c0       	rjmp	.+4      	; 0x26a <main+0x12a>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	3a 95       	dec	r19
 26c:	e2 f7       	brpl	.-8      	; 0x266 <main+0x126>
 26e:	82 2b       	or	r24, r18
 270:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 274:	10 c0       	rjmp	.+32     	; 0x296 <main+0x156>
		}
		else{
			echoOnState&=~(1<<pcCounter);
 276:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pcCounter>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <main+0x144>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	2a 95       	dec	r18
 286:	e2 f7       	brpl	.-8      	; 0x280 <main+0x140>
 288:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28c:	80 95       	com	r24
 28e:	90 95       	com	r25
 290:	82 23       	and	r24, r18
 292:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		pcCounter++;
 296:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pcCounter>
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pcCounter>
		if (pcCounter>5)
 2a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pcCounter>
 2a4:	86 30       	cpi	r24, 0x06	; 6
 2a6:	10 f0       	brcs	.+4      	; 0x2ac <main+0x16c>
		{pcCounter=0;
 2a8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <pcCounter>
		}
		PCMSK1=(1<<pcCounter);
 2ac:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pcCounter>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <main+0x17a>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	2a 95       	dec	r18
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <main+0x176>
 2be:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	
	PCICR|=(1<<PCIE1);
	PCMSK1=(1<<pcCounter);
	sei();
	
    while (1) 
 2c2:	7b cf       	rjmp	.-266    	; 0x1ba <main+0x7a>

000002c4 <__vector_14>:
		
		
    }
}

ISR(TIMER0_COMPA_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
	timeri++;
 2d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeri>
 2d6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timeri+0x1>
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timeri+0x1>
 2e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timeri>
	TCNT0=0;
 2e4:	16 bc       	out	0x26, r1	; 38
}
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <__vector_7>:
ISR(TIMER2_COMPA_vect){//20ms
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
	delayCounter++;
 302:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delayCounter>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delayCounter>
	
	
	if (delayCounter>10)
 30c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delayCounter>
 310:	8b 30       	cpi	r24, 0x0B	; 11
 312:	08 f4       	brcc	.+2      	; 0x316 <__vector_7+0x22>
 314:	89 c0       	rjmp	.+274    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{delayCounter=0;
 316:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <delayCounter>
		if ((!(echoState&0b1))&&(echoOnState&0b1)) PORTD^=(1<<7);else PORTD&=~(1<<7);
 31a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 31e:	80 fd       	sbrc	r24, 0
 320:	06 c0       	rjmp	.+12     	; 0x32e <__vector_7+0x3a>
 322:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 326:	80 fd       	sbrc	r24, 0
 328:	04 c0       	rjmp	.+8      	; 0x332 <__vector_7+0x3e>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	03 c0       	rjmp	.+6      	; 0x334 <__vector_7+0x40>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	01 c0       	rjmp	.+2      	; 0x334 <__vector_7+0x40>
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	88 23       	and	r24, r24
 336:	21 f0       	breq	.+8      	; 0x340 <__vector_7+0x4c>
 338:	8b b1       	in	r24, 0x0b	; 11
 33a:	80 58       	subi	r24, 0x80	; 128
 33c:	8b b9       	out	0x0b, r24	; 11
 33e:	03 c0       	rjmp	.+6      	; 0x346 <__vector_7+0x52>
 340:	8b b1       	in	r24, 0x0b	; 11
 342:	8f 77       	andi	r24, 0x7F	; 127
 344:	8b b9       	out	0x0b, r24	; 11
		if ((!(echoState&0b10))&&(echoOnState&0b10)) PORTD^=(1<<6);else PORTD&=~(1<<6);
 346:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 34a:	81 fd       	sbrc	r24, 1
 34c:	06 c0       	rjmp	.+12     	; 0x35a <__vector_7+0x66>
 34e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 352:	81 fd       	sbrc	r24, 1
 354:	04 c0       	rjmp	.+8      	; 0x35e <__vector_7+0x6a>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	03 c0       	rjmp	.+6      	; 0x360 <__vector_7+0x6c>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	01 c0       	rjmp	.+2      	; 0x360 <__vector_7+0x6c>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	88 23       	and	r24, r24
 362:	29 f0       	breq	.+10     	; 0x36e <__vector_7+0x7a>
 364:	9b b1       	in	r25, 0x0b	; 11
 366:	80 e4       	ldi	r24, 0x40	; 64
 368:	89 27       	eor	r24, r25
 36a:	8b b9       	out	0x0b, r24	; 11
 36c:	03 c0       	rjmp	.+6      	; 0x374 <__vector_7+0x80>
 36e:	8b b1       	in	r24, 0x0b	; 11
 370:	8f 7b       	andi	r24, 0xBF	; 191
 372:	8b b9       	out	0x0b, r24	; 11
		if ((!(echoState&0b100))&&(echoOnState&0b100)) PORTD^=(1<<5);else PORTD&=~(1<<5);
 374:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 378:	82 fd       	sbrc	r24, 2
 37a:	06 c0       	rjmp	.+12     	; 0x388 <__vector_7+0x94>
 37c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 380:	82 fd       	sbrc	r24, 2
 382:	04 c0       	rjmp	.+8      	; 0x38c <__vector_7+0x98>
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	03 c0       	rjmp	.+6      	; 0x38e <__vector_7+0x9a>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	01 c0       	rjmp	.+2      	; 0x38e <__vector_7+0x9a>
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	88 23       	and	r24, r24
 390:	29 f0       	breq	.+10     	; 0x39c <__vector_7+0xa8>
 392:	9b b1       	in	r25, 0x0b	; 11
 394:	80 e2       	ldi	r24, 0x20	; 32
 396:	89 27       	eor	r24, r25
 398:	8b b9       	out	0x0b, r24	; 11
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <__vector_7+0xae>
 39c:	8b b1       	in	r24, 0x0b	; 11
 39e:	8f 7d       	andi	r24, 0xDF	; 223
 3a0:	8b b9       	out	0x0b, r24	; 11
		if ((!(echoState&0b1000))&&(echoOnState&0b1000)) PORTB^=(1<<7);else PORTB&=~(1<<7);
 3a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 3a6:	83 fd       	sbrc	r24, 3
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <__vector_7+0xc2>
 3aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ae:	83 fd       	sbrc	r24, 3
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <__vector_7+0xc6>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <__vector_7+0xc8>
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <__vector_7+0xc8>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	88 23       	and	r24, r24
 3be:	21 f0       	breq	.+8      	; 0x3c8 <__vector_7+0xd4>
 3c0:	85 b1       	in	r24, 0x05	; 5
 3c2:	80 58       	subi	r24, 0x80	; 128
 3c4:	85 b9       	out	0x05, r24	; 5
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <__vector_7+0xda>
 3c8:	85 b1       	in	r24, 0x05	; 5
 3ca:	8f 77       	andi	r24, 0x7F	; 127
 3cc:	85 b9       	out	0x05, r24	; 5
		if ((!(echoState&0b110000))&&(echoOnState&0b110000)) PORTB^=(1<<6);else PORTB&=~(1<<6);
 3ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 3d2:	80 73       	andi	r24, 0x30	; 48
 3d4:	29 f4       	brne	.+10     	; 0x3e0 <__vector_7+0xec>
 3d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3da:	80 73       	andi	r24, 0x30	; 48
 3dc:	19 f4       	brne	.+6      	; 0x3e4 <__vector_7+0xf0>
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <__vector_7+0xf2>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <__vector_7+0xf2>
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	88 23       	and	r24, r24
 3e8:	29 f0       	breq	.+10     	; 0x3f4 <__vector_7+0x100>
 3ea:	95 b1       	in	r25, 0x05	; 5
 3ec:	80 e4       	ldi	r24, 0x40	; 64
 3ee:	89 27       	eor	r24, r25
 3f0:	85 b9       	out	0x05, r24	; 5
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <__vector_7+0x106>
 3f4:	85 b1       	in	r24, 0x05	; 5
 3f6:	8f 7b       	andi	r24, 0xBF	; 191
 3f8:	85 b9       	out	0x05, r24	; 5
		if ((!(echoState&0b111111))&&(echoOnState&0b111111)) PORTB^=(1<<0);else PORTB&=~(1<<0);
 3fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 3fe:	8f 73       	andi	r24, 0x3F	; 63
 400:	29 f4       	brne	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 402:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 406:	8f 73       	andi	r24, 0x3F	; 63
 408:	19 f4       	brne	.+6      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40a:	03 c0       	rjmp	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	01 c0       	rjmp	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	88 23       	and	r24, r24
 414:	29 f0       	breq	.+10     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 416:	95 b1       	in	r25, 0x05	; 5
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	89 27       	eor	r24, r25
 41c:	85 b9       	out	0x05, r24	; 5
 41e:	8a c0       	rjmp	.+276    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 420:	85 b1       	in	r24, 0x05	; 5
 422:	8e 7f       	andi	r24, 0xFE	; 254
 424:	85 b9       	out	0x05, r24	; 5
 426:	86 c0       	rjmp	.+268    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
		
	}
	else{
		if ((echoState&0b1)&&(echoOnState&0b1)) PORTD^=(1<<7); else PORTD&=~(1<<7);
 428:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 42c:	80 ff       	sbrs	r24, 0
 42e:	06 c0       	rjmp	.+12     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 430:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 434:	80 fd       	sbrc	r24, 0
 436:	04 c0       	rjmp	.+8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	88 23       	and	r24, r24
 444:	21 f0       	breq	.+8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 446:	8b b1       	in	r24, 0x0b	; 11
 448:	80 58       	subi	r24, 0x80	; 128
 44a:	8b b9       	out	0x0b, r24	; 11
 44c:	03 c0       	rjmp	.+6      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 44e:	8b b1       	in	r24, 0x0b	; 11
 450:	8f 77       	andi	r24, 0x7F	; 127
 452:	8b b9       	out	0x0b, r24	; 11
		if ((echoState&0b10)&&(echoOnState&0b10)) PORTD^=(1<<6);else PORTD&=~(1<<6);
 454:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 458:	81 ff       	sbrs	r24, 1
 45a:	06 c0       	rjmp	.+12     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 45c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 460:	81 fd       	sbrc	r24, 1
 462:	04 c0       	rjmp	.+8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	03 c0       	rjmp	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	01 c0       	rjmp	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	88 23       	and	r24, r24
 470:	29 f0       	breq	.+10     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 472:	9b b1       	in	r25, 0x0b	; 11
 474:	80 e4       	ldi	r24, 0x40	; 64
 476:	89 27       	eor	r24, r25
 478:	8b b9       	out	0x0b, r24	; 11
 47a:	03 c0       	rjmp	.+6      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47c:	8b b1       	in	r24, 0x0b	; 11
 47e:	8f 7b       	andi	r24, 0xBF	; 191
 480:	8b b9       	out	0x0b, r24	; 11
		if ((echoState&0b100)&&(echoOnState&0b100)) PORTD^=(1<<5);else PORTD&=~(1<<5);
 482:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 486:	82 ff       	sbrs	r24, 2
 488:	06 c0       	rjmp	.+12     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 48a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 48e:	82 fd       	sbrc	r24, 2
 490:	04 c0       	rjmp	.+8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	03 c0       	rjmp	.+6      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	01 c0       	rjmp	.+2      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	88 23       	and	r24, r24
 49e:	29 f0       	breq	.+10     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4a0:	9b b1       	in	r25, 0x0b	; 11
 4a2:	80 e2       	ldi	r24, 0x20	; 32
 4a4:	89 27       	eor	r24, r25
 4a6:	8b b9       	out	0x0b, r24	; 11
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4aa:	8b b1       	in	r24, 0x0b	; 11
 4ac:	8f 7d       	andi	r24, 0xDF	; 223
 4ae:	8b b9       	out	0x0b, r24	; 11
		if ((echoState&0b1000)&&(echoOnState&0b1000)) PORTB^=(1<<7);else PORTB&=~(1<<7);
 4b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 4b4:	83 ff       	sbrs	r24, 3
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4bc:	83 fd       	sbrc	r24, 3
 4be:	04 c0       	rjmp	.+8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	88 23       	and	r24, r24
 4cc:	21 f0       	breq	.+8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4ce:	85 b1       	in	r24, 0x05	; 5
 4d0:	80 58       	subi	r24, 0x80	; 128
 4d2:	85 b9       	out	0x05, r24	; 5
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4d6:	85 b1       	in	r24, 0x05	; 5
 4d8:	8f 77       	andi	r24, 0x7F	; 127
 4da:	85 b9       	out	0x05, r24	; 5
		if ((echoState&0b110000)&&(echoOnState&0b110000)) PORTB^=(1<<6);else PORTB&=~(1<<6);
 4dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 4e0:	80 73       	andi	r24, 0x30	; 48
 4e2:	29 f0       	breq	.+10     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4e8:	80 73       	andi	r24, 0x30	; 48
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	88 23       	and	r24, r24
 4f6:	29 f0       	breq	.+10     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4f8:	95 b1       	in	r25, 0x05	; 5
 4fa:	80 e4       	ldi	r24, 0x40	; 64
 4fc:	89 27       	eor	r24, r25
 4fe:	85 b9       	out	0x05, r24	; 5
 500:	03 c0       	rjmp	.+6      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 502:	85 b1       	in	r24, 0x05	; 5
 504:	8f 7b       	andi	r24, 0xBF	; 191
 506:	85 b9       	out	0x05, r24	; 5
		if ((echoState&0b111111)&&(echoOnState&0b111111)) PORTB^=(1<<0);else PORTB&=~(1<<0);
 508:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <echoState>
 50c:	8f 73       	andi	r24, 0x3F	; 63
 50e:	29 f0       	breq	.+10     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 510:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 514:	8f 73       	andi	r24, 0x3F	; 63
 516:	19 f4       	brne	.+6      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 518:	03 c0       	rjmp	.+6      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	01 c0       	rjmp	.+2      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	88 23       	and	r24, r24
 522:	29 f0       	breq	.+10     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 524:	95 b1       	in	r25, 0x05	; 5
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	89 27       	eor	r24, r25
 52a:	85 b9       	out	0x05, r24	; 5
 52c:	03 c0       	rjmp	.+6      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 52e:	85 b1       	in	r24, 0x05	; 5
 530:	8e 7f       	andi	r24, 0xFE	; 254
 532:	85 b9       	out	0x05, r24	; 5
	}
}
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <__vector_4>:
ISR(PCINT1_vect){
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
	timerj=timeri;		timeri=0;
 550:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeri>
 554:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timeri+0x1>
 558:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timerj+0x1>
 55c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timerj>
 560:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <timeri+0x1>
 564:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeri>
	
	
}
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <__divmodsi4>:
 576:	05 2e       	mov	r0, r21
 578:	97 fb       	bst	r25, 7
 57a:	1e f4       	brtc	.+6      	; 0x582 <__divmodsi4+0xc>
 57c:	00 94       	com	r0
 57e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__negsi2>
 582:	57 fd       	sbrc	r21, 7
 584:	07 d0       	rcall	.+14     	; 0x594 <__divmodsi4_neg2>
 586:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__udivmodsi4>
 58a:	07 fc       	sbrc	r0, 7
 58c:	03 d0       	rcall	.+6      	; 0x594 <__divmodsi4_neg2>
 58e:	4e f4       	brtc	.+18     	; 0x5a2 <__divmodsi4_exit>
 590:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__negsi2>

00000594 <__divmodsi4_neg2>:
 594:	50 95       	com	r21
 596:	40 95       	com	r20
 598:	30 95       	com	r19
 59a:	21 95       	neg	r18
 59c:	3f 4f       	sbci	r19, 0xFF	; 255
 59e:	4f 4f       	sbci	r20, 0xFF	; 255
 5a0:	5f 4f       	sbci	r21, 0xFF	; 255

000005a2 <__divmodsi4_exit>:
 5a2:	08 95       	ret

000005a4 <__negsi2>:
 5a4:	90 95       	com	r25
 5a6:	80 95       	com	r24
 5a8:	70 95       	com	r23
 5aa:	61 95       	neg	r22
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	8f 4f       	sbci	r24, 0xFF	; 255
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	08 95       	ret

000005b4 <__udivmodsi4>:
 5b4:	a1 e2       	ldi	r26, 0x21	; 33
 5b6:	1a 2e       	mov	r1, r26
 5b8:	aa 1b       	sub	r26, r26
 5ba:	bb 1b       	sub	r27, r27
 5bc:	fd 01       	movw	r30, r26
 5be:	0d c0       	rjmp	.+26     	; 0x5da <__udivmodsi4_ep>

000005c0 <__udivmodsi4_loop>:
 5c0:	aa 1f       	adc	r26, r26
 5c2:	bb 1f       	adc	r27, r27
 5c4:	ee 1f       	adc	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	a2 17       	cp	r26, r18
 5ca:	b3 07       	cpc	r27, r19
 5cc:	e4 07       	cpc	r30, r20
 5ce:	f5 07       	cpc	r31, r21
 5d0:	20 f0       	brcs	.+8      	; 0x5da <__udivmodsi4_ep>
 5d2:	a2 1b       	sub	r26, r18
 5d4:	b3 0b       	sbc	r27, r19
 5d6:	e4 0b       	sbc	r30, r20
 5d8:	f5 0b       	sbc	r31, r21

000005da <__udivmodsi4_ep>:
 5da:	66 1f       	adc	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	1a 94       	dec	r1
 5e4:	69 f7       	brne	.-38     	; 0x5c0 <__udivmodsi4_loop>
 5e6:	60 95       	com	r22
 5e8:	70 95       	com	r23
 5ea:	80 95       	com	r24
 5ec:	90 95       	com	r25
 5ee:	9b 01       	movw	r18, r22
 5f0:	ac 01       	movw	r20, r24
 5f2:	bd 01       	movw	r22, r26
 5f4:	cf 01       	movw	r24, r30
 5f6:	08 95       	ret

000005f8 <_exit>:
 5f8:	f8 94       	cli

000005fa <__stop_program>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <__stop_program>
